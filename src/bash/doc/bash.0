_B_A_S_H(1)                     General Commands Manual                    _B_A_S_H(1)

NNAAMMEE
       bash - GNU Bourne-Again SHell

SSYYNNOOPPSSIISS
       bbaasshh [options] [command_string | file]

CCOOPPYYRRIIGGHHTT
       Bash is Copyright (C) 1989-2025 by the Free Software Foundation, Inc.

DDEESSCCRRIIPPTTIIOONN
       BBaasshh is a command language interpreter that executes commands read from
       the standard input, from a string, or from a file.  It is a reimplemen-
       tation  and  extension of the Bourne shell, the historical Unix command
       language interpreter.  BBaasshh also incorporates useful features from  the
       _K_o_r_n and _C shells (kksshh and ccsshh).

       POSIX  is  the  name for a family of computing standards based on Unix.
       BBaasshh is intended to be a conformant implementation  of  the  Shell  and
       Utilities  portion  of  the  IEEE  POSIX  specification  (IEEE Standard
       1003.1).  BBaasshh POSIX mode (hereafter referred to as _p_o_s_i_x _m_o_d_e) changes
       the shell's behavior where its default operation differs from the stan-
       dard to strictly conform to the standard.  See SSEEEE  AALLSSOO  below  for  a
       reference  to a document that details how posix mode affects bbaasshh's be-
       havior.  BBaasshh can be configured to be POSIX-conformant by default.

OOPPTTIIOONNSS
       All of the single-character shell options documented in the description
       of the sseett builtin command, including --oo, can be used as  options  when
       the  shell  is invoked.  In addition, bbaasshh interprets the following op-
       tions when it is invoked:

       --cc        If the --cc option is present, then commands are read from  the
                 first non-option argument _c_o_m_m_a_n_d___s_t_r_i_n_g.  If there are argu-
                 ments  after  the  _c_o_m_m_a_n_d___s_t_r_i_n_g,  the first argument is as-
                 signed to $$00 and any remaining arguments are assigned to  the
                 positional parameters.  The assignment to $$00 sets the name of
                 the shell, which is used in warning and error messages.

       --ii        If the --ii option is present, the shell is _i_n_t_e_r_a_c_t_i_v_e.

       --ll        Make bbaasshh act as if it had been invoked as a login shell (see
                 IINNVVOOCCAATTIIOONN below).

       --rr        If  the  --rr  option  is present, the shell becomes _r_e_s_t_r_i_c_t_e_d
                 (see RREESSTTRRIICCTTEEDD SSHHEELLLL below).

       --ss        If the --ss option is present, or if no arguments remain  after
                 option processing, the shell reads commands from the standard
                 input.   This  option  allows the positional parameters to be
                 set when invoking an interactive shell or when reading  input
                 through a pipe.

       --DD        Print  a  list  of all double-quoted strings preceded by $$ on
                 the standard output.  These are the strings that are  subject
                 to  language  translation when the current locale is not CC or
                 PPOOSSIIXX.  This implies the --nn option; no commands will be  exe-
                 cuted.

       [[--++]]OO [[_s_h_o_p_t___o_p_t_i_o_n]]
                 _s_h_o_p_t___o_p_t_i_o_n  is  one  of  the  shell options accepted by the
                 sshhoopptt  builtin  (see  SSHHEELLLL  BBUUIILLTTIINN  CCOOMMMMAANNDDSS  below).    If
                 _s_h_o_p_t___o_p_t_i_o_n is present, --OO sets the value of that option; ++OO
                 unsets  it.  If _s_h_o_p_t___o_p_t_i_o_n is not supplied, bbaasshh prints the
                 names and values of the shell options accepted  by  sshhoopptt  on
                 the  standard  output.   If  the invocation option is ++OO, the
                 output is displayed in a format that may be reused as input.

       ----        A ---- signals the end of options and disables  further  option
                 processing.   Any  arguments  after  the  ---- are treated as a
                 shell script filename (see below)  and  arguments  passed  to
                 that script.  An argument of -- is equivalent to ----.

       BBaasshh  also  interprets  a number of multi-character options.  These op-
       tions must appear on the command line before the  single-character  op-
       tions to be recognized.

       ----ddeebbuuggggeerr
              Arrange for the debugger profile to be executed before the shell
              starts.   Turns  on extended debugging mode (see the description
              of the eexxttddeebbuugg option to the sshhoopptt builtin below).

       ----dduummpp--ppoo--ssttrriinnggss
              Equivalent to --DD, but the output is  in  the  GNU  _g_e_t_t_e_x_t  "po"
              (portable object) file format.

       ----dduummpp--ssttrriinnggss
              Equivalent to --DD.

       ----hheellpp Display  a  usage  message  on standard output and exit success-
              fully.

       ----iinniitt--ffiillee _f_i_l_e
       ----rrccffiillee _f_i_l_e
              Execute commands from _f_i_l_e instead of the standard personal ini-
              tialization file _~_/_._b_a_s_h_r_c if the shell is interactive (see  IINN--
              VVOOCCAATTIIOONN below).

       ----llooggiinn
              Equivalent to --ll.

       ----nnooeeddiittiinngg
              Do  not  use the GNU rreeaaddlliinnee library to read command lines when
              the shell is interactive.

       ----nnoopprrooffiillee
              Do not read either the system-wide startup file _/_e_t_c_/_p_r_o_f_i_l_e  or
              any   of  the  personal  initialization  files  _~_/_._b_a_s_h___p_r_o_f_i_l_e,
              _~_/_._b_a_s_h___l_o_g_i_n, or _~_/_._p_r_o_f_i_l_e.   By  default,  bbaasshh  reads  these
              files  when  it  is invoked as a login shell (see IINNVVOOCCAATTIIOONN be-
              low).

       ----nnoorrcc Do  not  read  and  execute  the  personal  initialization  file
              _~_/_._b_a_s_h_r_c if the shell is interactive.  This option is on by de-
              fault if the shell is invoked as sshh.

       ----ppoossiixx
              Enable posix mode; change the behavior of bbaasshh where the default
              operation differs from the POSIX standard to match the standard.

       ----rreessttrriicctteedd
              The shell becomes restricted (see RREESSTTRRIICCTTEEDD SSHHEELLLL below).

       ----vveerrbboossee
              Equivalent to --vv.

       ----vveerrssiioonn
              Show  version information for this instance of bbaasshh on the stan-
              dard output and exit successfully.

AARRGGUUMMEENNTTSS
       If arguments remain after option processing, and neither the --cc nor the
       --ss option has been supplied, the first argument is treated as the  name
       of a file containing shell commands (a _s_h_e_l_l _s_c_r_i_p_t).  When bbaasshh is in-
       voked in this fashion, $$00 is set to the name of the file, and the posi-
       tional  parameters  are set to the remaining arguments.  BBaasshh reads and
       executes commands from this file, then exits.  BBaasshh's  exit  status  is
       the exit status of the last command executed in the script.  If no com-
       mands  are executed, the exit status is 0.  BBaasshh first attempts to open
       the file in the current directory, and, if no file is  found,  searches
       the directories in PPAATTHH for the script.

IINNVVOOCCAATTIIOONN
       A  _l_o_g_i_n _s_h_e_l_l is one whose first character of argument zero is a --, or
       one started with the ----llooggiinn option.

       An _i_n_t_e_r_a_c_t_i_v_e _s_h_e_l_l is one started without non-option  arguments  (un-
       less --ss is specified) and without the --cc option, and whose standard in-
       put  and  standard error are both connected to terminals (as determined
       by _i_s_a_t_t_y(3)), or one started with the --ii option.  BBaasshh sets PPSS11 and $$--
       includes ii if the shell is interactive, so a shell script or a  startup
       file can test this state.

       The  following paragraphs describe how bbaasshh executes its startup files.
       If any of the files exist but cannot be read, bbaasshh  reports  an  error.
       Tildes  are expanded in filenames as described below under TTiillddee EExxppaann--
       ssiioonn in the EEXXPPAANNSSIIOONN section.

       When bbaasshh is invoked as an interactive login shell, or as a  non-inter-
       active  shell with the ----llooggiinn option, it first reads and executes com-
       mands from the file _/_e_t_c_/_p_r_o_f_i_l_e, if that file exists.   After  reading
       that file, it looks for _~_/_._b_a_s_h___p_r_o_f_i_l_e, _~_/_._b_a_s_h___l_o_g_i_n, and _~_/_._p_r_o_f_i_l_e,
       in  that order, and reads and executes commands from the first one that
       exists and is readable.  The ----nnoopprrooffiillee option may be  used  when  the
       shell is started to inhibit this behavior.

       When an interactive login shell exits, or a non-interactive login shell
       executes  the  eexxiitt  builtin  command, bbaasshh reads and executes commands
       from the file _~_/_._b_a_s_h___l_o_g_o_u_t, if it exists.

       When an interactive shell that is not a login shell  is  started,  bbaasshh
       reads  and  executes commands from _~_/_._b_a_s_h_r_c, if that file exists.  The
       ----nnoorrcc option inhibits this behavior.  The ----rrccffiillee _f_i_l_e option  causes
       bbaasshh to use _f_i_l_e instead of _~_/_._b_a_s_h_r_c.

       When  bbaasshh is started non-interactively, to run a shell script, for ex-
       ample, it looks for the variable BBAASSHH__EENNVV in the  environment,  expands
       its  value if it appears there, and uses the expanded value as the name
       of a file to read and execute.  BBaasshh behaves as if the  following  com-
       mand were executed:

              if [ -n "$BASH_ENV" ]; then . "$BASH_ENV"; fi

       but does not use the value of the PPAATTHH variable to search for the file-
       name.

       If  bbaasshh is invoked with the name sshh, it tries to mimic the startup be-
       havior of historical versions of sshh as closely as possible, while  con-
       forming  to the POSIX standard as well.  When invoked as an interactive
       login shell, or a non-interactive shell with  the  ----llooggiinn  option,  it
       first  attempts  to  read  and  execute  commands from _/_e_t_c_/_p_r_o_f_i_l_e and
       _~_/_._p_r_o_f_i_l_e, in that order.  The ----nnoopprrooffiillee option inhibits this behav-
       ior.  When invoked as an interactive shell with the name sshh, bbaasshh looks
       for the variable EENNVV, expands its value if it is defined, and uses  the
       expanded  value  as  the  name  of a file to read and execute.  Since a
       shell invoked as sshh does not attempt to read and execute commands  from
       any  other startup files, the ----rrccffiillee option has no effect.  A non-in-
       teractive shell invoked with the name sshh does not attempt to  read  any
       other startup files.

       When  invoked  as  sshh, bbaasshh enters posix mode after reading the startup
       files.

       When bbaasshh is started in posix mode, as with the  ----ppoossiixx  command  line
       option, it follows the POSIX standard for startup files.  In this mode,
       interactive  shells  expand  the EENNVV variable and read and execute com-
       mands from the file whose name is the expanded value.  No other startup
       files are read.

       BBaasshh attempts to determine when it is being run with its standard input
       connected to a network connection, as when executed by  the  historical
       and  rarely-seen remote shell daemon, usually _r_s_h_d, or the secure shell
       daemon _s_s_h_d.  If bbaasshh determines it is being run  non-interactively  in
       this  fashion,  it  reads and executes commands from _~_/_._b_a_s_h_r_c, if that
       file exists and is readable.  BBaasshh does not read this file  if  invoked
       as  sshh.  The ----nnoorrcc option inhibits this behavior, and the ----rrccffiillee op-
       tion makes bbaasshh use a different file instead of _~_/_._b_a_s_h_r_c, but  neither
       _r_s_h_d  nor  _s_s_h_d  generally invoke the shell with those options or allow
       them to be specified.

       If the shell is started with the effective user (group) id not equal to
       the real user (group) id, and the --pp option is not supplied, no startup
       files are read, shell functions are not inherited from the environment,
       the SSHHEELLLLOOPPTTSS, BBAASSHHOOPPTTSS, CCDDPPAATTHH, and GGLLOOBBIIGGNNOORREE variables, if they  ap-
       pear  in the environment, are ignored, and the effective user id is set
       to the real user id.  If the --pp option is supplied at  invocation,  the
       startup behavior is the same, but the effective user id is not reset.

DDEEFFIINNIITTIIOONNSS
       The  following  definitions  are used throughout the rest of this docu-
       ment.
       bbllaannkk  A space or tab.
       wwhhiitteessppaaccee
              A character belonging to the ssppaaccee character class in  the  cur-
              rent locale, or for which _i_s_s_p_a_c_e(3) returns true.
       wwoorrdd   A  sequence  of  characters  considered  as a single unit by the
              shell.  Also known as a ttookkeenn.
       nnaammee   A _w_o_r_d consisting only of  alphanumeric  characters  and  under-
              scores,  and beginning with an alphabetic character or an under-
              score.  Also referred to as an iiddeennttiiffiieerr.
       mmeettaacchhaarraacctteerr
              A character that, when unquoted, separates words.   One  of  the
              following:
              ||  && ;; (( )) << >> ssppaaccee ttaabb nneewwlliinnee
       ccoonnttrrooll ooppeerraattoorr
              A _t_o_k_e_n that performs a control function.  It is one of the fol-
              lowing symbols:
              |||| && &&&& ;; ;;;; ;;&& ;;;;&& (( )) || ||&& <<nneewwlliinnee>>

RREESSEERRVVEEDD WWOORRDDSS
       _R_e_s_e_r_v_e_d _w_o_r_d_s are words that have a special meaning to the shell.  The
       following words are recognized as reserved when unquoted and either the
       first  word of a command (see SSHHEELLLL GGRRAAMMMMAARR below), the third word of a
       ccaassee or sseelleecctt command (only iinn is valid), or the third word of  a  ffoorr
       command (only iinn and ddoo are valid):

       !!  ccaassee   ccoopprroocc   ddoo  ddoonnee eelliiff eellssee eessaacc ffii ffoorr ffuunnccttiioonn iiff iinn sseelleecctt
       tthheenn uunnttiill wwhhiillee {{ }} ttiimmee [[[[ ]]]]

SSHHEELLLL GGRRAAMMMMAARR
       This section describes the syntax of the various forms  of  shell  com-
       mands.

   SSiimmppllee CCoommmmaannddss
       A  _s_i_m_p_l_e  _c_o_m_m_a_n_d  is a sequence of optional variable assignments fol-
       lowed by bbllaannkk-separated words and redirections, and  terminated  by  a
       _c_o_n_t_r_o_l _o_p_e_r_a_t_o_r.  The first word specifies the command to be executed,
       and  is passed as argument zero.  The remaining words are passed as ar-
       guments to the invoked command.

       The return value of a _s_i_m_p_l_e _c_o_m_m_a_n_d is its exit status,  or  128+_n  if
       the command is terminated by signal _n.

   PPiippeelliinneess
       A  _p_i_p_e_l_i_n_e  is  a sequence of one or more commands separated by one of
       the control operators || or ||&&.  The format for a pipeline is:

              [ttiimmee [--pp]] [ ! ] _c_o_m_m_a_n_d_1 [ [|||||&&] _c_o_m_m_a_n_d_2 ... ]

       The standard output of _c_o_m_m_a_n_d_1 is connected via a pipe to the standard
       input of _c_o_m_m_a_n_d_2.  This connection is performed  before  any  redirec-
       tions  specified  by the _c_o_m_m_a_n_d_1(see RREEDDIIRREECCTTIIOONN below).  If ||&& is the
       pipeline operator, _c_o_m_m_a_n_d_1's standard error, in addition to its  stan-
       dard  output,  is  connected  to  _c_o_m_m_a_n_d_2's standard input through the
       pipe; it is shorthand for 22>>&&11 ||.  This  implicit  redirection  of  the
       standard  error  to the standard output is performed after any redirec-
       tions specified by _c_o_m_m_a_n_d_1.

       The return status of a pipeline is the exit status of the last command,
       unless the ppiippeeffaaiill option is enabled.  If  ppiippeeffaaiill  is  enabled,  the
       pipeline's  return  status is the value of the last (rightmost) command
       to exit with a non-zero status, or zero if all commands  exit  success-
       fully.  If the reserved word !!  precedes a pipeline, the exit status of
       that  pipeline  is the logical negation of the exit status as described
       above.  If a pipeline is executed synchronously, the  shell  waits  for
       all commands in the pipeline to terminate before returning a value.

       If  the  ttiimmee  reserved word precedes a pipeline, the shell reports the
       elapsed as well as user and system time consumed by its execution  when
       the  pipeline  terminates.   The --pp option changes the output format to
       that specified by POSIX.  When the shell is in posix mode, it does  not
       recognize  ttiimmee as a reserved word if the next token begins with a "-".
       The value of the TTIIMMEEFFOORRMMAATT variable is a format string that  specifies
       how  the timing information should be displayed; see the description of
       TTIIMMEEFFOORRMMAATT below under SShheellll VVaarriiaabblleess.

       When the shell is in posix mode, ttiimmee may appear by itself as the  only
       word  in  a simple command.  In this case, the shell displays the total
       user and system time consumed by the shell and its children.  The TTIIMMEE--
       FFOORRMMAATT variable specifies the format of the time information.

       Each command in a multi-command pipeline, where pipes are  created,  is
       executed  in a _s_u_b_s_h_e_l_l, which is a separate process.  See CCOOMMMMAANNDD EEXXEE--
       CCUUTTIIOONN EENNVVIIRROONNMMEENNTT for a description of subshells and a subshell  envi-
       ronment.   If  the  llaassttppiippee  option is enabled using the sshhoopptt builtin
       (see the description of sshhoopptt below), and job control  is  not  active,
       the last element of a pipeline may be run by the shell process.

   LLiissttss
       A  _l_i_s_t  is a sequence of one or more pipelines separated by one of the
       operators ;;, &&, &&&&, or ||||, and optionally terminated by one of ;;, &&, or
       <<nneewwlliinnee>>.

       Of these list operators, &&&& and |||| have equal precedence, followed by ;;
       and &&, which have equal precedence.

       A sequence of one or more newlines may appear in a _l_i_s_t  instead  of  a
       semicolon to delimit commands.

       If  a  command  is terminated by the control operator &&, the shell exe-
       cutes the command in the _b_a_c_k_g_r_o_u_n_d in a subshell.  The shell does  not
       wait  for the command to finish, and the return status is 0.  These are
       referred to as _a_s_y_n_c_h_r_o_n_o_u_s commands.  Commands separated by  a  ;;  are
       executed sequentially; the shell waits for each command to terminate in
       turn.   The  return  status is the exit status of the last command exe-
       cuted.

       AND and OR lists are sequences of one or more  pipelines  separated  by
       the  &&&&  and  |||| control operators, respectively.  AND and OR lists are
       executed with left associativity.  An AND list has the form

              _c_o_m_m_a_n_d_1 &&&& _c_o_m_m_a_n_d_2

       _c_o_m_m_a_n_d_2 is executed if, and only if, _c_o_m_m_a_n_d_1 returns an  exit  status
       of zero (success).

       An OR list has the form

              _c_o_m_m_a_n_d_1 |||| _c_o_m_m_a_n_d_2

       _c_o_m_m_a_n_d_2  is executed if, and only if, _c_o_m_m_a_n_d_1 returns a non-zero exit
       status.  The return status of AND and OR lists is the  exit  status  of
       the last command executed in the list.

   CCoommppoouunndd CCoommmmaannddss
       A  _c_o_m_p_o_u_n_d _c_o_m_m_a_n_d is one of the following.  In most cases a _l_i_s_t in a
       command's description may be separated from the rest of the command  by
       one  or  more  newlines, and may be followed by a newline in place of a
       semicolon.

       (_l_i_s_t) _l_i_s_t is executed in a subshell (see CCOOMMMMAANNDD  EEXXEECCUUTTIIOONN  EENNVVIIRROONN--
              MMEENNTT  below for a description of a subshell environment).  Vari-
              able assignments and builtin commands that  affect  the  shell's
              environment do not remain in effect after the command completes.
              The return status is the exit status of _l_i_s_t.

       { _l_i_s_t; }
              _l_i_s_t is executed in the current shell environment.  _l_i_s_t must be
              terminated  with  a  newline  or  semicolon.  This is known as a
              _g_r_o_u_p _c_o_m_m_a_n_d.  The return status is the exit status of _l_i_s_t.

              Note that unlike the metacharacters (( and )), {{  and  }}  are  _r_e_-
              _s_e_r_v_e_d  _w_o_r_d_s  and must occur where a reserved word is permitted
              to be recognized.  Since they do not cause a  word  break,  they
              must  be  separated  from  _l_i_s_t  by  whitespace or another shell
              metacharacter.

       ((_e_x_p_r_e_s_s_i_o_n))
              The arithmetic _e_x_p_r_e_s_s_i_o_n is evaluated according  to  the  rules
              described  below  under  AARRIITTHHMMEETTIICC EEVVAALLUUAATTIIOONN.  If the value of
              the expression is non-zero, the return status  is  0;  otherwise
              the  return  status is 1.  The _e_x_p_r_e_s_s_i_o_n undergoes the same ex-
              pansions as if it were within double quotes, but unescaped  dou-
              ble quote characters in _e_x_p_r_e_s_s_i_o_n are not treated specially and
              are  removed.   Since  this  can  potentially  result  in  empty
              strings, this command treats those as expressions that  evaluate
              to 0.

       [[[[ _e_x_p_r_e_s_s_i_o_n ]]]]
              Evaluate the conditional expression _e_x_p_r_e_s_s_i_o_n and return a sta-
              tus  of  zero  (true) or non-zero (false).  Expressions are com-
              posed of the primaries described below under CCOONNDDIITTIIOONNAALL EEXXPPRREESS--
              SSIIOONNSS.  The words between the [[[[ and  ]]]]  do  not  undergo  word
              splitting  and pathname expansion.  The shell performs tilde ex-
              pansion, parameter and variable expansion, arithmetic expansion,
              command substitution, process substitution, and quote removal on
              those words.  Conditional operators such as --ff must be  unquoted
              to be recognized as primaries.

              When  used with [[[[, the << and >> operators sort lexicographically
              using the current locale.

              When the ==== and !!== operators are used, the string to  the  right
              of the operator is considered a pattern and matched according to
              the rules described below under PPaatttteerrnn MMaattcchhiinngg, as if the eexxtt--
              gglloobb shell option were enabled.  The == operator is equivalent to
              ====.   If  the  nnooccaasseemmaattcchh shell option is enabled, the match is
              performed without regard to the case of  alphabetic  characters.
              The  return  value  is  0 if the string matches (====) or does not
              match (!!==) the pattern, and 1 otherwise.  If  any  part  of  the
              pattern  is  quoted,  the quoted portion is matched as a string:
              every character in the quoted portion matches itself, instead of
              having any special pattern matching meaning.

              An additional binary operator, ==~~, is available, with  the  same
              precedence  as  ====  and  !!==.  When it is used, the string to the
              right of the operator is considered a POSIX extended regular ex-
              pression and matched accordingly (using the  POSIX  _r_e_g_c_o_m_p  and
              _r_e_g_e_x_e_c  interfaces  usually described in _r_e_g_e_x(3)).  The return
              value is 0 if the string matches the pattern, and  1  otherwise.
              If the regular expression is syntactically incorrect, the condi-
              tional expression's return value is 2.  If the nnooccaasseemmaattcchh shell
              option  is enabled, the match is performed without regard to the
              case of alphabetic characters.

              If any part of the pattern is  quoted,  the  quoted  portion  is
              matched  literally,  as  above.   If  the pattern is stored in a
              shell variable, quoting the variable expansion forces the entire
              pattern to be matched literally.  Treat bracket  expressions  in
              regular  expressions carefully, since normal quoting and pattern
              characters lose their meanings between brackets.

              The match succeeds if  the  pattern  matches  any  part  of  the
              string.  Anchor the pattern using the ^^ and $$ regular expression
              operators to force it to match the entire string.

              The  array  variable  BBAASSHH__RREEMMAATTCCHH  records  which  parts of the
              string matched the pattern.  The element  of  BBAASSHH__RREEMMAATTCCHH  with
              index  0  contains the portion of the string matching the entire
              regular expression.  Substrings matched by parenthesized  subex-
              pressions within the regular expression are saved in the remain-
              ing  BBAASSHH__RREEMMAATTCCHH indices.  The element of BBAASSHH__RREEMMAATTCCHH with in-
              dex _n is the portion of the string matching  the  _nth  parenthe-
              sized  subexpression.   BBaasshh  sets  BBAASSHH__RREEMMAATTCCHH  in  the global
              scope; declaring it as a local variable will lead to  unexpected
              results.

              Expressions  may  be  combined  using  the  following operators,
              listed in decreasing order of precedence:

              (( _e_x_p_r_e_s_s_i_o_n ))
                     Returns the value of _e_x_p_r_e_s_s_i_o_n.  This  may  be  used  to
                     override the normal precedence of operators.
              !! _e_x_p_r_e_s_s_i_o_n
                     True if _e_x_p_r_e_s_s_i_o_n is false.
              _e_x_p_r_e_s_s_i_o_n_1 &&&& _e_x_p_r_e_s_s_i_o_n_2
                     True if both _e_x_p_r_e_s_s_i_o_n_1 and _e_x_p_r_e_s_s_i_o_n_2 are true.
              _e_x_p_r_e_s_s_i_o_n_1 |||| _e_x_p_r_e_s_s_i_o_n_2
                     True if either _e_x_p_r_e_s_s_i_o_n_1 or _e_x_p_r_e_s_s_i_o_n_2 is true.

              The &&&& and |||| operators do not evaluate _e_x_p_r_e_s_s_i_o_n_2 if the value
              of  _e_x_p_r_e_s_s_i_o_n_1  is  sufficient to determine the return value of
              the entire conditional expression.

       ffoorr _n_a_m_e [ [ iinn _w_o_r_d _._._. ] ; ] ddoo _l_i_s_t ; ddoonnee
              First, expand The list of words following iinn, generating a  list
              of  items.   Then,  the  variable _n_a_m_e is set to each element of
              this list in turn, and _l_i_s_t is executed each time.   If  the  iinn
              _w_o_r_d is omitted, the ffoorr command executes _l_i_s_t once for each po-
              sitional  parameter that is set (see PPAARRAAMMEETTEERRSS below).  The re-
              turn status is the exit status of the  last  command  that  exe-
              cutes.  If the expansion of the items following iinn results in an
              empty  list,  no commands are executed, and the return status is
              0.

       ffoorr (( _e_x_p_r_1 ; _e_x_p_r_2 ; _e_x_p_r_3 )) [;] ddoo _l_i_s_t ; ddoonnee
              First, evaluate the arithmetic expression _e_x_p_r_1 according to the
              rules described below under AARRIITTHHMMEETTIICC  EEVVAALLUUAATTIIOONN.   Then,  re-
              peatedly evaluate the arithmetic expression _e_x_p_r_2 until it eval-
              uates  to  zero.  Each time _e_x_p_r_2 evaluates to a non-zero value,
              execute _l_i_s_t and evaluate the arithmetic expression  _e_x_p_r_3.   If
              any  expression  is omitted, it behaves as if it evaluates to 1.
              The return value is the exit status of the last command in  _l_i_s_t
              that  is  executed, or non-zero if any of the expressions is in-
              valid.

              Use the bbrreeaakk and ccoonnttiinnuuee builtins (see SSHHEELLLL BBUUIILLTTIINN  CCOOMMMMAANNDDSS
              below) to control loop execution.

       sseelleecctt _n_a_m_e [ iinn _w_o_r_d ] ; ddoo _l_i_s_t ; ddoonnee
              First,  expand the list of words following iinn, generating a list
              of items, and print the set of expanded words the  standard  er-
              ror,  each  preceded  by  a  number.  If the iinn _w_o_r_d is omitted,
              print the positional parameters (see PPAARRAAMMEETTEERRSS below).   sseelleecctt
              then  displays the PPSS33 prompt and reads a line from the standard
              input.  If the line consists of a number corresponding to one of
              the displayed words, then sseelleecctt sets the value of _n_a_m_e to  that
              word.   If  the  line  is  empty,  sseelleecctt displays the words and
              prompt again.  If EOF is read, sseelleecctt completes and  returns  1.
              Any  other  value  sets _n_a_m_e to null.  The line read is saved in
              the variable RREEPPLLYY.  The _l_i_s_t is executed after  each  selection
              until a bbrreeaakk command is executed.  The exit status of sseelleecctt is
              the exit status of the last command executed in _l_i_s_t, or zero if
              no commands were executed.

       ccaassee _w_o_r_d iinn [ [(] _p_a_t_t_e_r_n [ || _p_a_t_t_e_r_n ] ... ) _l_i_s_t ;; ] ... eessaacc
              A ccaassee command first expands _w_o_r_d, and tries to match it against
              each  _p_a_t_t_e_r_n  in turn, proceeding from first to last, using the
              matching rules described under PPaatttteerrnn MMaattcchhiinngg below.   A  pat-
              tern  list  is  a set of one or more patterns separated by , and
              the ) operator terminates the pattern list.   The  _w_o_r_d  is  ex-
              panded  using tilde expansion, parameter and variable expansion,
              arithmetic expansion, command substitution, process substitution
              and quote removal.  Each  _p_a_t_t_e_r_n  examined  is  expanded  using
              tilde  expansion,  parameter  and variable expansion, arithmetic
              expansion, command substitution, process substitution, and quote
              removal.  If the nnooccaasseemmaattcchh shell option is enabled, the  match
              is  performed  without  regard to the case of alphabetic charac-
              ters.  A _c_l_a_u_s_e is a pattern list and an associated _l_i_s_t.

              When a match is found, ccaassee executes the corresponding _l_i_s_t.  If
              the ;;;; operator terminates the case  clause,  the  ccaassee  command
              completes after the first match.  Using ;;&& in place of ;;;; causes
              execution  to  continue  with  the _l_i_s_t associated with the next
              pattern list.  Using ;;;;&& in place of ;;;; causes the shell to test
              the next pattern list in the statement, if any, and execute  any
              associated  _l_i_s_t  if  the  match  succeeds,  continuing the case
              statement execution as if the pattern list had not matched.  The
              exit status is zero if no pattern matches.

              Otherwise, it is the exit status of the last command executed in
              the last _l_i_s_t executed.

       iiff _l_i_s_t; tthheenn _l_i_s_t; [ eelliiff _l_i_s_t; tthheenn _l_i_s_t; ] ... [ eellssee _l_i_s_t; ] ffii
              The iiff _l_i_s_t is executed.  If its exit status is zero,  the  tthheenn
              _l_i_s_t  is  executed.   Otherwise,  each  eelliiff _l_i_s_t is executed in
              turn, and if its exit status is  zero,  the  corresponding  tthheenn
              _l_i_s_t is executed and the command completes.  Otherwise, the eellssee
              _l_i_s_t  is executed, if present.  The exit status is the exit sta-
              tus of the last command executed, or zero if no condition tested
              true.

       wwhhiillee _l_i_s_t_-_1; ddoo _l_i_s_t_-_2; ddoonnee
       uunnttiill _l_i_s_t_-_1; ddoo _l_i_s_t_-_2; ddoonnee
              The wwhhiillee command continuously executes the list _l_i_s_t_-_2 as  long
              as the last command in the list _l_i_s_t_-_1 returns an exit status of
              zero.   The uunnttiill command is identical to the wwhhiillee command, ex-
              cept that the test is negated: _l_i_s_t_-_2 is executed as long as the
              last command in _l_i_s_t_-_1 returns a non-zero exit status.  The exit
              status of the wwhhiillee and uunnttiill commands is the exit status of the
              last command executed in _l_i_s_t_-_2, or zero if none was executed.

   CCoopprroocceesssseess
       A _c_o_p_r_o_c_e_s_s is a shell command preceded by the ccoopprroocc reserved word.  A
       coprocess is executed asynchronously in a subshell, as if  the  command
       had  been  terminated  with the && control operator, with a two-way pipe
       established between the executing shell and the coprocess.

       The syntax for a coprocess is:

              ccoopprroocc [_N_A_M_E] _c_o_m_m_a_n_d [_r_e_d_i_r_e_c_t_i_o_n_s]

       This creates a coprocess named _N_A_M_E.  _c_o_m_m_a_n_d may be  either  a  simple
       command  or  a  compound command (see above).  _N_A_M_E is a shell variable
       name.  If _N_A_M_E is not supplied, the default name is CCOOPPRROOCC.

       The recommended form to use for a coprocess is

              ccoopprroocc _N_A_M_E { _c_o_m_m_a_n_d [_r_e_d_i_r_e_c_t_i_o_n_s]; }

       This form is preferred because simple commands result in the  coprocess
       always  being  named CCOOPPRROOCC, and it is simpler to use and more complete
       than the other compound commands.

       If _c_o_m_m_a_n_d is a compound command, _N_A_M_E is optional. The word  following
       ccoopprroocc  determines whether that word is interpreted as a variable name:
       it is interpreted as _N_A_M_E if it is not a reserved word that  introduces
       a  compound  command.   If _c_o_m_m_a_n_d is a simple command, _N_A_M_E is not al-
       lowed; this is to avoid confusion between _N_A_M_E and the  first  word  of
       the simple command.

       When  the  coprocess  is  executed, the shell creates an array variable
       (see AArrrraayyss below) named _N_A_M_E in the context of  the  executing  shell.
       The  standard  output  of _c_o_m_m_a_n_d is connected via a pipe to a file de-
       scriptor in the executing shell, and that file descriptor  is  assigned
       to _N_A_M_E[0].  The standard input of _c_o_m_m_a_n_d is connected via a pipe to a
       file descriptor in the executing shell, and that file descriptor is as-
       signed  to  _N_A_M_E[1].   This pipe is established before any redirections
       specified by the command (see RREEDDIIRREECCTTIIOONN below).  The file descriptors
       can be utilized as arguments to shell commands and  redirections  using
       standard  word expansions.  Other than those created to execute command
       and process substitutions, the file descriptors are  not  available  in
       subshells.

       The  process ID of the shell spawned to execute the coprocess is avail-
       able as the value of the variable _N_A_M_E_PID.  The wwaaiitt  builtin  may  be
       used to wait for the coprocess to terminate.

       Since  the  coprocess is created as an asynchronous command, the ccoopprroocc
       command always returns success.  The return status of  a  coprocess  is
       the exit status of _c_o_m_m_a_n_d.

   SShheellll FFuunnccttiioonn DDeeffiinniittiioonnss
       A  shell function is an object that is called like a simple command and
       executes a compound command with a new set  of  positional  parameters.
       Shell functions are declared as follows:

       _f_n_a_m_e () _c_o_m_p_o_u_n_d_-_c_o_m_m_a_n_d [_r_e_d_i_r_e_c_t_i_o_n]
       ffuunnccttiioonn _f_n_a_m_e [()] _c_o_m_p_o_u_n_d_-_c_o_m_m_a_n_d [_r_e_d_i_r_e_c_t_i_o_n]
              This defines a function named _f_n_a_m_e.  The reserved word ffuunnccttiioonn
              is  optional.   If  the  ffuunnccttiioonn reserved word is supplied, the
              parentheses are optional.  The _b_o_d_y of the function is the  com-
              pound  command  _c_o_m_p_o_u_n_d_-_c_o_m_m_a_n_d  (see CCoommppoouunndd CCoommmmaannddss above).
              That command is usually a _l_i_s_t of commands between { and },  but
              may be any command listed under CCoommppoouunndd CCoommmmaannddss above.  If the
              ffuunnccttiioonn reserved word is used, but the parentheses are not sup-
              plied, the braces are recommended.  _c_o_m_p_o_u_n_d_-_c_o_m_m_a_n_d is executed
              whenever  _f_n_a_m_e  is  specified  as the name of a simple command.
              When in posix mode, _f_n_a_m_e must be a valid shell _n_a_m_e and may not
              be the name of one of the POSIX _s_p_e_c_i_a_l  _b_u_i_l_t_i_n_s.   In  default
              mode,  a  function name can be any unquoted shell word that does
              not contain $$.

       Any redirections (see RREEDDIIRREECCTTIIOONN below) specified when a  function  is
       defined are performed when the function is executed.

       The  exit status of a function definition is zero unless a syntax error
       occurs or a readonly function with the same name already exists.   When
       executed,  the exit status of a function is the exit status of the last
       command executed in the body.  (See FFUUNNCCTTIIOONNSS below.)

CCOOMMMMEENNTTSS
       In a non-interactive shell, or an interactive shell in which the iinntteerr--
       aaccttiivvee__ccoommmmeennttss option to the  sshhoopptt  builtin  is  enabled  (see  SSHHEELLLL
       BBUUIILLTTIINN  CCOOMMMMAANNDDSS below), a word beginning with ## introduces a comment.
       A word begins at the beginning of a line, after unquoted whitespace, or
       after an operator.  The comment causes  that  word  and  all  remaining
       characters  on  that  line to be ignored.  An interactive shell without
       the iinntteerraaccttiivvee__ccoommmmeennttss option enabled does not allow  comments.   The
       iinntteerraaccttiivvee__ccoommmmeennttss  option  is  enabled  by  default  in  interactive
       shells.

QQUUOOTTIINNGG
       _Q_u_o_t_i_n_g is used to remove the special meaning of certain characters  or
       words  to  the shell.  Quoting can be used to disable special treatment
       for special characters, to prevent reserved words from being recognized
       as such, and to prevent parameter expansion.

       Each of the _m_e_t_a_c_h_a_r_a_c_t_e_r_s listed above under DDEEFFIINNIITTIIOONNSS  has  special
       meaning to the shell and must be quoted if it is to represent itself.

       When  the command history expansion facilities are being used (see HHIISS--
       TTOORRYY EEXXPPAANNSSIIOONN below), the _h_i_s_t_o_r_y _e_x_p_a_n_s_i_o_n character, usually !!, must
       be quoted to prevent history expansion.

       There are four quoting mechanisms: the _e_s_c_a_p_e _c_h_a_r_a_c_t_e_r, single quotes,
       double quotes, and dollar-single quotes.

       A non-quoted backslash (\\) is the _e_s_c_a_p_e _c_h_a_r_a_c_t_e_r.  It  preserves  the
       literal  value of the next character that follows, removing any special
       meaning it has, with the exception of <newline>.  If a \\<newline>  pair
       appears,  and  the  backslash  is  not itself quoted, the \\<newline> is
       treated as a line continuation (that is, it is removed from  the  input
       stream and effectively ignored).

       Enclosing  characters  in  single quotes preserves the literal value of
       each character within the quotes.  A single quote may not occur between
       single quotes, even when preceded by a backslash.

       Enclosing characters in double quotes preserves the  literal  value  of
       all  characters  within the quotes, with the exception of $$, ``, \\, and,
       when history expansion is enabled, !!.  When the shell is in posix mode,
       the !! has no special meaning within double quotes,  even  when  history
       expansion  is  enabled.   The  characters  $$ and `` retain their special
       meaning within double quotes.  The backslash retains its special  mean-
       ing  only when followed by one of the following characters: $$, ``, "", \\,
       or <<nneewwlliinnee>>.  Backslashes preceding characters without a special mean-
       ing are left unmodified.

       A double quote may be quoted within double quotes by preceding it  with
       a backslash.  If enabled, history expansion will be performed unless an
       !!   appearing in double quotes is escaped using a backslash.  The back-
       slash preceding the !!  is not removed.

       The special parameters ** and @@ have  special  meaning  when  in  double
       quotes (see PPAARRAAMMEETTEERRSS below).

       Character  sequences  of  the  form  $$'_s_t_r_i_n_g' are treated as a special
       variant of single quotes.  The sequence expands to _s_t_r_i_n_g,  with  back-
       slash-escaped  characters in _s_t_r_i_n_g replaced as specified by the ANSI C
       standard.  Backslash escape sequences, if present, are decoded as  fol-
       lows:
              \\aa     alert (bell)
              \\bb     backspace
              \\ee
              \\EE     an escape character
              \\ff     form feed
              \\nn     new line
              \\rr     carriage return
              \\tt     horizontal tab
              \\vv     vertical tab
              \\\\     backslash
              \\''     single quote
              \\""     double quote
              \\??     question mark
              \\_n_n_n   The  eight-bit  character  whose value is the octal value
                     _n_n_n (one to three octal digits).
              \\xx_H_H   The eight-bit character whose value  is  the  hexadecimal
                     value _H_H (one or two hex digits).
              \\uu_H_H_H_H The  Unicode (ISO/IEC 10646) character whose value is the
                     hexadecimal value _H_H_H_H (one to four hex digits).
              \\UU_H_H_H_H_H_H_H_H
                     The Unicode (ISO/IEC 10646) character whose value is  the
                     hexadecimal value _H_H_H_H_H_H_H_H (one to eight hex digits).
              \\cc_x    A control-_x character.

       The  expanded  result  is  single-quoted, as if the dollar sign had not
       been present.

   TTrraannssllaattiinngg SSttrriinnggss
       A double-quoted string preceded by a dollar sign ($$"_s_t_r_i_n_g") causes the
       string to be translated according to the current locale.   The  _g_e_t_t_e_x_t
       infrastructure  performs  the lookup and translation, using the LLCC__MMEESS--
       SSAAGGEESS, TTEEXXTTDDOOMMAAIINNDDIIRR, and TTEEXXTTDDOOMMAAIINN shell variables.  If  the  current
       locale is CC or PPOOSSIIXX, if there are no translations available, or if the
       string is not translated, the dollar sign is ignored, and the string is
       treated  as double-quoted as described above.  This is a form of double
       quoting, so the string remains double-quoted by default, whether or not
       it is translated and replaced.  If the nnooeexxppaanndd__ttrraannssllaattiioonn  option  is
       enabled  using  the sshhoopptt builtin, translated strings are single-quoted
       instead of double-quoted.  See the description  of  sshhoopptt  below  under
       SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS.

PPAARRAAMMEETTEERRSS
       A  _p_a_r_a_m_e_t_e_r is an entity that stores values.  It can be a _n_a_m_e, a num-
       ber, or one of the special characters listed below under SSppeecciiaall  PPaarraa--
       mmeetteerrss.  A _v_a_r_i_a_b_l_e is a parameter denoted by a _n_a_m_e.  A variable has a
       _v_a_l_u_e  and  zero or more _a_t_t_r_i_b_u_t_e_s.  Attributes are assigned using the
       ddeeccllaarree builtin command (see ddeeccllaarree below in SSHHEELLLL BBUUIILLTTIINN  CCOOMMMMAANNDDSS).
       The eexxppoorrtt and rreeaaddoonnllyy builtins assign specific attributes.

       A parameter is set if it has been assigned a value.  The null string is
       a  valid  value.  Once a variable is set, it may be unset only by using
       the uunnsseett builtin command (see SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS below).

       A _v_a_r_i_a_b_l_e is assigned to using a statement of the form

              _n_a_m_e=[_v_a_l_u_e]

       If _v_a_l_u_e is not given, the variable is assigned the null  string.   All
       _v_a_l_u_e_s  undergo tilde expansion, parameter and variable expansion, com-
       mand substitution, arithmetic expansion, and quote removal (see  EEXXPPAANN--
       SSIIOONN below).  If the variable has its iinntteeggeerr attribute set, then _v_a_l_u_e
       is evaluated as an arithmetic expression even if the $$((((...)))) expansion
       is not used (see AArriitthhmmeettiicc EExxppaannssiioonn below).  Word splitting and path-
       name  expansion  are not performed.  Assignment statements may also ap-
       pear as arguments to the aalliiaass, ddeeccllaarree, ttyyppeesseett, eexxppoorrtt, rreeaaddoonnllyy, and
       llooccaall builtin commands (_d_e_c_l_a_r_a_t_i_o_n commands).   When  in  posix  mode,
       these  builtins  may appear in a command after one or more instances of
       the ccoommmmaanndd builtin and retain these assignment statement properties.

       In the context where an assignment statement is assigning a value to  a
       shell  variable or array index, the "+=" operator appends to or adds to
       the variable's previous value.  This includes arguments to  _d_e_c_l_a_r_a_t_i_o_n
       commands  such as ddeeccllaarree that accept assignment statements.  When "+="
       is applied to a variable for which the iinntteeggeerr attribute has been  set,
       the variable's current value and _v_a_l_u_e are each evaluated as arithmetic
       expressions,  and  the sum of the results is assigned as the variable's
       value.  The current value is usually an integer constant, but may be an
       expression.  When "+=" is applied to an array variable  using  compound
       assignment (see AArrrraayyss below), the variable's value is not unset (as it
       is  when using "="), and new values are appended to the array beginning
       at one greater than the array's maximum index (for indexed  arrays)  or
       added  as additional key-value pairs in an associative array.  When ap-
       plied to a string-valued variable, _v_a_l_u_e is expanded  and  appended  to
       the variable's value.

       A variable can be assigned the _n_a_m_e_r_e_f attribute using the --nn option to
       the  ddeeccllaarree or llooccaall builtin commands (see the descriptions of ddeeccllaarree
       and llooccaall below) to create a _n_a_m_e_r_e_f, or a reference to  another  vari-
       able.   This  allows  variables to be manipulated indirectly.  Whenever
       the nameref variable is referenced, assigned to, unset, or has its  at-
       tributes  modified  (other than using or changing the _n_a_m_e_r_e_f attribute
       itself), the operation is actually performed on the variable  specified
       by  the  nameref  variable's  value.  A nameref is commonly used within
       shell functions to refer to a variable whose name is passed as an argu-
       ment to the function.  For instance, if a variable name is passed to  a
       shell function as its first argument, running

              declare -n ref=$1

       inside the function creates a local nameref variable rreeff whose value is
       the variable name passed as the first argument.  References and assign-
       ments to rreeff, and changes to its attributes, are treated as references,
       assignments, and attribute modifications to the variable whose name was
       passed  as  $$11.   If the control variable in a ffoorr loop has the nameref
       attribute, the list of words can be a list of shell  variables,  and  a
       name  reference is established for each word in the list, in turn, when
       the loop is executed.  Array variables cannot be given the nnaammeerreeff  at-
       tribute.   However, nameref variables can reference array variables and
       subscripted array variables.  Namerefs can be unset using the --nn option
       to the uunnsseett builtin.  Otherwise, if uunnsseett is executed with the name of
       a nameref variable as an  argument,  the  variable  referenced  by  the
       nameref variable is unset.

       When  the  shell  starts,  it reads its environment and creates a shell
       variable from each environment variable that has a valid name,  as  de-
       scribed below (see EENNVVIIRROONNMMEENNTT).

   PPoossiittiioonnaall PPaarraammeetteerrss
       A  _p_o_s_i_t_i_o_n_a_l  _p_a_r_a_m_e_t_e_r  is a parameter denoted by one or more digits,
       other than the single digit 0.  Positional parameters are assigned from
       the shell's arguments when it is invoked, and may be  reassigned  using
       the  sseett builtin command.  Positional parameters may not be assigned to
       with assignment statements.  The positional parameters are  temporarily
       replaced when a shell function is executed (see FFUUNNCCTTIIOONNSS below).

       When  a  positional parameter consisting of more than a single digit is
       expanded, it must be enclosed in braces (see EEXXPPAANNSSIIOONN below).  Without
       braces, a digit following $ can only refer to one of the first nine po-
       sitional parameters ($$11--$$99) or the special parameter $$00 (see  the  next
       section).

   SSppeecciiaall PPaarraammeetteerrss
       The  shell  treats  several parameters specially.  These parameters may
       only be referenced; assignment to them is not allowed.  Special parame-
       ters are denoted by one of the following characters.

       **      ($$**) Expands to the positional parameters,  starting  from  one.
              When  the expansion is not within double quotes, each positional
              parameter expands to a separate word.  In  contexts  where  word
              expansions  are  performed,  those  words are subject to further
              word splitting and pathname expansion.  When the  expansion  oc-
              curs  within double quotes, it expands to a single word with the
              value of each parameter separated by the first character of  the
              IIFFSS variable.  That is, ""$$**"" is equivalent to ""$$11_c$$22_c......"", where
              _c  is  the first character of the value of the IIFFSS variable.  If
              IIFFSS is unset, the parameters are separated by spaces.  If IIFFSS is
              null, the parameters are joined without intervening separators.
       @@      ($$@@) Expands to the positional parameters,  starting  from  one.
              In contexts where word splitting is performed, this expands each
              positional  parameter  to  a separate word; if not within double
              quotes, these words are subject to word splitting.  In  contexts
              where word splitting is not performed, such as the value portion
              of  an  assignment statement, this expands to a single word with
              each positional parameter separated by a space.  When the expan-
              sion occurs within double quotes, and  word  splitting  is  per-
              formed,  each  parameter  expands  to a separate word.  That is,
              ""$$@@"" is equivalent to ""$$11"" ""$$22"" ......  If the double-quoted expan-
              sion occurs within a word, the expansion of the first  parameter
              is joined with the expansion of the beginning part of the origi-
              nal word, and the expansion of the last parameter is joined with
              the expansion of the last part of the original word.  When there
              are  no  positional  parameters,  ""$$@@""  and $$@@ expand to nothing
              (i.e., they are removed).
       ##      ($$##) Expands to the number of positional parameters in decimal.
       ??      ($$??) Expands to the exit status of the  most  recently  executed
              command.
       --      ($$--) Expands to the current option flags as specified upon invo-
              cation,  by  the  sseett builtin command, or those set by the shell
              itself (such as the --ii option).
       $$      ($$$$) Expands to the process ID of the shell.  In a subshell,  it
              expands to the process ID of the parent shell, not the subshell.
       !!      ($$!!)Expands  to  the  process ID of the job most recently placed
              into the background, whether executed as an asynchronous command
              or using the bbgg builtin (see JJOOBB CCOONNTTRROOLL below).
       00      ($$00) Expands to the name of the shell or shell script.  This  is
              set  at shell initialization.  If bbaasshh is invoked with a file of
              commands, $$00 is set to the  name  of  that  file.   If  bbaasshh  is
              started with the --cc option, then $$00 is set to the first argument
              after  the string to be executed, if one is present.  Otherwise,
              it is set to the filename used to invoke bbaasshh, as given by argu-
              ment zero.

   SShheellll VVaarriiaabblleess
       The shell sets following variables:

       __      ($$__, an underscore) This has a number of meanings  depending  on
              context.  At shell startup, __ is set to the pathname used to in-
              voke  the  shell or shell script being executed as passed in the
              environment or argument list.  Subsequently, it expands  to  the
              last  argument  to  the  previous simple command executed in the
              foreground, after expansion.  It is also set to the  full  path-
              name  used to invoke each command executed and placed in the en-
              vironment exported to that command.  When checking mail, $$__  ex-
              pands to the name of the mail file currently being checked.
       BBAASSHH   Expands  to  the  full  filename used to invoke this instance of
              bbaasshh.
       BBAASSHHOOPPTTSS
              A colon-separated list of enabled shell options.  Each  word  in
              the  list  is  a  valid  argument for the --ss option to the sshhoopptt
              builtin command (see SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS below).  The options
              appearing in BBAASSHHOOPPTTSS are those reported as  _o_n  by  sshhoopptt.   If
              this  variable  is  in  the environment when bbaasshh starts up, the
              shell enables each option in the list before reading any startup
              files.  If this variable is exported, child shells  will  enable
              each option in the list.  This variable is read-only.
       BBAASSHHPPIIDD
              Expands  to  the  process  ID of the current bbaasshh process.  This
              differs from $$$$ under certain circumstances, such  as  subshells
              that  do  not require bbaasshh to be re-initialized.  Assignments to
              BBAASSHHPPIIDD have no effect.  If BBAASSHHPPIIDD is unset, it loses its  spe-
              cial properties, even if it is subsequently reset.
       BBAASSHH__AALLIIAASSEESS
              An  associative  array  variable whose members correspond to the
              internal list of aliases as maintained  by  the  aalliiaass  builtin.
              Elements  added to this array appear in the alias list; however,
              unsetting array elements currently does not remove aliases  from
              the  alias list.  If BBAASSHH__AALLIIAASSEESS is unset, it loses its special
              properties, even if it is subsequently reset.
       BBAASSHH__AARRGGCC
              An array variable whose values are the number of  parameters  in
              each frame of the current bbaasshh execution call stack.  The number
              of  parameters  to  the  current  subroutine  (shell function or
              script executed with .. or ssoouurrccee) is at the top  of  the  stack.
              When  a  subroutine is executed, the number of parameters passed
              is pushed onto BBAASSHH__AARRGGCC.  The shell sets BBAASSHH__AARRGGCC only when in
              extended debugging mode (see the description of the eexxttddeebbuugg op-
              tion to the sshhoopptt builtin below).  Setting  eexxttddeebbuugg  after  the
              shell has started to execute a script, or referencing this vari-
              able  when  eexxttddeebbuugg is not set, may result in inconsistent val-
              ues.  Assignments to BBAASSHH__AARRGGCC have no effect, and it may not be
              unset.
       BBAASSHH__AARRGGVV
              An array variable containing all of the parameters in  the  cur-
              rent bbaasshh execution call stack.  The final parameter of the last
              subroutine  call is at the top of the stack; the first parameter
              of the initial call is at the bottom.  When a subroutine is exe-
              cuted, the shell pushes the supplied parameters onto  BBAASSHH__AARRGGVV.
              The  shell  sets  BBAASSHH__AARRGGVV only when in extended debugging mode
              (see the description of the eexxttddeebbuugg option to the sshhoopptt builtin
              below).  Setting eexxttddeebbuugg after the shell has started to execute
              a script, or referencing this variable when eexxttddeebbuugg is not set,
              may result in inconsistent  values.   Assignments  to  BBAASSHH__AARRGGVV
              have no effect, and it may not be unset.
       BBAASSHH__AARRGGVV00
              When  referenced, this variable expands to the name of the shell
              or shell script (identical to $$00; see the description of special
              parameter 0 above).  Assigning a value to BBAASSHH__AARRGGVV00 sets $$00  to
              the  same  value.   If BBAASSHH__AARRGGVV00 is unset, it loses its special
              properties, even if it is subsequently reset.
       BBAASSHH__CCMMDDSS
              An associative array variable whose members  correspond  to  the
              internal  hash  table  of  commands  as  maintained  by the hhaasshh
              builtin.  Adding elements to this array makes them appear in the
              hash table; however, unsetting array elements currently does not
              remove command names from the hash table.  If BBAASSHH__CCMMDDSS  is  un-
              set, it loses its special properties, even if it is subsequently
              reset.
       BBAASSHH__CCOOMMMMAANNDD
              Expands  to  the command currently being executed or about to be
              executed, unless the shell is executing a command as the  result
              of a trap, in which case it is the command executing at the time
              of  the  trap.   If  BBAASSHH__CCOOMMMMAANNDD is unset, it loses its special
              properties, even if it is subsequently reset.
       BBAASSHH__EEXXEECCUUTTIIOONN__SSTTRRIINNGG
              The command argument to the --cc invocation option.
       BBAASSHH__LLIINNEENNOO
              An array variable whose members are the line numbers  in  source
              files  where  each corresponding member of FFUUNNCCNNAAMMEE was invoked.
              $${{BBAASSHH__LLIINNEENNOO[[_$_i]]}}  is  the  line  number  in  the  source  file
              ($${{BBAASSHH__SSOOUURRCCEE[[_$_i_+_1]]}})  where  $${{FFUUNNCCNNAAMMEE[[_$_i]]}}  was  called  (or
              $${{BBAASSHH__LLIINNEENNOO[[_$_i_-_1]]}} if referenced within  another  shell  func-
              tion).   Use  LLIINNEENNOO to obtain the current line number.  Assign-
              ments to BBAASSHH__LLIINNEENNOO have no effect, and it may not be unset.
       BBAASSHH__LLOOAADDAABBLLEESS__PPAATTHH
              A colon-separated list of directories in which the  eennaabbllee  com-
              mand looks for dynamically loadable builtins.
       BBAASSHH__MMOONNOOSSEECCOONNDDSS
              Each  time  this variable is referenced, it expands to the value
              returned by the system's monotonic clock, if one  is  available.
              If  there is no monotonic clock, this is equivalent to EEPPOOCCHHSSEECC--
              OONNDDSS.  If BBAASSHH__MMOONNOOSSEECCOONNDDSS is unset, it loses its special  prop-
              erties, even if it is subsequently reset.
       BBAASSHH__RREEMMAATTCCHH
              An  array  variable  whose members are assigned by the ==~~ binary
              operator to the [[[[ conditional command.  The element with  index
              0  is  the portion of the string matching the entire regular ex-
              pression.  The element with index _n is the portion of the string
              matching the _nth parenthesized subexpression.
       BBAASSHH__SSOOUURRCCEE
              An array variable whose members are the source  filenames  where
              the  corresponding  shell  function  names in the FFUUNNCCNNAAMMEE array
              variable are defined.  The shell function $${{FFUUNNCCNNAAMMEE[[_$_i]]}} is de-
              fined  in  the   file   $${{BBAASSHH__SSOOUURRCCEE[[_$_i]]}}   and   called   from
              $${{BBAASSHH__SSOOUURRCCEE[[_$_i_+_1]]}}.   Assignments  to  BBAASSHH__SSOOUURRCCEE have no ef-
              fect, and it may not be unset.
       BBAASSHH__SSUUBBSSHHEELLLL
              Incremented by one within each subshell or subshell  environment
              when  the  shell begins executing in that environment.  The ini-
              tial value is 0.  If BBAASSHH__SSUUBBSSHHEELLLL is unset, it loses  its  spe-
              cial properties, even if it is subsequently reset.
       BBAASSHH__TTRRAAPPSSIIGG
              Set  to the signal number corresponding to the trap action being
              executed during its execution.  See the description of ttrraapp  un-
              der  SSHHEELLLL  BBUUIILLTTIINN  CCOOMMMMAANNDDSS below for information about signal
              numbers and trap execution.
       BBAASSHH__VVEERRSSIINNFFOO
              A readonly array variable whose members hold version information
              for this instance of bbaasshh.  The values  assigned  to  the  array
              members are as follows:
              BBAASSHH__VVEERRSSIINNFFOO[[0]]        The major version number (the _r_e_l_e_a_s_e).
              BBAASSHH__VVEERRSSIINNFFOO[[1]]        The minor version number (the _v_e_r_s_i_o_n).
              BBAASSHH__VVEERRSSIINNFFOO[[2]]        The patch level.
              BBAASSHH__VVEERRSSIINNFFOO[[3]]        The build version.
              BBAASSHH__VVEERRSSIINNFFOO[[4]]        The release status (e.g., _b_e_t_a).
              BBAASSHH__VVEERRSSIINNFFOO[[5]]        The value of MMAACCHHTTYYPPEE.
       BBAASSHH__VVEERRSSIIOONN
              Expands  to  a string describing the version of this instance of
              bbaasshh (e.g., 5.2.37(3)-release).
       CCOOMMPP__CCWWOORRDD
              An index into $${{CCOOMMPP__WWOORRDDSS}} of the word containing  the  current
              cursor position.  This variable is available only in shell func-
              tions  invoked  by  the  programmable completion facilities (see
              PPrrooggrraammmmaabbllee CCoommpplleettiioonn below).
       CCOOMMPP__KKEEYY
              The key (or final key of a key sequence) used to invoke the cur-
              rent completion function.  This variable is  available  only  in
              shell  functions and external commands invoked by the programma-
              ble completion facilities (see PPrrooggrraammmmaabbllee CCoommpplleettiioonn below).
       CCOOMMPP__LLIINNEE
              The current command line.  This variable is  available  only  in
              shell  functions and external commands invoked by the programma-
              ble completion facilities (see PPrrooggrraammmmaabbllee CCoommpplleettiioonn below).
       CCOOMMPP__PPOOIINNTT
              The index of the current cursor position relative to the  begin-
              ning  of the current command.  If the current cursor position is
              at the end of the current command, the value of this variable is
              equal to $${{##CCOOMMPP__LLIINNEE}}.  This  variable  is  available  only  in
              shell  functions and external commands invoked by the programma-
              ble completion facilities (see PPrrooggrraammmmaabbllee CCoommpplleettiioonn below).
       CCOOMMPP__TTYYPPEE
              Set to an integer value corresponding to the type  of  attempted
              completion  that caused a completion function to be called: _T_A_B,
              for normal completion, _?, for listing completions after  succes-
              sive  tabs,  _!, for listing alternatives on partial word comple-
              tion, _@, to list completions if the word is not  unmodified,  or
              _%,  for  menu  completion.   This  variable is available only in
              shell functions and external commands invoked by the  programma-
              ble completion facilities (see PPrrooggrraammmmaabbllee CCoommpplleettiioonn below).
       CCOOMMPP__WWOORRDDBBRREEAAKKSS
              The  set  of characters that the rreeaaddlliinnee library treats as word
              separators when performing word completion.  If  CCOOMMPP__WWOORRDDBBRREEAAKKSS
              is  unset, it loses its special properties, even if it is subse-
              quently reset.
       CCOOMMPP__WWOORRDDSS
              An array variable (see AArrrraayyss below) consisting of the  individ-
              ual  words  in the current command line.  The line is split into
              words as rreeaaddlliinnee would split it, using CCOOMMPP__WWOORRDDBBRREEAAKKSS  as  de-
              scribed  above.   This variable is available only in shell func-
              tions invoked by the  programmable  completion  facilities  (see
              PPrrooggrraammmmaabbllee CCoommpplleettiioonn below).
       CCOOPPRROOCC An  array  variable  (see AArrrraayyss below) created to hold the file
              descriptors for output from and input to  an  unnamed  coprocess
              (see CCoopprroocceesssseess above).
       DDIIRRSSTTAACCKK
              An array variable (see AArrrraayyss below) containing the current con-
              tents  of  the directory stack.  Directories appear in the stack
              in the order they are displayed by the ddiirrss builtin.   Assigning
              to members of this array variable may be used to modify directo-
              ries  already in the stack, but the ppuusshhdd and ppooppdd builtins must
              be used to add and remove directories.  Assigning to this  vari-
              able  does not change the current directory.  If DDIIRRSSTTAACCKK is un-
              set, it loses its special properties, even if it is subsequently
              reset.
       EEPPOOCCHHRREEAALLTTIIMMEE
              Each time this parameter is referenced, it expands to the number
              of seconds since the Unix Epoch (see  _t_i_m_e(3))  as  a  floating-
              point  value  with  micro-second  granularity.   Assignments  to
              EEPPOOCCHHRREEAALLTTIIMMEE are ignored.  If EEPPOOCCHHRREEAALLTTIIMMEE is unset, it  loses
              its special properties, even if it is subsequently reset.
       EEPPOOCCHHSSEECCOONNDDSS
              Each time this parameter is referenced, it expands to the number
              of  seconds  since the Unix Epoch (see _t_i_m_e(3)).  Assignments to
              EEPPOOCCHHSSEECCOONNDDSS are ignored.  If EEPPOOCCHHSSEECCOONNDDSS is  unset,  it  loses
              its special properties, even if it is subsequently reset.
       EEUUIIDD   Expands  to  the effective user ID of the current user, initial-
              ized at shell startup.  This variable is readonly.
       FFUUNNCCNNAAMMEE
              An array variable containing the names of  all  shell  functions
              currently in the execution call stack.  The element with index 0
              is the name of any currently-executing shell function.  The bot-
              tom-most  element  (the  one  with the highest index) is "main".
              This variable exists only when a shell  function  is  executing.
              Assignments  to  FFUUNNCCNNAAMMEE have no effect.  If FFUUNNCCNNAAMMEE is unset,
              it loses its special properties, even if it is subsequently  re-
              set.

              This  variable  can  be  used  with BBAASSHH__LLIINNEENNOO and BBAASSHH__SSOOUURRCCEE.
              Each  element  of  FFUUNNCCNNAAMMEE  has   corresponding   elements   in
              BBAASSHH__LLIINNEENNOO and BBAASSHH__SSOOUURRCCEE to describe the call stack.  For in-
              stance,    $${{FFUUNNCCNNAAMMEE[[_$_i]]}}    was    called    from   the   file
              $${{BBAASSHH__SSOOUURRCCEE[[_$_i_+_1]]}} at  line  number  $${{BBAASSHH__LLIINNEENNOO[[_$_i]]}}.   The
              ccaalllleerr builtin displays the current call stack using this infor-
              mation.
       GGRROOUUPPSS An  array  variable  containing  the list of groups of which the
              current user is a member.  Assignments to GGRROOUUPPSS have no effect.
              If GGRROOUUPPSS is unset, it loses its special properties, even if  it
              is subsequently reset.
       HHIISSTTCCMMDD
              The history number, or index in the history list, of the current
              command.   Assignments to HHIISSTTCCMMDD have no effect.  If HHIISSTTCCMMDD is
              unset, it loses its special properties, even  if  it  is  subse-
              quently reset.
       HHOOSSTTNNAAMMEE
              Automatically set to the name of the current host.
       HHOOSSTTTTYYPPEE
              Automatically  set  to a string that uniquely describes the type
              of machine on which bbaasshh is executing.  The default  is  system-
              dependent.
       LLIINNEENNOO Each  time this parameter is referenced, the shell substitutes a
              decimal number representing the current sequential  line  number
              (starting  with  1)  within a script or function.  When not in a
              script or function, the value substituted is not  guaranteed  to
              be meaningful.  If LLIINNEENNOO is unset, it loses its special proper-
              ties, even if it is subsequently reset.
       MMAACCHHTTYYPPEE
              Automatically  set  to  a string that fully describes the system
              type on which bbaasshh is executing, in the  standard  GNU  _c_p_u_-_c_o_m_-
              _p_a_n_y_-_s_y_s_t_e_m format.  The default is system-dependent.
       MMAAPPFFIILLEE
              An  array  variable  (see AArrrraayyss below) created to hold the text
              read by the mmaappffiillee builtin when no variable name is supplied.
       OOLLDDPPWWDD The previous working directory as set by the ccdd command.
       OOPPTTAARRGG The value of the last option argument processed by  the  ggeettooppttss
              builtin command (see SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS below).
       OOPPTTIINNDD The  index  of  the next argument to be processed by the ggeettooppttss
              builtin command (see SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS below).
       OOSSTTYYPPEE Automatically set to a string that describes the operating  sys-
              tem  on  which  bbaasshh is executing.  The default is system-depen-
              dent.
       PPIIPPEESSTTAATTUUSS
              An array variable (see AArrrraayyss below) containing a list  of  exit
              status  values  from  the commands in the most-recently-executed
              foreground pipeline, which may consist of only a simple  command
              (see SSHHEELLLL GGRRAAMMMMAARR above).  BBaasshh sets PPIIPPEESSTTAATTUUSS after executing
              multi-element  pipelines,  timed  and  negated pipelines, simple
              commands, subshells created with the ( operator, the [[[[  and  ((((
              compound commands, and after error conditions that result in the
              shell aborting command execution.
       PPPPIIDD   The  process  ID  of the shell's parent.  This variable is read-
              only.
       PPWWDD    The current working directory as set by the ccdd command.
       RRAANNDDOOMM Each time this parameter is referenced, it expands to  a  random
              integer  between  0 and 32767.  Assigning a value to RRAANNDDOOMM ini-
              tializes (seeds) the sequence of random  numbers.   Seeding  the
              random  number  generator  with the same constant value produces
              the same sequence of values.  If RRAANNDDOOMM is unset, it  loses  its
              special properties, even if it is subsequently reset.
       RREEAADDLLIINNEE__AARRGGUUMMEENNTT
              Any  numeric  argument  given to a rreeaaddlliinnee command that was de-
              fined using "bind -x" (see SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS below) when it
              was invoked.
       RREEAADDLLIINNEE__LLIINNEE
              The contents of the rreeaaddlliinnee line buffer, for use with "bind -x"
              (see SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS below).
       RREEAADDLLIINNEE__MMAARRKK
              The position of the mark (saved insertion point) in the rreeaaddlliinnee
              line buffer, for use with "bind -x" (see SSHHEELLLL BBUUIILLTTIINN  CCOOMMMMAANNDDSS
              below).  The characters between the insertion point and the mark
              are often called the _r_e_g_i_o_n.
       RREEAADDLLIINNEE__PPOOIINNTT
              The position of the insertion point in the rreeaaddlliinnee line buffer,
              for use with "bind -x" (see SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS below).
       RREEPPLLYY  Set  to  the line of input read by the rreeaadd builtin command when
              no arguments are supplied.
       SSEECCOONNDDSS
              Each time this parameter is referenced, it expands to the number
              of seconds since shell invocation.  If a value  is  assigned  to
              SSEECCOONNDDSS,  the  value  returned upon subsequent references is the
              number of seconds since the assignment plus the value  assigned.
              The  number  of seconds at shell invocation and the current time
              are always determined by querying the system clock at one-second
              resolution.  If SSEECCOONNDDSS is unset, it loses its  special  proper-
              ties, even if it is subsequently reset.
       SSHHEELLLLOOPPTTSS
              A  colon-separated  list of enabled shell options.  Each word in
              the list is a valid argument  for  the  --oo  option  to  the  sseett
              builtin command (see SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS below).  The options
              appearing  in  SSHHEELLLLOOPPTTSS are those reported as _o_n by sseett --oo.  If
              this variable is in the environment when  bbaasshh  starts  up,  the
              shell enables each option in the list before reading any startup
              files.   If  this variable is exported, child shells will enable
              each option in the list.  This variable is read-only.
       SSHHLLVVLL  Incremented by one each time an instance of bbaasshh is started.
       SSRRAANNDDOOMM
              Each time it is referenced, this variable expands  to  a  32-bit
              pseudo-random number.  The random number generator is not linear
              on  systems  that support _/_d_e_v_/_u_r_a_n_d_o_m or _a_r_c_4_r_a_n_d_o_m(3), so each
              returned number has no relationship to the numbers preceding it.
              The random number generator cannot be seeded, so assignments  to
              this variable have no effect.  If SSRRAANNDDOOMM is unset, it loses its
              special properties, even if it is subsequently reset.
       UUIIDD    Expands to the user ID of the current user, initialized at shell
              startup.  This variable is readonly.

       The  shell  uses the following variables. In some cases, bbaasshh assigns a
       default value to a variable; these cases are noted below.

       BBAASSHH__CCOOMMPPAATT
              The value is used to set the shell's compatibility  level.   See
              SSHHEELLLL  CCOOMMPPAATTIIBBIILLIITTYY MMOODDEE below for a description of the various
              compatibility levels and their effects.  The value may be a dec-
              imal number (e.g., 4.2) or an integer (e.g.,  42)  corresponding
              to  the desired compatibility level.  If BBAASSHH__CCOOMMPPAATT is unset or
              set to the empty string, the compatibility level is set  to  the
              default  for  the  current  version.  If BBAASSHH__CCOOMMPPAATT is set to a
              value that is not one of the  valid  compatibility  levels,  the
              shell  prints  an error message and sets the compatibility level
              to the default for the current version.  A subset of  the  valid
              values  correspond  to  the compatibility levels described below
              under SSHHEELLLL CCOOMMPPAATTIIBBIILLIITTYY MMOODDEE.  For example,  4.2  and  42  are
              valid  values  that  correspond to the ccoommppaatt4422 sshhoopptt option and
              set the compatibility level to 42.  The current version is  also
              a valid value.
       BBAASSHH__EENNVV
              If  this parameter is set when bbaasshh is executing a shell script,
              its expanded value is interpreted as a filename containing  com-
              mands  to initialize the shell before it reads and executes com-
              mands from the script.  The value of BBAASSHH__EENNVV  is  subjected  to
              parameter expansion, command substitution, and arithmetic expan-
              sion  before  being interpreted as a filename.  PPAATTHH is not used
              to search for the resultant filename.
       BBAASSHH__XXTTRRAACCEEFFDD
              If set to an integer corresponding to a valid  file  descriptor,
              bbaasshh  writes the trace output generated when "set -x" is enabled
              to that file descriptor, instead of  the  standard  error.   The
              file  descriptor  is  closed  when BBAASSHH__XXTTRRAACCEEFFDD is unset or as-
              signed a new value.  Unsetting BBAASSHH__XXTTRRAACCEEFFDD or assigning it the
              empty string causes the trace output to be sent to the  standard
              error.  Note that setting BBAASSHH__XXTTRRAACCEEFFDD to 2 (the standard error
              file  descriptor) and then unsetting it will result in the stan-
              dard error being closed.
       CCDDPPAATTHH The search path for the ccdd command.  This is  a  colon-separated
              list of directories where the shell looks for directories speci-
              fied  as  arguments  to  the  ccdd  command.   A  sample  value is
              ".:~:/usr".
       CCHHIILLDD__MMAAXX
              Set the number of exited child status values for  the  shell  to
              remember.   BBaasshh will not allow this value to be decreased below
              a POSIX-mandated minimum, and there is  a  maximum  value  (cur-
              rently  8192)  that  this  may not exceed.  The minimum value is
              system-dependent.
       CCOOLLUUMMNNSS
              Used by the sseelleecctt compound command to  determine  the  terminal
              width  when  printing selection lists.  Automatically set if the
              cchheecckkwwiinnssiizzee option is enabled or in an interactive  shell  upon
              receipt of a SSIIGGWWIINNCCHH.
       CCOOMMPPRREEPPLLYY
              An array variable from which bbaasshh reads the possible completions
              generated  by  a shell function invoked by the programmable com-
              pletion facility (see PPrrooggrraammmmaabbllee CCoommpplleettiioonn below).  Each  ar-
              ray element contains one possible completion.
       EEMMAACCSS  If  bbaasshh  finds  this variable in the environment when the shell
              starts with value "t", it assumes that the shell is  running  in
              an Emacs shell buffer and disables line editing.
       EENNVV    Expanded  and  executed  similarly  to  BBAASSHH__EENNVV (see IINNVVOOCCAATTIIOONN
              above) when an interactive shell is invoked in posix mode.
       EEXXEECCIIGGNNOORREE
              A colon-separated list of shell patterns (see PPaatttteerrnn  MMaattcchhiinngg)
              defining  the  set  of filenames to be ignored by command search
              using PPAATTHH.  Files whose full pathnames match one of these  pat-
              terns  are  not  considered executable files for the purposes of
              completion and command execution via PPAATTHH lookup.  This does not
              affect the behavior of the [[, tteesstt, and [[[[ commands.  Full path-
              names in the command hash table are not subject  to  EEXXEECCIIGGNNOORREE.
              Use  this  variable to ignore shared library files that have the
              executable bit set, but are not executable files.   The  pattern
              matching honors the setting of the eexxttgglloobb shell option.
       FFCCEEDDIITT The default editor for the ffcc builtin command.
       FFIIGGNNOORREE
              A  colon-separated  list  of  suffixes to ignore when performing
              filename completion (see RREEAADDLLIINNEE below).  A filename whose suf-
              fix matches one of the entries in FFIIGGNNOORREE is excluded  from  the
              list of matched filenames.  A sample value is ".o:~".
       FFUUNNCCNNEESSTT
              If  set  to  a  numeric  value greater than 0, defines a maximum
              function nesting level.  Function invocations that  exceed  this
              nesting level cause the current command to abort.
       GGLLOOBBIIGGNNOORREE
              A  colon-separated  list  of  patterns  defining the set of file
              names to be ignored by  pathname  expansion.   If  a  file  name
              matched  by a pathname expansion pattern also matches one of the
              patterns in GGLLOOBBIIGGNNOORREE, it is removed from the list of  matches.
              The pattern matching honors the setting of the eexxttgglloobb shell op-
              tion.
       GGLLOOBBSSOORRTT
              Controls  how the results of pathname expansion are sorted.  The
              value of this variable specifies the sort criteria and sort  or-
              der  for the results of pathname expansion.  If this variable is
              unset or set to the null string,  pathname  expansion  uses  the
              historical  behavior  of  sorting  by name, in ascending lexico-
              graphic order as determined by the LLCC__CCOOLLLLAATTEE shell variable.

              If set, a valid value begins with an optional _+,  which  is  ig-
              nored, or _-, which reverses the sort order from ascending to de-
              scending,  followed  by a sort specifier.  The valid sort speci-
              fiers are _n_a_m_e, _n_u_m_e_r_i_c, _s_i_z_e, _m_t_i_m_e, _a_t_i_m_e, _c_t_i_m_e, and  _b_l_o_c_k_s,
              which sort the files on name, names in numeric rather than lexi-
              cographic  order, file size, modification time, access time, in-
              ode change time, and number of blocks, respectively.  If any  of
              the  non-name  keys compare as equal (e.g., if two files are the
              same size), sorting uses the name as a secondary sort key.

              For example, a value of _-_m_t_i_m_e sorts the results  in  descending
              order by modification time (newest first).

              The  _n_u_m_e_r_i_c  specifier treats names consisting solely of digits
              as numbers and sorts them using  their  numeric  value  (so  "2"
              sorts before "10", for example).  When using _n_u_m_e_r_i_c, names con-
              taining  non-digits  sort  after all the all-digit names and are
              sorted by name using the traditional behavior.

              A sort specifier of _n_o_s_o_r_t disables sorting completely; bbaasshh re-
              turns the results in the order they are read from the file  sys-
              tem, ignoring any leading _-.

              If  the  sort  specifier  is  missing, it defaults to _n_a_m_e, so a
              value of _+ is equivalent to the null string, and a  value  of  _-
              sorts  by  name in descending order.  Any invalid value restores
              the historical sorting behavior.
       HHIISSTTCCOONNTTRROOLL
              A colon-separated list of values controlling  how  commands  are
              saved  on  the  history  list.   If  the list of values includes
              _i_g_n_o_r_e_s_p_a_c_e, lines which begin with a ssppaaccee  character  are  not
              saved  in  the history list.  A value of _i_g_n_o_r_e_d_u_p_s causes lines
              matching the previous history entry not to be saved.  A value of
              _i_g_n_o_r_e_b_o_t_h is shorthand for _i_g_n_o_r_e_s_p_a_c_e and _i_g_n_o_r_e_d_u_p_s.  A value
              of _e_r_a_s_e_d_u_p_s causes all previous lines matching the current line
              to be removed from the history list before that line  is  saved.
              Any  value  not in the above list is ignored.  If HHIISSTTCCOONNTTRROOLL is
              unset, or does not include a valid value, bbaasshh saves  all  lines
              read  by  the  shell  parser on the history list, subject to the
              value of HHIISSTTIIGGNNOORREE.  If the first line of a multi-line compound
              command was saved, the  second  and  subsequent  lines  are  not
              tested,  and are added to the history regardless of the value of
              HHIISSTTCCOONNTTRROOLL.  If the first line was not saved,  the  second  and
              subsequent lines of the command are not saved either.
       HHIISSTTFFIILLEE
              The name of the file in which command history is saved (see HHIISS--
              TTOORRYY  below).   BBaasshh assigns a default value of _~_/_._b_a_s_h___h_i_s_t_o_r_y.
              If HHIISSTTFFIILLEE is unset or null, the shell does not save  the  com-
              mand history when it exits.
       HHIISSTTFFIILLEESSIIZZEE
              The maximum number of lines contained in the history file.  When
              this  variable  is  assigned  a value, the history file is trun-
              cated, if necessary, to contain no more than the number of  his-
              tory entries that total no more than that number of lines by re-
              moving  the oldest entries.  If the history list contains multi-
              line entries, the history file may contain more lines than  this
              maximum  to  avoid leaving partial history entries.  The history
              file is also truncated to this size  after  writing  it  when  a
              shell  exits  or by the hhiissttoorryy builtin.  If the value is 0, the
              history file is truncated to zero size.  Non-numeric values  and
              numeric  values  less  than  zero inhibit truncation.  The shell
              sets the default value to the value of  HHIISSTTSSIIZZEE  after  reading
              any startup files.
       HHIISSTTIIGGNNOORREE
              A  colon-separated list of patterns used to decide which command
              lines should be saved on the history list.  If  a  command  line
              matches  one  of  the patterns in the value of HHIISSTTIIGGNNOORREE, it is
              not saved on the history list.  Each pattern is anchored at  the
              beginning  of  the  line  and must match the complete line (bbaasshh
              does not  implicitly append a  "**").   Each  pattern  is  tested
              against  the  line after the checks specified by HHIISSTTCCOONNTTRROOLL are
              applied.  In addition to the normal shell pattern matching char-
              acters, "&&" matches the previous history line.  A backslash  es-
              capes  the  "&&";  the  backslash  is removed before attempting a
              match.  If the first line of a multi-line compound  command  was
              saved,  the  second and subsequent lines are not tested, and are
              added to the history regardless of the value of HHIISSTTIIGGNNOORREE.   If
              the first line was not saved, the second and subsequent lines of
              the  command  are not saved either.  The pattern matching honors
              the setting of the eexxttgglloobb shell option.
              HHIISSTTIIGGNNOORREE subsumes some of the function of HHIISSTTCCOONNTTRROOLL.  A pat-
              tern of "&" is identical to "ignoredups", and a  pattern  of  "[
              ]*"  is  identical  to  "ignorespace".  Combining these two pat-
              terns, separating them with a colon, provides the  functionality
              of "ignoreboth".
       HHIISSTTSSIIZZEE
              The  number  of commands to remember in the command history (see
              HHIISSTTOORRYY below).  If the value is 0, commands are  not  saved  in
              the history list.  Numeric values less than zero result in every
              command  being  saved  on  the history list (there is no limit).
              The shell sets the  default  value  to  500  after  reading  any
              startup files.
       HHIISSTTTTIIMMEEFFOORRMMAATT
              If  this  variable  is  set and not null, its value is used as a
              format string for _s_t_r_f_t_i_m_e(3) to print the time stamp associated
              with each history entry displayed by the  hhiissttoorryy  builtin.   If
              this  variable  is set, the shell writes time stamps to the his-
              tory file so they may be preserved across shell sessions.   This
              uses  the  history  comment  character to distinguish timestamps
              from other history lines.
       HHOOMMEE   The home directory of the current user; the default argument for
              the ccdd builtin command.  The value of this variable is also used
              when performing tilde expansion.
       HHOOSSTTFFIILLEE
              Contains the name of a file in the  same  format  as  _/_e_t_c_/_h_o_s_t_s
              that should be read when the shell needs to complete a hostname.
              The  list  of possible hostname completions may be changed while
              the shell is running; the next time hostname completion  is  at-
              tempted  after  the  value is changed, bbaasshh adds the contents of
              the new file to the existing list.  If HHOOSSTTFFIILLEE is set, but  has
              no  value,  or  does  not name a readable file, bbaasshh attempts to
              read _/_e_t_c_/_h_o_s_t_s to obtain the list of possible hostname  comple-
              tions.  When HHOOSSTTFFIILLEE is unset, bbaasshh clears the hostname list.
       IIFFSS    The _I_n_t_e_r_n_a_l _F_i_e_l_d _S_e_p_a_r_a_t_o_r that is used for word splitting af-
              ter  expansion  and  to  split  lines  into  words with the rreeaadd
              builtin command.  Word splitting is described below under EEXXPPAANN--
              SSIIOONN.  The default value is "<space><tab><newline>".
       IIGGNNOORREEEEOOFF
              Controls the action of an interactive shell on receipt of an EEOOFF
              character as the sole input.  If set, the value is the number of
              consecutive EEOOFF characters which must  be  typed  as  the  first
              characters  on an input line before bbaasshh exits.  If the variable
              is set but does not have a numeric value, or the value is  null,
              the  default value is 10.  If it is unset, EEOOFF signifies the end
              of input to the shell.
       IINNPPUUTTRRCC
              The filename for the rreeaaddlliinnee startup file, overriding  the  de-
              fault of _~_/_._i_n_p_u_t_r_c (see RREEAADDLLIINNEE below).
       IINNSSIIDDEE__EEMMAACCSS
              If  this  variable  appears  in  the  environment when the shell
              starts, bbaasshh assumes that it is running inside  an  Emacs  shell
              buffer  and  may disable line editing, depending on the value of
              TTEERRMM.
       LLAANNGG   Used to determine the  locale  category  for  any  category  not
              specifically selected with a variable starting with LLCC__.
       LLCC__AALLLL This  variable  overrides  the  value  of LLAANNGG and any other LLCC__
              variable specifying a locale category.
       LLCC__CCOOLLLLAATTEE
              This variable determines the collation order used  when  sorting
              the  results  of pathname expansion, and determines the behavior
              of range expressions, equivalence  classes,  and  collating  se-
              quences within pathname expansion and pattern matching.
       LLCC__CCTTYYPPEE
              This  variable  determines  the interpretation of characters and
              the behavior of character classes within pathname expansion  and
              pattern matching.
       LLCC__MMEESSSSAAGGEESS
              This  variable  determines  the locale used to translate double-
              quoted strings preceded by a $$.
       LLCC__NNUUMMEERRIICC
              This variable determines the locale  category  used  for  number
              formatting.
       LLCC__TTIIMMEE
              This  variable  determines the locale category used for data and
              time formatting.
       LLIINNEESS  Used by the sseelleecctt compound  command  to  determine  the  column
              length  for  printing selection lists.  Automatically set if the
              cchheecckkwwiinnssiizzee option is enabled or in an interactive  shell  upon
              receipt of a SSIIGGWWIINNCCHH.
       MMAAIILL   If the value is set to a file or directory name and the MMAAIILLPPAATTHH
              variable  is  not  set,  bbaasshh informs the user of the arrival of
              mail in the specified file or Maildir-format directory.
       MMAAIILLCCHHEECCKK
              Specifies how often (in seconds) bbaasshh checks for mail.  The  de-
              fault  is  60  seconds.   When it is time to check for mail, the
              shell does so before displaying the  primary  prompt.   If  this
              variable  is  unset,  or  set  to  a  value that is not a number
              greater than or equal to zero, the shell disables mail checking.
       MMAAIILLPPAATTHH
              A colon-separated list of filenames to be checked for mail.  The
              message to be printed when mail arrives in a particular file may
              be specified by separating the filename from the message with  a
              "?".   When  used  in the text of the message, $$__ expands to the
              name of the current mailfile.  For example:
              MMAAIILLPPAATTHH='/var/mail/bfox?"You have mail":~/shell-mail?"$_ has mail!"'
              BBaasshh can be configured to supply a default value for this  vari-
              able  (there  is  no  value by default), but the location of the
              user  mail  files  that  it  uses  is  system  dependent  (e.g.,
              /var/mail/$$UUSSEERR).
       OOPPTTEERRRR If set to the value 1, bbaasshh displays error messages generated by
              the  ggeettooppttss builtin command (see SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS below).
              OOPPTTEERRRR is initialized to 1 each time the shell is invoked  or  a
              shell script is executed.
       PPAATTHH   The  search  path for commands.  It is a colon-separated list of
              directories in which the shell looks for commands  (see  CCOOMMMMAANNDD
              EEXXEECCUUTTIIOONN  below).   A  zero-length (null) directory name in the
              value of PPAATTHH indicates the current directory.  A null directory
              name may appear as two adjacent colons,  or  as  an  initial  or
              trailing  colon.   The  default path is system-dependent, and is
              set by the administrator who installs bbaasshh.  A common value is
                   /usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin
       PPOOSSIIXXLLYY__CCOORRRREECCTT
              If this variable is in the environment  when  bbaasshh  starts,  the
              shell  enters posix mode before reading the startup files, as if
              the ----ppoossiixx invocation option had been supplied.  If it  is  set
              while  the  shell is running, bbaasshh enables posix mode, as if the
              command "set -o posix" had been executed.  When the shell enters
              posix mode, it sets this variable if it was not already set.
       PPRROOMMPPTT__CCOOMMMMAANNDD
              If this variable is set, and is an array, the value of each  set
              element  is  executed as a command prior to issuing each primary
              prompt.  If this is set but not an array variable, its value  is
              used as a command to execute instead.
       PPRROOMMPPTT__DDIIRRTTRRIIMM
              If  set  to a number greater than zero, the value is used as the
              number of trailing directory components to retain when expanding
              the \\ww and \\WW  prompt  string  escapes  (see  PPRROOMMPPTTIINNGG  below).
              Characters removed are replaced with an ellipsis.
       PPSS00    The  value  of  this parameter is expanded (see PPRROOMMPPTTIINNGG below)
              and displayed by interactive shells after reading a command  and
              before the command is executed.
       PPSS11    The  value  of  this parameter is expanded (see PPRROOMMPPTTIINNGG below)
              and used as the primary prompt string.   The  default  value  is
              "\s-\v\$ ".
       PPSS22    The  value of this parameter is expanded as with PPSS11 and used as
              the secondary prompt string.  The default is "> ".
       PPSS33    The value of this parameter is used as the prompt for the sseelleecctt
              command (see SSHHEELLLL GGRRAAMMMMAARR above).
       PPSS44    The value of this parameter is expanded  as  with  PPSS11  and  the
              value is printed before each command bbaasshh displays during an ex-
              ecution trace.  The first character of the expanded value of PPSS44
              is replicated multiple times, as necessary, to indicate multiple
              levels of indirection.  The default is "+ ".
       SSHHEELLLL  This  variable expands to the full pathname to the shell.  If it
              is not set when the shell starts, bbaasshh assigns to  it  the  full
              pathname of the current user's login shell.
       TTIIMMEEFFOORRMMAATT
              The  value of this parameter is used as a format string specify-
              ing how the timing information for pipelines prefixed  with  the
              ttiimmee  reserved word should be displayed.  The %% character intro-
              duces an escape sequence that is expanded to  a  time  value  or
              other  information.  The escape sequences and their meanings are
              as follows; the brackets denote optional portions.
              %%%%        A literal %%.
              %%[[_p]][[ll]]RR  The elapsed time in seconds.
              %%[[_p]][[ll]]UU  The number of CPU seconds spent in user mode.
              %%[[_p]][[ll]]SS  The number of CPU seconds spent in system mode.
              %%PP        The CPU percentage, computed as (%U + %S) / %R.

              The optional _p is a digit specifying the _p_r_e_c_i_s_i_o_n,  the  number
              of fractional digits after a decimal point.  A value of 0 causes
              no  decimal point or fraction to be output.  ttiimmee prints at most
              six digits after the decimal point; values of _p greater  than  6
              are changed to 6.  If _p is not specified, ttiimmee prints three dig-
              its after the decimal point.

              The  optional ll specifies a longer format, including minutes, of
              the form _M_Mm_S_S._F_Fs.  The value of _p determines  whether  or  not
              the fraction is included.

              If  this  variable  is not set, bbaasshh acts as if it had the value
              $$''\\nnrreeaall\\tt%%33llRR\\nnuusseerr\\tt%%33llUU\\nnssyyss\\tt%%33llSS''.  If the value  is  null,
              bbaasshh  does  not display any timing information.  A trailing new-
              line is added when the format string is displayed.
       TTMMOOUUTT  If set to a value greater than zero, the rreeaadd builtin  uses  the
              value  as its default timeout.  The sseelleecctt command terminates if
              input does not arrive after TTMMOOUUTT seconds when input  is  coming
              from  a  terminal.  In an interactive shell, the value is inter-
              preted as the number of seconds to wait for a line of input  af-
              ter  issuing  the primary prompt.  BBaasshh terminates after waiting
              for that number of seconds if a complete line of input does  not
              arrive.
       TTMMPPDDIIRR If  set, bbaasshh uses its value as the name of a directory in which
              bbaasshh creates temporary files for the shell's use.
       aauuttoo__rreessuummee
              This variable controls how the shell interacts with the user and
              job control.  If this variable is set, simple commands  consist-
              ing  of only a single word, without redirections, are treated as
              candidates for resumption of an existing stopped job.  There  is
              no  ambiguity  allowed;  if there is more than one job beginning
              with or containing the word, this selects the most recently  ac-
              cessed  job.  The _n_a_m_e of a stopped job, in this context, is the
              command line used to start it, as displayed by jjoobbss.  If set  to
              the  value  _e_x_a_c_t, the word must match the name of a stopped job
              exactly; if set to _s_u_b_s_t_r_i_n_g, the word needs  to  match  a  sub-
              string  of  the name of a stopped job.  The _s_u_b_s_t_r_i_n_g value pro-
              vides functionality analogous to the %%??  job identifier (see JJOOBB
              CCOONNTTRROOLL below).  If set to any other value (e.g.,  _p_r_e_f_i_x),  the
              word  must  be  a  prefix of a stopped job's name; this provides
              functionality analogous to the %%_s_t_r_i_n_g job identifier.
       hhiissttcchhaarrss
              The two or three characters  which  control  history  expansion,
              quick  substitution, and tokenization (see HHIISSTTOORRYY EEXXPPAANNSSIIOONN be-
              low).  The first character is the _h_i_s_t_o_r_y  _e_x_p_a_n_s_i_o_n  character,
              the  character  which  begins a history expansion, normally "!!".
              The second character is the _q_u_i_c_k _s_u_b_s_t_i_t_u_t_i_o_n  character,  nor-
              mally  "^^".  When it appears as the first character on the line,
              history substitution repeats the previous command, replacing one
              string with another.  The optional third character is  the  _h_i_s_-
              _t_o_r_y  _c_o_m_m_e_n_t character,  normally "##", which indicates that the
              remainder of the line is a comment when it appears as the  first
              character  of  a  word.   The history comment character disables
              history substitution for the remaining words on  the  line.   It
              does not necessarily cause the shell parser to treat the rest of
              the line as a comment.

   AArrrraayyss
       BBaasshh  provides one-dimensional indexed and associative array variables.
       Any variable may be used as an indexed array; the ddeeccllaarree  builtin  ex-
       plicitly  declares  an array.  There is no maximum limit on the size of
       an array, nor any requirement that members be indexed or assigned  con-
       tiguously.   Indexed arrays are referenced using arithmetic expressions
       that must expand to an integer (see AARRIITTHHMMEETTIICC  EEVVAALLUUAATTIIOONN  below)  and
       are  zero-based;  associative  arrays  are  referenced  using arbitrary
       strings.  Unless otherwise noted, indexed array indices  must  be  non-
       negative integers.

       The  shell performs parameter and variable expansion, arithmetic expan-
       sion, command substitution, and quote removal  on  indexed  array  sub-
       scripts.  Since this can potentially result in empty strings, subscript
       indexing treats those as expressions that evaluate to 0.

       The  shell  performs tilde expansion, parameter and variable expansion,
       arithmetic expansion, command substitution, and quote removal on  asso-
       ciative  array subscripts.  Empty strings cannot be used as associative
       array keys.

       BBaasshh automatically creates an indexed array if any variable is assigned
       to using the syntax
              _n_a_m_e[_s_u_b_s_c_r_i_p_t]=_v_a_l_u_e .
       The _s_u_b_s_c_r_i_p_t is treated as an arithmetic expression that must evaluate
       to a number greater than or equal to zero.  To  explicitly  declare  an
       indexed array, use
              ddeeccllaarree --aa _n_a_m_e
       (see SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS below).
              ddeeccllaarree --aa _n_a_m_e[_s_u_b_s_c_r_i_p_t]
       is also accepted; the _s_u_b_s_c_r_i_p_t is ignored.

       Associative arrays are created using
              ddeeccllaarree --AA _n_a_m_e
       .

       Attributes may be specified for an array variable using the ddeeccllaarree and
       rreeaaddoonnllyy builtins.  Each attribute applies to all members of an array.

       Arrays are assigned using compound assignments of the form _n_a_m_e=((value_1
       ...  value_n)),  where  each _v_a_l_u_e may be of the form [_s_u_b_s_c_r_i_p_t]=_s_t_r_i_n_g.
       Indexed array assignments do not require  anything  but  _s_t_r_i_n_g.   Each
       _v_a_l_u_e  in the list is expanded using the shell expansions described be-
       low under EEXXPPAANNSSIIOONN, but _v_a_l_u_es that are valid variable assignments in-
       cluding the brackets and subscript do not undergo brace  expansion  and
       word splitting, as with individual variable assignments.

       When  assigning  to  indexed  arrays, if the optional brackets and sub-
       script are supplied, that index is assigned to; otherwise the index  of
       the  element  assigned  is  the last index assigned to by the statement
       plus one.  Indexing starts at zero.

       When assigning to an associative array, the words in a compound assign-
       ment may be either assignment statements, for which  the  subscript  is
       required,  or  a list of words that is interpreted as a sequence of al-
       ternating keys and values: _n_a_m_e=(( _k_e_y_1 _v_a_l_u_e_1 _k_e_y_2 _v_a_l_u_e_2 ...)).   These
       are  treated  identically  to  _n_a_m_e=(( [_k_e_y_1]=_v_a_l_u_e_1 [_k_e_y_2]=_v_a_l_u_e_2 ...)).
       The first word in the list determines how the remaining words  are  in-
       terpreted;  all  assignments  in a list must be of the same type.  When
       using key/value pairs, the keys may not be missing or  empty;  a  final
       missing value is treated like the empty string.

       This  syntax is also accepted by the ddeeccllaarree builtin.  Individual array
       elements may be assigned to using the _n_a_m_e[_s_u_b_s_c_r_i_p_t]=_v_a_l_u_e syntax  in-
       troduced above.

       When  assigning  to an indexed array, if _n_a_m_e is subscripted by a nega-
       tive number, that number is interpreted as relative to one greater than
       the maximum index of _n_a_m_e, so negative indices count back from the  end
       of the array, and an index of -1 references the last element.

       The "+=" operator appends to an array variable when assigning using the
       compound assignment syntax; see PPAARRAAMMEETTEERRSS above.

       An  array  element  is referenced using ${_n_a_m_e[_s_u_b_s_c_r_i_p_t]}.  The braces
       are required to avoid conflicts with pathname expansion.  If  _s_u_b_s_c_r_i_p_t
       is @@ or **, the word expands to all members of _n_a_m_e, unless noted in the
       description  of  a  builtin or word expansion.  These subscripts differ
       only when the word appears within double quotes.  If the word  is  dou-
       ble-quoted,  ${_n_a_m_e[*]} expands to a single word with the value of each
       array member separated by the first character of the IIFFSS special  vari-
       able,  and  ${_n_a_m_e[@]} expands each element of _n_a_m_e to a separate word.
       When there are no array members, ${_n_a_m_e[@]} expands to nothing.  If the
       double-quoted expansion occurs within a  word,  the  expansion  of  the
       first  parameter  is joined with the beginning part of the expansion of
       the original word, and the expansion of the last  parameter  is  joined
       with  the  last  part  of  the expansion of the original word.  This is
       analogous to the expansion of the special parameters ** and @@ (see  SSppee--
       cciiaall PPaarraammeetteerrss above).

       ${#_n_a_m_e[_s_u_b_s_c_r_i_p_t]}  expands  to  the length of ${_n_a_m_e[_s_u_b_s_c_r_i_p_t]}.  If
       _s_u_b_s_c_r_i_p_t is ** or @@, the expansion is the number of elements in the ar-
       ray.

       If the _s_u_b_s_c_r_i_p_t used to reference an element of an indexed array eval-
       uates to a number less than zero, it is interpreted as relative to  one
       greater  than the maximum index of the array, so negative indices count
       back from the end of the array, and an index of -1 references the  last
       element.

       Referencing an array variable without a subscript is equivalent to ref-
       erencing  the array with a subscript of 0.  Any reference to a variable
       using a valid subscript is valid; bbaasshh creates an array if necessary.

       An array variable is considered set if a subscript has been assigned  a
       value.  The null string is a valid value.

       It  is possible to obtain the keys (indices) of an array as well as the
       values.  ${!!_n_a_m_e[_@]} and ${!!_n_a_m_e[_*]} expand to the indices assigned  in
       array variable _n_a_m_e.  The treatment when in double quotes is similar to
       the expansion of the special parameters _@ and _* within double quotes.

       The uunnsseett builtin is used to destroy arrays.  uunnsseett _n_a_m_e[_s_u_b_s_c_r_i_p_t] un-
       sets  the  array element at index _s_u_b_s_c_r_i_p_t, for both indexed and asso-
       ciative arrays.  Negative subscripts to indexed arrays are  interpreted
       as  described  above.   Unsetting the last element of an array variable
       does not unset the variable.  uunnsseett _n_a_m_e, where _n_a_m_e is an  array,  re-
       moves  the entire array.  uunnsseett _n_a_m_e[_s_u_b_s_c_r_i_p_t] behaves differently de-
       pending on whether _n_a_m_e is an indexed or associative  array  when  _s_u_b_-
       _s_c_r_i_p_t is ** or @@.  If _n_a_m_e is an associative array, this unsets the el-
       ement  with  subscript  ** or @@.  If _n_a_m_e is an indexed array, unset re-
       moves all of the elements but does not remove the array itself.

       When using a variable name with a subscript as an argument  to  a  com-
       mand,  such  as with uunnsseett, without using the word expansion syntax de-
       scribed above, (e.g., unset a[4]), the argument is subject to  pathname
       expansion.   Quote  the  argument  if pathname expansion is not desired
       (e.g., unset 'a[4]').

       The ddeeccllaarree, llooccaall, and rreeaaddoonnllyy builtins each accept a  --aa  option  to
       specify  an indexed array and a --AA option to specify an associative ar-
       ray.  If both options are supplied,  --AA  takes  precedence.   The  rreeaadd
       builtin  accepts  a  --aa  option to assign a list of words read from the
       standard input to an array.  The sseett and ddeeccllaarree builtins display array
       values in a way that allows them to be reused  as  assignments.   Other
       builtins  accept  array name arguments as well (e.g., mmaappffiillee); see the
       descriptions of individual builtins below for details.  The shell  pro-
       vides a number of builtin array variables.

EEXXPPAANNSSIIOONN
       Expansion is performed on the command line after it has been split into
       words.  The shell performs these expansions: _b_r_a_c_e _e_x_p_a_n_s_i_o_n, _t_i_l_d_e _e_x_-
       _p_a_n_s_i_o_n, _p_a_r_a_m_e_t_e_r _a_n_d _v_a_r_i_a_b_l_e _e_x_p_a_n_s_i_o_n, _c_o_m_m_a_n_d _s_u_b_s_t_i_t_u_t_i_o_n, _a_r_i_t_h_-
       _m_e_t_i_c _e_x_p_a_n_s_i_o_n, _w_o_r_d _s_p_l_i_t_t_i_n_g, _p_a_t_h_n_a_m_e _e_x_p_a_n_s_i_o_n, and _q_u_o_t_e _r_e_m_o_v_a_l.

       The order of expansions is: brace expansion; tilde expansion, parameter
       and  variable expansion, arithmetic expansion, and command substitution
       (done in a left-to-right fashion); word splitting; pathname  expansion;
       and quote removal.

       On systems that can support it, there is an additional expansion avail-
       able:  _p_r_o_c_e_s_s  _s_u_b_s_t_i_t_u_t_i_o_n.   This  is  performed at the same time as
       tilde, parameter, variable, and arithmetic expansion and  command  sub-
       stitution.

       _Q_u_o_t_e  _r_e_m_o_v_a_l  is  always performed last.  It removes quote characters
       present in the original word, not ones resulting from one of the  other
       expansions, unless they have been quoted themselves.

       Only  brace  expansion,  word splitting, and pathname expansion can in-
       crease the number of words of the expansion; other expansions expand  a
       single  word to a single word.  The only exceptions to this are the ex-
       pansions  of  ""$$@@""  and  ""$${{_n_a_m_e[[@@]]}}"",  and,  in  most  cases,  $$**  and
       $${{_n_a_m_e[[**]]}} as explained above (see PPAARRAAMMEETTEERRSS).

   BBrraaccee EExxppaannssiioonn
       _B_r_a_c_e  _e_x_p_a_n_s_i_o_n is a mechanism to generate arbitrary strings sharing a
       common prefix and suffix, either of which can be empty.  This mechanism
       is similar to _p_a_t_h_n_a_m_e _e_x_p_a_n_s_i_o_n, but the filenames generated need  not
       exist.   Patterns to be brace expanded are formed from an optional _p_r_e_-
       _a_m_b_l_e, followed by either a series of comma-separated strings or a  se-
       quence  expression  between  a  pair of braces, followed by an optional
       _p_o_s_t_s_c_r_i_p_t.  The preamble is prefixed to each string  contained  within
       the  braces,  and  the  postscript  is  then appended to each resulting
       string, expanding left to right.

       Brace expansions may be nested.  The results of  each  expanded  string
       are not sorted; brace expansion preserves left to right order.  For ex-
       ample, a{{d,c,b}}e expands into "ade ace abe".

       A  sequence  expression  takes the form _x...._y[[...._i_n_c_r]], where _x and _y are
       either integers or single letters, and _i_n_c_r, an optional increment,  is
       an integer.  When integers are supplied, the expression expands to each
       number  between  _x  and  _y,  inclusive.  If either _x or _y begins with a
       zero, each generated term will contain the same number of digits, zero-
       padding where necessary.  When letters are supplied, the expression ex-
       pands to each character lexicographically between _x and  _y,  inclusive,
       using  the  C  locale.  Note that both _x and _y must be of the same type
       (integer or letter).  When the increment is supplied, it is used as the
       difference between each term.  The default increment is 1 or -1 as  ap-
       propriate.

       Brace expansion is performed before any other expansions, and any char-
       acters  special to other expansions are preserved in the result.  It is
       strictly textual.  BBaasshh does not apply any syntactic interpretation  to
       the context of the expansion or the text between the braces.

       A  correctly-formed  brace  expansion must contain unquoted opening and
       closing braces, and at least one unquoted comma or a valid sequence ex-
       pression.  Any incorrectly formed brace expansion is left unchanged.

       A "{" or Q , may be quoted with a backslash to prevent its  being  con-
       sidered  part of a brace expression.  To avoid conflicts with parameter
       expansion, the string "${" is not considered eligible for brace  expan-
       sion, and inhibits brace expansion until the closing "}".

       This construct is typically used as shorthand when the common prefix of
       the strings to be generated is longer than in the above example:

              mkdir /usr/local/src/bash/{old,new,dist,bugs}
       or
              chown root /usr/{ucb/{ex,edit},lib/{ex?.?*,how_ex}}

       Brace  expansion  introduces  a  slight incompatibility with historical
       versions of sshh.  sshh does not treat opening or closing braces  specially
       when  they  appear as part of a word, and preserves them in the output.
       BBaasshh removes braces from words as a  consequence  of  brace  expansion.
       For example, a word entered to sshh as "file{1,2}" appears identically in
       the output.  BBaasshh outputs that word as "file1 file2" after brace expan-
       sion.   Start  bbaasshh  with the ++BB option or disable brace expansion with
       the ++BB option to the sseett command (see SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS below) for
       strict sshh compatibility.

   TTiillddee EExxppaannssiioonn
       If a word begins with an unquoted tilde character  ("~~"),  all  of  the
       characters  preceding  the  first unquoted slash (or all characters, if
       there is no unquoted slash) are considered a _t_i_l_d_e_-_p_r_e_f_i_x.  If none  of
       the  characters  in  the tilde-prefix are quoted, the characters in the
       tilde-prefix following the tilde are treated as a possible _l_o_g_i_n  _n_a_m_e.
       If  this  login name is the null string, the tilde is replaced with the
       value of the shell parameter HHOOMMEE.  If HHOOMMEE is unset, the tilde expands
       to the home directory of the user executing the shell instead.   Other-
       wise,  the  tilde-prefix is replaced with the home directory associated
       with the specified login name.

       If the tilde-prefix is a "~+", the value of the shell variable PPWWDD  re-
       places the tilde-prefix.  If the tilde-prefix is a "~-", the shell sub-
       stitutes  the value of the shell variable OOLLDDPPWWDD, if it is set.  If the
       characters following the tilde in the tilde-prefix consist of a  number
       _N,  optionally prefixed by a "+" or a "-", the tilde-prefix is replaced
       with the corresponding element from the directory stack, as it would be
       displayed by the ddiirrss builtin invoked with the characters following the
       tilde in the tilde-prefix as an argument.  If the characters  following
       the tilde in the tilde-prefix consist of a number without a leading "+"
       or "-", tilde expansion assumes "+".

       The  results  of tilde expansion are treated as if they were quoted, so
       the replacement is not subject to word splitting  and  pathname  expan-
       sion.

       If  the login name is invalid, or the tilde expansion fails, the tilde-
       prefix is unchanged.

       BBaasshh checks each variable assignment for unquoted tilde-prefixes  imme-
       diately  following  a :: or the first ==, and performs tilde expansion in
       these cases.  Consequently, one may use filenames with  tildes  in  as-
       signments  to PPAATTHH, MMAAIILLPPAATTHH, and CCDDPPAATTHH, and the shell assigns the ex-
       panded value.

       BBaasshh also performs tilde expansion on words satisfying  the  conditions
       of variable assignments (as described above under PPAARRAAMMEETTEERRSS) when they
       appear  as arguments to simple commands.  BBaasshh does not do this, except
       for the _d_e_c_l_a_r_a_t_i_o_n commands listed above, when in posix mode.

   PPaarraammeetteerr EExxppaannssiioonn
       The "$$" character introduces parameter expansion, command substitution,
       or arithmetic expansion.  The parameter name or symbol to  be  expanded
       may  be enclosed in braces, which are optional but serve to protect the
       variable to be expanded from characters immediately following it  which
       could be interpreted as part of the name.

       When  braces  are  used, the matching ending brace is the first "}}" not
       escaped by a backslash or within a quoted string, and not within an em-
       bedded arithmetic expansion, command substitution, or parameter  expan-
       sion.

       The basic form of parameter expansion is

       ${_p_a_r_a_m_e_t_e_r}

       which substitutes the value of _p_a_r_a_m_e_t_e_r.  The braces are required when
       _p_a_r_a_m_e_t_e_r  is  a positional parameter with more than one digit, or when
       _p_a_r_a_m_e_t_e_r is followed by a character which is not to be interpreted  as
       part  of  its  name.   The  _p_a_r_a_m_e_t_e_r is a shell parameter as described
       above PPAARRAAMMEETTEERRSS) or an array reference (AArrrraayyss).

       If the first character of _p_a_r_a_m_e_t_e_r is an exclamation  point  (!!),  and
       _p_a_r_a_m_e_t_e_r is not a _n_a_m_e_r_e_f, it introduces a level of indirection.  BBaasshh
       uses the value formed by expanding the rest of _p_a_r_a_m_e_t_e_r as the new _p_a_-
       _r_a_m_e_t_e_r;  this new parameter is then expanded and that value is used in
       the rest of the expansion, rather than the expansion  of  the  original
       _p_a_r_a_m_e_t_e_r.   This is known as _i_n_d_i_r_e_c_t _e_x_p_a_n_s_i_o_n.  The value is subject
       to tilde expansion,  parameter  expansion,  command  substitution,  and
       arithmetic  expansion.   If _p_a_r_a_m_e_t_e_r is a nameref, this expands to the
       name of the parameter referenced by _p_a_r_a_m_e_t_e_r instead of performing the
       complete indirect expansion, for compatibility.  The exceptions to this
       are the expansions of ${!!_p_r_e_f_i_x**} and ${!!_n_a_m_e[_@]} described below.  The
       exclamation point must immediately follow the left brace  in  order  to
       introduce indirection.

       In each of the cases below, _w_o_r_d is subject to tilde expansion, parame-
       ter expansion, command substitution, and arithmetic expansion.

       When not performing substring expansion, using the forms documented be-
       low  (e.g.,  ::--),  bbaasshh  tests  for  a parameter that is unset or null.
       Omitting the colon tests only for a parameter that is unset.

       ${_p_a_r_a_m_e_t_e_r::--_w_o_r_d}
              UUssee DDeeffaauulltt VVaalluueess.  If _p_a_r_a_m_e_t_e_r is unset or null,  the  expan-
              sion  of _w_o_r_d is substituted.  Otherwise, the value of _p_a_r_a_m_e_t_e_r
              is substituted.

       ${_p_a_r_a_m_e_t_e_r::==_w_o_r_d}
              AAssssiiggnn DDeeffaauulltt VVaalluueess.  If _p_a_r_a_m_e_t_e_r is unset or null,  the  ex-
              pansion  of  _w_o_r_d is assigned to _p_a_r_a_m_e_t_e_r, and the expansion is
              the final value of _p_a_r_a_m_e_t_e_r.  Positional parameters and special
              parameters may not be assigned in this way.

       ${_p_a_r_a_m_e_t_e_r::??_w_o_r_d}
              DDiissppllaayy EErrrroorr iiff NNuullll oorr UUnnsseett.  If _p_a_r_a_m_e_t_e_r is null or  unset,
              the shell writes the expansion of _w_o_r_d (or a message to that ef-
              fect if _w_o_r_d is not present) to the standard error and, if it is
              not  interactive,  exits with a non-zero status.  An interactive
              shell does not exit, but does not execute the command associated
              with the expansion.  Otherwise, the value of _p_a_r_a_m_e_t_e_r  is  sub-
              stituted.

       ${_p_a_r_a_m_e_t_e_r::++_w_o_r_d}
              UUssee  AAlltteerrnnaattee VVaalluuee.  If _p_a_r_a_m_e_t_e_r is null or unset, nothing is
              substituted, otherwise the expansion  of  _w_o_r_d  is  substituted.
              The value of _p_a_r_a_m_e_t_e_r is not used.

       ${_p_a_r_a_m_e_t_e_r::_o_f_f_s_e_t}
       ${_p_a_r_a_m_e_t_e_r::_o_f_f_s_e_t::_l_e_n_g_t_h}
              SSuubbssttrriinngg  EExxppaannssiioonn.  Expands to up to _l_e_n_g_t_h characters of the
              value of _p_a_r_a_m_e_t_e_r starting at the character specified  by  _o_f_f_-
              _s_e_t.   If _p_a_r_a_m_e_t_e_r is @@ or **, an indexed array subscripted by @@
              or **, or an associative array name, the results  differ  as  de-
              scribed  below.   If  ::_l_e_n_g_t_h is omitted (the first form above),
              this expands to the substring of the value of _p_a_r_a_m_e_t_e_r starting
              at the character specified by _o_f_f_s_e_t and extending to the end of
              the value.  If _o_f_f_s_e_t is omitted, it is treated as 0.  If _l_e_n_g_t_h
              is omitted, but the colon after _o_f_f_s_e_t is present, it is treated
              as 0.  _l_e_n_g_t_h and _o_f_f_s_e_t are arithmetic expressions (see  AARRIITTHH--
              MMEETTIICC EEVVAALLUUAATTIIOONN below).

              If  _o_f_f_s_e_t  evaluates  to  a number less than zero, the value is
              used as an offset in characters from the end of the value of _p_a_-
              _r_a_m_e_t_e_r.  If _l_e_n_g_t_h evaluates to a number less than zero, it  is
              interpreted as an offset in characters from the end of the value
              of  _p_a_r_a_m_e_t_e_r rather than a number of characters, and the expan-
              sion is the characters between _o_f_f_s_e_t  and  that  result.   Note
              that  a  negative  offset must be separated from the colon by at
              least one space to avoid being confused with the ::-- expansion.

              If _p_a_r_a_m_e_t_e_r is @@ or **, the result is _l_e_n_g_t_h positional  parame-
              ters  beginning  at _o_f_f_s_e_t.  A negative _o_f_f_s_e_t is taken relative
              to one greater than the greatest  positional  parameter,  so  an
              offset of -1 evaluates to the last positional parameter (or 0 if
              there  are  no positional parameters).  It is an expansion error
              if _l_e_n_g_t_h evaluates to a number less than zero.

              If _p_a_r_a_m_e_t_e_r is an indexed array name subscripted by @ or *, the
              result is the _l_e_n_g_t_h members of the array beginning with ${_p_a_r_a_-
              _m_e_t_e_r[_o_f_f_s_e_t]}.  A negative _o_f_f_s_e_t  is  taken  relative  to  one
              greater than the maximum index of the specified array.  It is an
              expansion error if _l_e_n_g_t_h evaluates to a number less than zero.

              Substring expansion applied to an associative array produces un-
              defined results.

              Substring  indexing  is zero-based unless the positional parame-
              ters are used, in which case the indexing starts  at  1  by  de-
              fault.   If _o_f_f_s_e_t is 0, and the positional parameters are used,
              $$00 is prefixed to the list.

       ${!!_p_r_e_f_i_x**}
       ${!!_p_r_e_f_i_x@@}
              NNaammeess mmaattcchhiinngg pprreeffiixx.  Expands to the names of variables  whose
              names begin with _p_r_e_f_i_x, separated by the first character of the
              IIFFSS  special variable.  When _@ is used and the expansion appears
              within double quotes, each variable name expands to  a  separate
              word.

       ${!!_n_a_m_e[_@]}
       ${!!_n_a_m_e[_*]}
              LLiisstt  ooff  aarrrraayy  kkeeyyss.  If _n_a_m_e is an array variable, expands to
              the list of array indices (keys) assigned in _n_a_m_e.  If  _n_a_m_e  is
              not  an  array,  expands to 0 if _n_a_m_e is set and null otherwise.
              When _@ is used and the expansion appears within  double  quotes,
              each key expands to a separate word.

       ${##_p_a_r_a_m_e_t_e_r}
              PPaarraammeetteerr  lleennggtthh.   Substitutes the length in characters of the
              expanded value of _p_a_r_a_m_e_t_e_r.  If _p_a_r_a_m_e_t_e_r is ** or @@, the  value
              substituted  is the number of positional parameters.  If _p_a_r_a_m_e_-
              _t_e_r is an array name subscripted by ** or @@,  the  value  substi-
              tuted  is  the number of elements in the array.  If _p_a_r_a_m_e_t_e_r is
              an indexed array name subscripted by  a  negative  number,  that
              number  is interpreted as relative to one greater than the maxi-
              mum index of _p_a_r_a_m_e_t_e_r, so negative indices count back from  the
              end  of  the  array, and an index of -1 references the last ele-
              ment.

       ${_p_a_r_a_m_e_t_e_r##_w_o_r_d}
       ${_p_a_r_a_m_e_t_e_r####_w_o_r_d}
              RReemmoovvee mmaattcchhiinngg pprreeffiixx ppaatttteerrnn.  The _w_o_r_d is expanded to produce
              a pattern just as in pathname expansion, and matched against the
              expanded value of _p_a_r_a_m_e_t_e_r using the rules described under PPaatt--
              tteerrnn MMaattcchhiinngg below.  If the pattern matches  the  beginning  of
              the  value of _p_a_r_a_m_e_t_e_r, then the result of the expansion is the
              expanded value of _p_a_r_a_m_e_t_e_r with the shortest  matching  pattern
              (the  "#"  case) or the longest matching pattern (the "##" case)
              deleted.  If _p_a_r_a_m_e_t_e_r is @@ or **, the pattern removal  operation
              is  applied to each positional parameter in turn, and the expan-
              sion is the resultant list.  If _p_a_r_a_m_e_t_e_r is an  array  variable
              subscripted  with  @@  or **, the pattern removal operation is ap-
              plied to each member of the array in turn, and the expansion  is
              the resultant list.

       ${_p_a_r_a_m_e_t_e_r%%_w_o_r_d}
       ${_p_a_r_a_m_e_t_e_r%%%%_w_o_r_d}
              RReemmoovvee mmaattcchhiinngg ssuuffffiixx ppaatttteerrnn.  The _w_o_r_d is expanded to produce
              a pattern just as in pathname expansion, and matched against the
              expanded value of _p_a_r_a_m_e_t_e_r using the rules described under PPaatt--
              tteerrnn  MMaattcchhiinngg below.  If the pattern matches a trailing portion
              of the expanded value of _p_a_r_a_m_e_t_e_r, then the result of  the  ex-
              pansion  is  the  expanded  value of _p_a_r_a_m_e_t_e_r with the shortest
              matching pattern (the "%" case) or the longest matching  pattern
              (the  "%%"  case)  deleted.  If _p_a_r_a_m_e_t_e_r is @@ or **, the pattern
              removal operation is applied to  each  positional  parameter  in
              turn,  and the expansion is the resultant list.  If _p_a_r_a_m_e_t_e_r is
              an array variable subscripted with @@ or **, the  pattern  removal
              operation  is  applied  to each member of the array in turn, and
              the expansion is the resultant list.

       ${_p_a_r_a_m_e_t_e_r//_p_a_t_t_e_r_n//_s_t_r_i_n_g}
       ${_p_a_r_a_m_e_t_e_r////_p_a_t_t_e_r_n//_s_t_r_i_n_g}
       ${_p_a_r_a_m_e_t_e_r//##_p_a_t_t_e_r_n//_s_t_r_i_n_g}
       ${_p_a_r_a_m_e_t_e_r//%%_p_a_t_t_e_r_n//_s_t_r_i_n_g}
              PPaatttteerrnn ssuubbssttiittuuttiioonn.  The _p_a_t_t_e_r_n is expanded to produce a pat-
              tern and matched against the expanded value of _p_a_r_a_m_e_t_e_r as  de-
              scribed under PPaatttteerrnn MMaattcchhiinngg below.  The longest match of _p_a_t_-
              _t_e_r_n  in the expanded value is replaced with _s_t_r_i_n_g.  _s_t_r_i_n_g un-
              dergoes  tilde  expansion,  parameter  and  variable  expansion,
              arithmetic  expansion,  command  and  process  substitution, and
              quote removal.

              In the first form above, only the first match is  replaced.   If
              there are two slashes separating _p_a_r_a_m_e_t_e_r and _p_a_t_t_e_r_n (the sec-
              ond  form  above),  all  matches  of  _p_a_t_t_e_r_n  are replaced with
              _s_t_r_i_n_g.  If _p_a_t_t_e_r_n is preceded by ## (the third form above),  it
              must  match at the beginning of the expanded value of _p_a_r_a_m_e_t_e_r.
              If _p_a_t_t_e_r_n is preceded by %% (the fourth  form  above),  it  must
              match at the end of the expanded value of _p_a_r_a_m_e_t_e_r.

              If  the  expansion  of  _s_t_r_i_n_g  is  null, matches of _p_a_t_t_e_r_n are
              deleted and the // following _p_a_t_t_e_r_n may be omitted.

              If the ppaattssuubb__rreeppllaacceemmeenntt shell option is enabled  using  sshhoopptt,
              any  unquoted  instances  of  &&  in _s_t_r_i_n_g are replaced with the
              matching portion of _p_a_t_t_e_r_n.

              Quoting any part of _s_t_r_i_n_g inhibits replacement in the expansion
              of the quoted portion, including replacement strings  stored  in
              shell  variables.   Backslash escapes && in _s_t_r_i_n_g; the backslash
              is removed in order to permit a literal  &&  in  the  replacement
              string.   Backslash  can  also be used to escape a backslash; \\\\
              results in a literal backslash in the replacement.  Users should
              take care if _s_t_r_i_n_g is double-quoted to avoid unwanted  interac-
              tions  between the backslash and double-quoting, since backslash
              has special meaning within double quotes.  Pattern  substitution
              performs  the check for unquoted && after expanding _s_t_r_i_n_g; shell
              programmers should quote any occurrences of && they  want  to  be
              taken literally in the replacement and ensure any instances of &&
              they want to be replaced are unquoted.

              Like  the  pattern  removal operators, double quotes surrounding
              the replacement string quote the expanded characters, while dou-
              ble quotes enclosing the entire parameter substitution  do  not,
              since  the expansion is performed in a context that doesn't take
              any enclosing double quotes into account.

              If the nnooccaasseemmaattcchh shell option is enabled, the  match  is  per-
              formed without regard to the case of alphabetic characters.

              If _p_a_r_a_m_e_t_e_r is @@ or **, the substitution operation is applied to
              each  positional parameter in turn, and the expansion is the re-
              sultant list.  If _p_a_r_a_m_e_t_e_r is  an  array  variable  subscripted
              with  @@ or **, the substitution operation is applied to each mem-
              ber of the array in turn, and the  expansion  is  the  resultant
              list.

       ${_p_a_r_a_m_e_t_e_r^^_p_a_t_t_e_r_n}
       ${_p_a_r_a_m_e_t_e_r^^^^_p_a_t_t_e_r_n}
       ${_p_a_r_a_m_e_t_e_r,,_p_a_t_t_e_r_n}
       ${_p_a_r_a_m_e_t_e_r,,,,_p_a_t_t_e_r_n}
              CCaassee  mmooddiiffiiccaattiioonn.   This expansion modifies the case of alpha-
              betic characters in _p_a_r_a_m_e_t_e_r.  First, the _p_a_t_t_e_r_n  is  expanded
              to  produce a pattern as described below under PPaatttteerrnn MMaattcchhiinngg.
              BBaasshh then examines characters in the expanded value of _p_a_r_a_m_e_t_e_r
              against _p_a_t_t_e_r_n as described below.  If a character matches  the
              pattern,  its case is converted.  The pattern should not attempt
              to match more than one character.

              Using "^" converts lowercase letters matching _p_a_t_t_e_r_n to  upper-
              case; "," converts matching uppercase letters to lowercase.  The
              ^^  and  ,,  variants  examine the first character in the expanded
              value and convert its case if it matches _p_a_t_t_e_r_n; the ^^^^ and  ,,,,
              variants  examine  all characters in the expanded value and con-
              vert each one that matches _p_a_t_t_e_r_n.  If _p_a_t_t_e_r_n is  omitted,  it
              is treated like a ??, which matches every character.

              If  _p_a_r_a_m_e_t_e_r  is @@ or **, the case modification operation is ap-
              plied to each positional parameter in turn, and the expansion is
              the resultant list.  If _p_a_r_a_m_e_t_e_r  is  an  array  variable  sub-
              scripted with @@ or **, the case modification operation is applied
              to  each  member  of the array in turn, and the expansion is the
              resultant list.

       ${_p_a_r_a_m_e_t_e_r@@_o_p_e_r_a_t_o_r}
              PPaarraammeetteerr ttrraannssffoorrmmaattiioonn.  The expansion is either a transforma-
              tion of the value of _p_a_r_a_m_e_t_e_r or  information  about  _p_a_r_a_m_e_t_e_r
              itself,  depending on the value of _o_p_e_r_a_t_o_r.  Each _o_p_e_r_a_t_o_r is a
              single letter:
              UU      The expansion is a string that is the value of  _p_a_r_a_m_e_t_e_r
                     with  lowercase alphabetic characters converted to upper-
                     case.
              uu      The expansion is a string that is the value of  _p_a_r_a_m_e_t_e_r
                     with the first character converted to uppercase, if it is
                     alphabetic.
              LL      The  expansion is a string that is the value of _p_a_r_a_m_e_t_e_r
                     with uppercase alphabetic characters converted to  lower-
                     case.
              QQ      The  expansion is a string that is the value of _p_a_r_a_m_e_t_e_r
                     quoted in a format that can be reused as input.
              EE      The expansion is a string that is the value of  _p_a_r_a_m_e_t_e_r
                     with  backslash  escape  sequences  expanded  as with the
                     $$''...'' quoting mechanism.
              PP      The expansion is a string that is the result of expanding
                     the value of _p_a_r_a_m_e_t_e_r as if it were a prompt string (see
                     PPRROOMMPPTTIINNGG below).
              AA      The expansion is a string in the form  of  an  assignment
                     statement  or  ddeeccllaarree command that, if evaluated, recre-
                     ates _p_a_r_a_m_e_t_e_r with its attributes and value.
              KK      Produces a possibly-quoted version of the value of  _p_a_r_a_-
                     _m_e_t_e_r,  except  that  it prints the values of indexed and
                     associative arrays as  a  sequence  of  quoted  key-value
                     pairs (see AArrrraayyss above).  The keys and values are quoted
                     in a format that can be reused as input.
              aa      The  expansion is a string consisting of flag values rep-
                     resenting _p_a_r_a_m_e_t_e_r's attributes.
              kk      Like the K transformation, but expands the keys and  val-
                     ues  of  indexed and associative arrays to separate words
                     after word splitting.

              If _p_a_r_a_m_e_t_e_r is @@ or **, the operation is applied to  each  posi-
              tional  parameter  in  turn,  and the expansion is the resultant
              list.  If _p_a_r_a_m_e_t_e_r is an array variable subscripted with  @@  or
              **, the operation is applied to each member of the array in turn,
              and the expansion is the resultant list.

              The  result  of  the  expansion is subject to word splitting and
              pathname expansion as described below.

   CCoommmmaanndd SSuubbssttiittuuttiioonn
       _C_o_m_m_a_n_d _s_u_b_s_t_i_t_u_t_i_o_n allows the output of a command to replace the com-
       mand itself.  There are two standard forms:

              $$((_c_o_m_m_a_n_d))
       or (deprecated)
              ``_c_o_m_m_a_n_d``.

       BBaasshh performs the expansion by executing _c_o_m_m_a_n_d in a subshell environ-
       ment and replacing the command substitution with the standard output of
       the command, with any trailing newlines deleted.  Embedded newlines are
       not deleted, but they may be removed during word splitting.   The  com-
       mand  substitution  $$((ccaatt  _f_i_l_e))  can be replaced by the equivalent but
       faster $$((<< _f_i_l_e)).

       With the old-style backquote form of  substitution,  backslash  retains
       its  literal  meaning  except  when  followed by $$, ``, or \\.  The first
       backquote not preceded by a backslash terminates the command  substitu-
       tion.   When  using  the  $(_c_o_m_m_a_n_d)  form,  all characters between the
       parentheses make up the command; none are treated specially.

       There is an alternate form of command substitution:

              $${{_c _c_o_m_m_a_n_d;;}}

       which executes _c_o_m_m_a_n_d in the current execution  environment  and  cap-
       tures its output, again with trailing newlines removed.

       The character _c following the open brace must be a space, tab, newline,
       or  ||,  and the close brace must be in a position where a reserved word
       may appear (i.e., preceded by a command terminator such as  semicolon).
       BBaasshh allows the close brace to be joined to the remaining characters in
       the  word without being followed by a shell metacharacter as a reserved
       word would usually require.

       Any side effects of _c_o_m_m_a_n_d take effect immediately in the current exe-
       cution environment and persist in the  current  environment  after  the
       command completes (e.g., the eexxiitt builtin exits the shell).

       This  type of command substitution superficially resembles executing an
       unnamed shell function: local variables are created  as  when  a  shell
       function  is  executing,  and the rreettuurrnn builtin forces _c_o_m_m_a_n_d to com-
       plete; however, the rest of the execution  environment,  including  the
       positional parameters, is shared with the caller.

       If  the  first character following the open brace is a ||, the construct
       expands to the value of the RREEPPLLYY shell  variable  after  _c_o_m_m_a_n_d  exe-
       cutes,  without removing any trailing newlines, and the standard output
       of _c_o_m_m_a_n_d remains the same as in the calling shell.  BBaasshh creates  RREE--
       PPLLYY as an initially-unset local variable when _c_o_m_m_a_n_d executes, and re-
       stores  RREEPPLLYY to the value it had before the command substitution after
       _c_o_m_m_a_n_d completes, as with any local variable.

       Command substitutions may be nested.  To nest when using the backquoted
       form, escape the inner backquotes with backslashes.

       If the substitution appears within double quotes, bbaasshh does not perform
       word splitting and pathname expansion on the results.

   AArriitthhmmeettiicc EExxppaannssiioonn
       Arithmetic expansion evaluates an arithmetic expression and substitutes
       the result.  The format for arithmetic expansion is:

              $$((((_e_x_p_r_e_s_s_i_o_n))))

       The _e_x_p_r_e_s_s_i_o_n undergoes the same expansions as if it were within  dou-
       ble quotes, but unescaped double quote characters in _e_x_p_r_e_s_s_i_o_n are not
       treated  specially  and  are removed.  All tokens in the expression un-
       dergo parameter and variable expansion, command substitution, and quote
       removal.  The result is treated as  the  arithmetic  expression  to  be
       evaluated.   Since  the  way Bash handles double quotes can potentially
       result in empty strings, arithmetic expansion treats those  as  expres-
       sions that evaluate to 0.  Arithmetic expansions may be nested.

       The  evaluation  is performed according to the rules listed below under
       AARRIITTHHMMEETTIICC EEVVAALLUUAATTIIOONN.  If _e_x_p_r_e_s_s_i_o_n is invalid, bbaasshh prints a message
       to standard error indicating failure, does not  perform  the  substitu-
       tion, and does not execute the command associated with the expansion.

   PPrroocceessss SSuubbssttiittuuttiioonn
       _P_r_o_c_e_s_s  _s_u_b_s_t_i_t_u_t_i_o_n allows a process's input or output to be referred
       to using a filename.  It takes the form of  <<((_l_i_s_t))  or  >>((_l_i_s_t)).   The
       process  _l_i_s_t is run asynchronously, and its input or output appears as
       a filename.  This filename is passed as an argument to the current com-
       mand as the result of the expansion.

       If the >>((_l_i_s_t)) form is used, writing to the  file  provides  input  for
       _l_i_s_t.  If the <<((_l_i_s_t)) form is used, reading the file obtains the output
       of _l_i_s_t.  No space may appear between the << or >> and the left parenthe-
       sis, otherwise the construct would be interpreted as a redirection.

       Process  substitution  is supported on systems that support named pipes
       (_F_I_F_O_s) or the _/_d_e_v_/_f_d method of naming open files.

       When available, process substitution is performed  simultaneously  with
       parameter  and variable expansion, command substitution, and arithmetic
       expansion.

   WWoorrdd SSpplliittttiinngg
       The shell scans the results of parameter expansion,  command  substitu-
       tion,  and arithmetic expansion that did not occur within double quotes
       for _w_o_r_d _s_p_l_i_t_t_i_n_g.  Words that were not expanded are not split.

       The shell treats each character of IIFFSS as a delimiter, and  splits  the
       results  of  the  other expansions into words using these characters as
       field terminators.

       An _I_F_S _w_h_i_t_e_s_p_a_c_e character is whitespace as defined above (see DDeeffiinnii--
       ttiioonnss) that appears in the value of IIFFSS.  Space, tab, and  newline  are
       always  considered IFS whitespace, even if they don't appear in the lo-
       cale's ssppaaccee category.

       If  IIFFSS  is  unset,  field  splitting  acts  as  if  its   value   were
       <<ssppaaccee>><<ttaabb>><<nneewwlliinnee>>,  and  treats these characters as IFS whitespace.
       If the value of IIFFSS is null, no word  splitting  occurs,  but  implicit
       null arguments (see below) are still removed.

       Word  splitting  begins by removing sequences of IFS whitespace charac-
       ters from the beginning and end of the results of the  previous  expan-
       sions, then splits the remaining words.

       If  the value of IIFFSS consists solely of IFS whitespace, any sequence of
       IFS whitespace characters delimits a field,  so  a  field  consists  of
       characters that are not unquoted IFS whitespace, and null fields result
       only from quoting.

       If  IIFFSS  contains a non-whitespace character, then any character in the
       value of IIFFSS that is not IFS whitespace, along with  any  adjacent  IFS
       whitespace characters, delimits a field.  This means that adjacent non-
       IFS-whitespace  delimiters  produce  a  null  field.  A sequence of IFS
       whitespace characters also delimits a field.

       Explicit null arguments ("""" or '''') are retained and passed to  commands
       as empty strings.  Unquoted implicit null arguments, resulting from the
       expansion  of parameters that have no values, are removed.  Expanding a
       parameter with no value within double quotes  produces  a  null  field,
       which is retained and passed to a command as an empty string.

       When  a  quoted null argument appears as part of a word whose expansion
       is non-null, word splitting removes the null argument portion,  leaving
       the  non-null  expansion.   That is, the word "-d''" becomes "-d" after
       word splitting and null argument removal.

   PPaatthhnnaammee EExxppaannssiioonn
       After word splitting, unless the --ff option has  been  set,  bbaasshh  scans
       each  word  for the characters **, ??, and [[.  If one of these characters
       appears, and is not quoted, then the word is regarded as a _p_a_t_t_e_r_n, and
       replaced with a sorted list of filenames matching the pattern (see PPaatt--
       tteerrnn MMaattcchhiinngg below) subject to the value of the GGLLOOBBSSOORRTT  shell  vari-
       able.

       If  no  matching  filenames are found, and the shell option nnuullllgglloobb is
       not enabled, the word is left unchanged.  If  the  nnuullllgglloobb  option  is
       set,  and  no  matches are found, the word is removed.  If the ffaaiillgglloobb
       shell option is set, and no matches are found,  bbaasshh  prints  an  error
       message  and does not execute the command.  If the shell option nnooccaassee--
       gglloobb is enabled, the match is performed without regard to the  case  of
       alphabetic characters.

       When a pattern is used for pathname expansion, the character "." at the
       start  of  a  name or immediately following a slash must be matched ex-
       plicitly, unless the shell option ddoottgglloobb is set.  In  order  to  match
       the  filenames  _. and _._., the pattern must begin with "." (for example,
       ".?"), even if ddoottgglloobb is set.  If the gglloobbsskkiippddoottss shell option is en-
       abled, the filenames _. and _._. never match, even if the  pattern  begins
       with  a  ".".   When  not  matching pathnames, the "." character is not
       treated specially.

       When matching a pathname, the slash character must  always  be  matched
       explicitly by a slash in the pattern, but in other matching contexts it
       can  be matched by a special pattern character as described below under
       PPaatttteerrnn MMaattcchhiinngg.

       See the description of sshhoopptt below under SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS  for  a
       description  of  the  nnooccaasseegglloobb, nnuullllgglloobb, gglloobbsskkiippddoottss, ffaaiillgglloobb, and
       ddoottgglloobb shell options.

       The GGLLOOBBIIGGNNOORREE shell variable may be used to restrict the set  of  file
       names  matching  a  _p_a_t_t_e_r_n.   If GGLLOOBBIIGGNNOORREE is set, each matching file
       name that also matches one of the patterns  in  GGLLOOBBIIGGNNOORREE  is  removed
       from  the list of matches.  If the nnooccaasseegglloobb option is set, the match-
       ing against the patterns in GGLLOOBBIIGGNNOORREE is performed without  regard  to
       case.  The filenames _. and _._. are always ignored when GGLLOOBBIIGGNNOORREE is set
       and  not null.  However, setting GGLLOOBBIIGGNNOORREE to a non-null value has the
       effect of enabling the ddoottgglloobb shell option, so all other filenames be-
       ginning with a "." match.  To get the old behavior  of  ignoring  file-
       names  beginning  with a ".", make ".*"  one of the patterns in GGLLOOBBIIGG--
       NNOORREE.  The ddoottgglloobb option is disabled when GGLLOOBBIIGGNNOORREE  is  unset.   The
       GGLLOOBBIIGGNNOORREE pattern matching honors the setting of the eexxttgglloobb shell op-
       tion.

       The  value  of  the GGLLOOBBSSOORRTT shell variable controls how the results of
       pathname expansion are sorted, as described  above  under  SShheellll  VVaarrii--
       aabblleess.

       PPaatttteerrnn MMaattcchhiinngg

       Any character that appears in a pattern, other than the special pattern
       characters  described below, matches itself.  The NUL character may not
       occur in a pattern.  A backslash escapes the following  character;  the
       escaping  backslash  is  discarded  when matching.  The special pattern
       characters must be quoted if they are to be matched literally.

       The special pattern characters have the following meanings:

              **      Matches any string, including the null string.  When  the
                     gglloobbssttaarr  shell  option  is  enabled,  and ** is used in a
                     pathname expansion context, two adjacent  **s  used  as  a
                     single  pattern match all files and zero or more directo-
                     ries and subdirectories.  If followed by a //,  two  adja-
                     cent **s match only directories and subdirectories.
              ??      Matches any single character.
              [[...]]  Matches  any  one  of the characters enclosed between the
                     brackets.  This is known  as  a  _b_r_a_c_k_e_t  _e_x_p_r_e_s_s_i_o_n  and
                     matches  a  single character.  A pair of characters sepa-
                     rated by a hyphen denotes a _r_a_n_g_e _e_x_p_r_e_s_s_i_o_n; any charac-
                     ter that falls between those two  characters,  inclusive,
                     using the current locale's collating sequence and charac-
                     ter set, matches.  If the first character following the [[
                     is  a  !!   or a ^^ then any character not within the range
                     matches.  To match a --, include it as the first  or  last
                     character  in  the  set.  To match a ]], include it as the
                     first character in the set.

                     The sorting order of characters in range expressions, and
                     the characters included in the range, are  determined  by
                     the  current  locale  and the values of the LLCC__CCOOLLLLAATTEE or
                     LLCC__AALLLL shell variables, if set.   To  obtain  the  tradi-
                     tional  interpretation  of range expressions, where [[aa--dd]]
                     is equivalent to [[aabbccdd]], set the value of the  LLCC__CCOOLLLLAATTEE
                     or  LLCC__AALLLL  shell variables to CC, or enable the gglloobbaassccii--
                     iirraannggeess shell option.

                     Within a bracket expression,  _c_h_a_r_a_c_t_e_r  _c_l_a_s_s_e_s  can  be
                     specified  using the syntax [[::_c_l_a_s_s::]], where _c_l_a_s_s is one
                     of the following classes defined in the POSIX standard:

                     aallnnuumm aallpphhaa aasscciiii bbllaannkk ccnnttrrll  ddiiggiitt  ggrraapphh  lloowweerr  pprriinntt
                     ppuunncctt ssppaaccee uuppppeerr wwoorrdd xxddiiggiitt

                     A character class matches any character belonging to that
                     class.  The wwoorrdd character class matches letters, digits,
                     and the character _.

                     Within  a bracket expression, an _e_q_u_i_v_a_l_e_n_c_e _c_l_a_s_s can be
                     specified using the syntax [[==_c==]], which matches all char-
                     acters with the same collation weight (as defined by  the
                     current locale) as the character _c.

                     Within   a  bracket  expression,  the  syntax  [[.._s_y_m_b_o_l..]]
                     matches the collating symbol _s_y_m_b_o_l.

       If the eexxttgglloobb shell option is enabled using  the  sshhoopptt  builtin,  the
       shell  recognizes  several extended pattern matching operators.  In the
       following description, a _p_a_t_t_e_r_n_-_l_i_s_t is a list of one or more patterns
       separated by a ||.  Composite patterns may be formed using one  or  more
       of the following sub-patterns:

              ??((_p_a_t_t_e_r_n_-_l_i_s_t))
                     Matches zero or one occurrence of the given patterns.
              **((_p_a_t_t_e_r_n_-_l_i_s_t))
                     Matches zero or more occurrences of the given patterns.
              ++((_p_a_t_t_e_r_n_-_l_i_s_t))
                     Matches one or more occurrences of the given patterns.
              @@((_p_a_t_t_e_r_n_-_l_i_s_t))
                     Matches one of the given patterns.
              !!((_p_a_t_t_e_r_n_-_l_i_s_t))
                     Matches anything except one of the given patterns.

       The eexxttgglloobb option changes the behavior of the parser, since the paren-
       theses  are  normally  treated as operators with syntactic meaning.  To
       ensure that extended matching patterns are parsed correctly, make  sure
       that  eexxttgglloobb  is enabled before parsing constructs containing the pat-
       terns, including shell functions and command substitutions.

       When matching filenames, the ddoottgglloobb shell option determines the set of
       filenames that are tested: when ddoottgglloobb is enabled, the  set  of  file-
       names  includes  all  files  beginning  with  ".", but _. and _._. must be
       matched by a pattern or sub-pattern that begins with a dot; when it  is
       disabled, the set does not include any filenames beginning with "." un-
       less the pattern or sub-pattern begins with a ".".  If the gglloobbsskkiippddoottss
       shell  option  is  enabled,  the filenames _. and _._. never appear in the
       set.  As above, "." only has a special meaning when matching filenames.

       Complicated extended pattern matching against long strings is slow, es-
       pecially when the patterns contain alternations and the strings contain
       multiple matches.  Using separate matches against shorter  strings,  or
       using arrays of strings instead of a single long string, may be faster.

   QQuuoottee RReemmoovvaall
       After the preceding expansions, all unquoted occurrences of the charac-
       ters  \\,  '', and "" that did not result from one of the above expansions
       are removed.

RREEDDIIRREECCTTIIOONN
       Before a command is executed, its input and output  may  be  _r_e_d_i_r_e_c_t_e_d
       using  a special notation interpreted by the shell.  _R_e_d_i_r_e_c_t_i_o_n allows
       commands' file handles to be duplicated, opened, closed, made to  refer
       to different files, and can change the files the command reads from and
       writes  to.   When used with the eexxeecc builtin, redirections modify file
       handles in the current  shell  execution  environment.   The  following
       redirection  operators  may  precede or appear anywhere within a _s_i_m_p_l_e
       _c_o_m_m_a_n_d or may follow a _c_o_m_m_a_n_d.  Redirections are processed in the or-
       der they appear, from left to right.

       Each redirection that may be preceded by a file descriptor  number  may
       instead be preceded by a word of the form {_v_a_r_n_a_m_e}.  In this case, for
       each  redirection  operator  except  >>&&-- and <<&&--, the shell allocates a
       file descriptor greater than or equal to 10 and assigns it to  _v_a_r_n_a_m_e.
       If {_v_a_r_n_a_m_e} precedes >>&&-- or <<&&--, the value of _v_a_r_n_a_m_e defines the file
       descriptor  to  close.   If {_v_a_r_n_a_m_e} is supplied, the redirection per-
       sists beyond the scope of the command, which allows the shell  program-
       mer to manage the file descriptor's lifetime manually without using the
       eexxeecc builtin.  The vvaarrrreeddiirr__cclloossee shell option manages this behavior.

       In  the  following descriptions, if the file descriptor number is omit-
       ted, and the first character of the redirection operator  is  "<",  the
       redirection  refers  to the standard input (file descriptor 0).  If the
       first character of the redirection operator  is  ">",  the  redirection
       refers to the standard output (file descriptor 1).

       The  _w_o_r_d  following the redirection operator in the following descrip-
       tions, unless otherwise noted, is subjected to brace  expansion,  tilde
       expansion,  parameter  and  variable  expansion,  command substitution,
       arithmetic expansion,  quote  removal,  pathname  expansion,  and  word
       splitting.  If it expands to more than one word, bbaasshh reports an error.

       The order of redirections is significant.  For example, the command

              ls >> dirlist 2>>&&1

       directs  both  standard  output and standard error to the file _d_i_r_l_i_s_t,
       while the command

              ls 2>>&&1 >> dirlist

       directs only the standard output to file _d_i_r_l_i_s_t, because the  standard
       error  was  directed  to the standard output before the standard output
       was redirected to _d_i_r_l_i_s_t.

       BBaasshh handles several filenames specially when they are used in redirec-
       tions, as described in the following table.  If the operating system on
       which bbaasshh is running provides these special  files,  bbaasshh  uses  them;
       otherwise  it  emulates them internally with the behavior described be-
       low.

              //ddeevv//ffdd//_f_d
                     If _f_d is a valid integer, duplicate file descriptor _f_d.
              //ddeevv//ssttddiinn
                     File descriptor 0 is duplicated.
              //ddeevv//ssttddoouutt
                     File descriptor 1 is duplicated.
              //ddeevv//ssttddeerrrr
                     File descriptor 2 is duplicated.
              //ddeevv//ttccpp//_h_o_s_t//_p_o_r_t
                     If _h_o_s_t is a valid hostname or Internet address, and _p_o_r_t
                     is an integer port number or service name, bbaasshh  attempts
                     to open the corresponding TCP socket.
              //ddeevv//uuddpp//_h_o_s_t//_p_o_r_t
                     If _h_o_s_t is a valid hostname or Internet address, and _p_o_r_t
                     is  an integer port number or service name, bbaasshh attempts
                     to open the corresponding UDP socket.

       A failure to open or create a file causes the redirection to fail.

       Redirections using file descriptors greater than 9 should be used  with
       care,  as they may conflict with file descriptors the shell uses inter-
       nally.

   RReeddiirreeccttiinngg IInnppuutt
       Redirecting input opens the file whose name results from the  expansion
       of  _w_o_r_d  for reading on file descriptor _n, or the standard input (file
       descriptor 0) if _n is not specified.

       The general format for redirecting input is:

              [_n]<<_w_o_r_d

   RReeddiirreeccttiinngg OOuuttppuutt
       Redirecting output opens the file whose name results from the expansion
       of _w_o_r_d for writing on file descriptor _n, or the standard output  (file
       descriptor  1) if _n is not specified.  If the file does not exist it is
       created; if it does exist it is truncated to zero size.

       The general format for redirecting output is:

              [_n]>>_w_o_r_d

       If the redirection operator is >>, and the nnoocclloobbbbeerr option to  the  sseett
       builtin  command  has  been  enabled, the redirection fails if the file
       whose name results from the expansion of _w_o_r_d exists and is  a  regular
       file.   If  the redirection operator is >>||, or the redirection operator
       is >> and the nnoocclloobbbbeerr option to the sseett builtin is not  enabled,  bbaasshh
       attempts the redirection even if the file named by _w_o_r_d exists.

   AAppppeennddiinngg RReeddiirreecctteedd OOuuttppuutt
       Redirecting  output  in  this fashion opens the file whose name results
       from the expansion of _w_o_r_d for appending on file descriptor _n,  or  the
       standard output (file descriptor 1) if _n is not specified.  If the file
       does not exist it is created.

       The general format for appending output is:

              [_n]>>>>_w_o_r_d

   RReeddiirreeccttiinngg SSttaannddaarrdd OOuuttppuutt aanndd SSttaannddaarrdd EErrrroorr
       This  construct  redirects both the standard output (file descriptor 1)
       and the standard error output (file descriptor 2)  to  the  file  whose
       name is the expansion of _w_o_r_d.

       There  are two formats for redirecting standard output and standard er-
       ror:

              &&>>_w_o_r_d
       and
              >>&&_w_o_r_d

       Of the two forms, the first is preferred.  This is semantically equiva-
       lent to

              >>_w_o_r_d 2>>&&1

       When using the second form, _w_o_r_d may not expand to a number or  --.   If
       it  does,  other  redirection operators apply (see DDuupplliiccaattiinngg FFiillee DDee--
       ssccrriippttoorrss below) for compatibility reasons.

   AAppppeennddiinngg SSttaannddaarrdd OOuuttppuutt aanndd SSttaannddaarrdd EErrrroorr
       This construct appends both the standard output (file descriptor 1) and
       the standard error output (file descriptor 2) to the file whose name is
       the expansion of _w_o_r_d.

       The format for appending standard output and standard error is:

              &&>>>>_w_o_r_d

       This is semantically equivalent to

              >>>>_w_o_r_d 2>>&&1

       (see DDuupplliiccaattiinngg FFiillee DDeessccrriippttoorrss below).

   HHeerree DDooccuummeennttss
       This type of redirection instructs the shell to  read  input  from  the
       current source until it reads a line containing only _d_e_l_i_m_i_t_e_r (with no
       trailing  blanks).   All of the lines read up to that point then become
       the standard input (or file descriptor _n if _n is specified) for a  com-
       mand.

       The format of here-documents is:

              [_n]<<<<[--]_w_o_r_d
                      _h_e_r_e_-_d_o_c_u_m_e_n_t
              _d_e_l_i_m_i_t_e_r

       The  shell  does  not perform parameter and variable expansion, command
       substitution, arithmetic expansion, or pathname expansion on _w_o_r_d.

       If any part of _w_o_r_d is quoted, the _d_e_l_i_m_i_t_e_r is the result of quote re-
       moval on _w_o_r_d, and the lines in the here-document are not expanded.  If
       _w_o_r_d is unquoted, the _d_e_l_i_m_i_t_e_r is _w_o_r_d itself, and  the  here-document
       text  is  treated similarly to a double-quoted string: all lines of the
       here-document are subjected to parameter expansion,  command  substitu-
       tion,  and  arithmetic  expansion, the character sequence \\<<nneewwlliinnee>> is
       treated literally, and \\ must be used to quote the characters \\, $$, and
       ``; however, double quote characters have no special meaning.

       If the redirection operator is <<<<--, then the shell strips  all  leading
       tab  characters  from  input  lines  and the line containing _d_e_l_i_m_i_t_e_r.
       This allows here-documents within shell scripts to  be  indented  in  a
       natural fashion.

       If the delimiter is not quoted, the \\<<nneewwlliinnee>> sequence is treated as a
       line  continuation:  the two lines are joined and the backslash-newline
       is removed.  This happens while reading the here-document,  before  the
       check for the ending delimiter, so joined lines can form the end delim-
       iter.

   HHeerree SSttrriinnggss
       A variant of here documents, the format is:

              [_n]<<<<<<_w_o_r_d

       The  _w_o_r_d  undergoes tilde expansion, parameter and variable expansion,
       command substitution, arithmetic expansion, and quote  removal.   Path-
       name  expansion  and  word  splitting are not performed.  The result is
       supplied as a single string, with a newline appended, to the command on
       its standard input (or file descriptor _n if _n is specified).

   DDuupplliiccaattiinngg FFiillee DDeessccrriippttoorrss
       The redirection operator

              [_n]<<&&_w_o_r_d

       is used to duplicate input file descriptors.  If _w_o_r_d expands to one or
       more digits, file descriptor _n is made to be a copy of  that  file  de-
       scriptor.  It is a redirection error if the digits in _w_o_r_d do not spec-
       ify a file descriptor open for input.  If _w_o_r_d evaluates to --, file de-
       scriptor  _n  is  closed.  If _n is not specified, this uses the standard
       input (file descriptor 0).

       The operator

              [_n]>>&&_w_o_r_d

       is used similarly to duplicate output file descriptors.  If  _n  is  not
       specified,  this uses the standard output (file descriptor 1).  It is a
       redirection error if the digits in _w_o_r_d do not specify a file  descrip-
       tor  open  for  output.   If  _w_o_r_d evaluates to --, file descriptor _n is
       closed.  As a special case, if _n is omitted, and _w_o_r_d does  not  expand
       to  one  or  more  digits  or --, this redirects the standard output and
       standard error as described previously.

   MMoovviinngg FFiillee DDeessccrriippttoorrss
       The redirection operator

              [_n]<<&&_d_i_g_i_t--

       moves the file descriptor _d_i_g_i_t to file descriptor _n, or  the  standard
       input (file descriptor 0) if _n is not specified.  _d_i_g_i_t is closed after
       being duplicated to _n.

       Similarly, the redirection operator

              [_n]>>&&_d_i_g_i_t--

       moves  the  file descriptor _d_i_g_i_t to file descriptor _n, or the standard
       output (file descriptor 1) if _n is not specified.

   OOppeenniinngg FFiillee DDeessccrriippttoorrss ffoorr RReeaaddiinngg aanndd WWrriittiinngg
       The redirection operator

              [_n]<<>>_w_o_r_d

       opens the file whose name is the expansion of _w_o_r_d for both reading and
       writing on file descriptor _n, or on file descriptor 0 if _n is not spec-
       ified.  If the file does not exist, it is created.

AALLIIAASSEESS
       _A_l_i_a_s_e_s allow a string to be substituted for a word that is in a  posi-
       tion  in  the input where it can be the first word of a simple command.
       Aliases have names and corresponding values that are set and unset  us-
       ing  the aalliiaass and uunnaalliiaass builtin commands (see SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS
       below).

       If the shell reads an unquoted word in the right  position,  it  checks
       the  word to see if it matches an alias name.  If it matches, the shell
       replaces the word with the alias value, and reads that value as  if  it
       had been read instead of the word.  The shell doesn't look at any char-
       acters following the word before attempting alias substitution.

       The  characters  //,  $$, ``, and == and any of the shell _m_e_t_a_c_h_a_r_a_c_t_e_r_s or
       quoting characters listed above may not appear in an alias  name.   The
       replacement  text  may  contain  any valid shell input, including shell
       metacharacters.  The first word of the replacement text is  tested  for
       aliases, but a word that is identical to an alias being expanded is not
       expanded a second time.  This means that one may alias llss to llss --FF, for
       instance,  and  bbaasshh does not try to recursively expand the replacement
       text.

       If the last character of the alias value is a _b_l_a_n_k, the  shell  checks
       the next command word following the alias for alias expansion.

       Aliases are created and listed with the aalliiaass command, and removed with
       the uunnaalliiaass command.

       There  is no mechanism for using arguments in the replacement text.  If
       arguments are needed, use a shell function (see  FFUUNNCCTTIIOONNSS  below)  in-
       stead.

       Aliases  are not expanded when the shell is not interactive, unless the
       eexxppaanndd__aalliiaasseess shell option is set using sshhoopptt (see the description  of
       sshhoopptt under SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS below).

       The  rules  concerning  the  definition and use of aliases are somewhat
       confusing.  BBaasshh always reads at least one complete line of input,  and
       all  lines that make up a compound command, before executing any of the
       commands on that line or the compound command.   Aliases  are  expanded
       when  a  command is read, not when it is executed.  Therefore, an alias
       definition appearing on the same line as another command does not  take
       effect until the shell reads the next line of input, and an alias defi-
       nition  in  a  compound  command  does  not take effect until the shell
       parses and executes the entire compound command.  The commands  follow-
       ing  the  alias  definition  on that line, or in the rest of a compound
       command, are not affected by the new alias.  This behavior is  also  an
       issue  when  functions are executed.  Aliases are expanded when a func-
       tion definition is read, not when the function is executed,  because  a
       function definition is itself a command.  As a consequence, aliases de-
       fined in a function are not available until after that function is exe-
       cuted.   To  be  safe, always put alias definitions on a separate line,
       and do not use aalliiaass in compound commands.

       For almost every purpose, shell functions are preferable to aliases.

FFUUNNCCTTIIOONNSS
       A shell function, defined  as  described  above  under  SSHHEELLLL  GGRRAAMMMMAARR,
       stores  a  series  of commands for later execution.  When the name of a
       shell function is used as a simple command name, the shell executes the
       list of commands associated with that function name.  Functions are ex-
       ecuted in the context of the calling shell; there  is  no  new  process
       created  to interpret them (contrast this with the execution of a shell
       script).

       When a function is executed, the arguments to the function  become  the
       positional parameters during its execution.  The special parameter ## is
       updated  to reflect the new positional parameters.  Special parameter 00
       is unchanged.  The first element of the FFUUNNCCNNAAMMEE variable is set to the
       name of the function while the function is executing.

       All other aspects of the shell execution environment are identical  be-
       tween  a  function  and its caller with these exceptions: the DDEEBBUUGG and
       RREETTUURRNN traps (see the description  of  the  ttrraapp  builtin  under  SSHHEELLLL
       BBUUIILLTTIINN  CCOOMMMMAANNDDSS below) are not inherited unless the function has been
       given the ttrraaccee attribute (see the description of the  ddeeccllaarree  builtin
       below)  or  the --oo ffuunnccttrraaccee shell option has been enabled with the sseett
       builtin (in which case all  functions  inherit  the  DDEEBBUUGG  and  RREETTUURRNN
       traps),  and the EERRRR trap is not inherited unless the --oo eerrrrttrraaccee shell
       option has been enabled.

       Variables local to the function are declared  with  the  llooccaall  builtin
       command  (_l_o_c_a_l _v_a_r_i_a_b_l_e_s).  Ordinarily, variables and their values are
       shared between the function and its caller.  If a variable is  declared
       llooccaall,  the variable's visible scope is restricted to that function and
       its children (including the functions it calls).

       In the following description, the _c_u_r_r_e_n_t _s_c_o_p_e is a currently- execut-
       ing function.  Previous scopes consist of that function's caller and so
       on, back to the "global" scope, where the shell is  not  executing  any
       shell  function.   A  local variable at the current scope is a variable
       declared using the llooccaall or ddeeccllaarree builtins in the  function  that  is
       currently executing.

       Local  variables "shadow" variables with the same name declared at pre-
       vious scopes.  For instance, a local variable declared  in  a  function
       hides variables with the same name declared at previous scopes, includ-
       ing  global  variables:  references  and assignments refer to the local
       variable, leaving the variables at previous  scopes  unmodified.   When
       the function returns, the global variable is once again visible.

       The  shell  uses  _d_y_n_a_m_i_c  _s_c_o_p_i_n_g  to  control a variable's visibility
       within functions.  With dynamic scoping, visible  variables  and  their
       values  are a result of the sequence of function calls that caused exe-
       cution to reach the current function.  The value of a variable  that  a
       function  sees  depends on its value within its caller, if any, whether
       that caller is the global scope or another  shell  function.   This  is
       also the value that a local variable declaration shadows, and the value
       that is restored when the function returns.

       For  example, if a variable _v_a_r is declared as local in function _f_u_n_c_1,
       and _f_u_n_c_1 calls another function _f_u_n_c_2, references  to  _v_a_r  made  from
       within  _f_u_n_c_2  resolve  to the local variable _v_a_r from _f_u_n_c_1, shadowing
       any global variable named _v_a_r.

       The uunnsseett builtin also acts using the same dynamic scope: if a variable
       is local to the current scope, uunnsseett unsets  it;  otherwise  the  unset
       will  refer  to  the  variable  found in any calling scope as described
       above.  If a variable at the current local scope is unset,  it  remains
       so  (appearing  as  unset) until it is reset in that scope or until the
       function returns.  Once the function returns, any instance of the vari-
       able at a previous scope becomes visible.  If the unset acts on a vari-
       able at a previous scope, any instance of a  variable  with  that  name
       that  had been shadowed becomes visible (see below how the llooccaallvvaarr__uunn--
       sseett shell option changes this behavior).

       The FFUUNNCCNNEESSTT variable, if set to a numeric value greater  than  0,  de-
       fines  a maximum function nesting level.  Function invocations that ex-
       ceed the limit cause the entire command to abort.

       If the builtin command rreettuurrnn is executed in a function,  the  function
       completes  and  execution resumes with the next command after the func-
       tion call.  If rreettuurrnn is supplied a numeric argument, that is the func-
       tion's return status; otherwise the function's  return  status  is  the
       exit  status  of the last command executed before the rreettuurrnn.  Any com-
       mand associated with the RREETTUURRNN trap is executed before  execution  re-
       sumes.  When a function completes, the values of the positional parame-
       ters  and  the  special parameter ## are restored to the values they had
       prior to the function's execution.

       The --ff option to the ddeeccllaarree or ttyyppeesseett builtin commands lists function
       names and definitions.  The --FF option to ddeeccllaarree or ttyyppeesseett  lists  the
       function names only (and optionally the source file and line number, if
       the  eexxttddeebbuugg  shell  option is enabled).  Functions may be exported so
       that child shell processes (those created  when  executing  a  separate
       shell invocation) automatically have them defined with the --ff option to
       the eexxppoorrtt builtin.  The --ff option to the uunnsseett builtin deletes a func-
       tion definition.

       Functions may be recursive.  The FFUUNNCCNNEESSTT variable may be used to limit
       the  depth  of the function call stack and restrict the number of func-
       tion invocations.  By default, bbaasshh imposes no limit on the  number  of
       recursive calls.

AARRIITTHHMMEETTIICC EEVVAALLUUAATTIIOONN
       The  shell allows arithmetic expressions to be evaluated, under certain
       circumstances (see the lleett and ddeeccllaarree builtin commands,  the  ((((  com-
       pound  command, the arithmetic ffoorr command, the [[[[ conditional command,
       and AArriitthhmmeettiicc EExxppaannssiioonn).

       Evaluation is done in the largest fixed-width integers available,  with
       no  check  for overflow, though division by 0 is trapped and flagged as
       an error.  The operators and their precedence, associativity, and  val-
       ues are the same as in the C language.  The following list of operators
       is  grouped  into levels of equal-precedence operators.  The levels are
       listed in order of decreasing precedence.

       _i_d++++ _i_d----
              variable post-increment and post-decrement
       ++++_i_d ----_i_d
              variable pre-increment and pre-decrement
       -- ++    unary minus and plus
       !! ~~    logical and bitwise negation
       ****     exponentiation
       ** // %%  multiplication, division, remainder
       ++ --    addition, subtraction
       <<<< >>>>  left and right bitwise shifts
       <<== >>== << >>
              comparison
       ==== !!==  equality and inequality
       &&      bitwise AND
       ^^      bitwise exclusive OR
       ||      bitwise OR
       &&&&     logical AND
       ||||     logical OR
       _e_x_p_r??_e_x_p_r::_e_x_p_r
              conditional operator
       == **== //== %%== ++== --== <<<<== >>>>== &&== ^^== ||==
              assignment
       _e_x_p_r_1 ,, _e_x_p_r_2
              comma

       Shell variables are allowed as operands; parameter  expansion  is  per-
       formed before the expression is evaluated.  Within an expression, shell
       variables  may  also  be referenced by name without using the parameter
       expansion syntax.  This means you can use "x", where _x is a shell vari-
       able name, in an arithmetic expression, and the shell will evaluate its
       value as an expression and use the result.  A shell  variable  that  is
       null or unset evaluates to 0 when referenced by name in an expression.

       The  value  of a variable is evaluated as an arithmetic expression when
       it is referenced, or when a variable which has been given  the  _i_n_t_e_g_e_r
       attribute using ddeeccllaarree --ii is assigned a value.  A null value evaluates
       to  0.   A shell variable need not have its _i_n_t_e_g_e_r attribute turned on
       to be used in an expression.

       Integer constants follow the C language definition, without suffixes or
       character constants.  Constants with a leading 0 are interpreted as oc-
       tal numbers.  A leading 0x or 0X denotes hexadecimal.  Otherwise,  num-
       bers  take the form [_b_a_s_e_#]n, where the optional _b_a_s_e is a decimal num-
       ber between 2 and 64 representing the arithmetic base, and _n is a  num-
       ber  in  that  base.   If _b_a_s_e_# is omitted, then base 10 is used.  When
       specifying _n, if a non-digit is required, the digits greater than 9 are
       represented by the lowercase letters, the uppercase letters, @, and  _,
       in  that order.  If _b_a_s_e is less than or equal to 36, lowercase and up-
       percase letters may be used interchangeably to  represent  numbers  be-
       tween 10 and 35.

       Operators are evaluated in precedence order.  Sub-expressions in paren-
       theses are evaluated first and may override the precedence rules above.

CCOONNDDIITTIIOONNAALL EEXXPPRREESSSSIIOONNSS
       Conditional  expressions  are  used  by the [[[[ compound command and the
       tteesstt and [[ builtin commands to test file attributes and perform  string
       and  arithmetic  comparisons.   The tteesstt and [[ commands determine their
       behavior based on the number of  arguments;  see  the  descriptions  of
       those commands for any other command-specific actions.

       Expressions are formed from the unary or binary primaries listed below.
       Unary  expressions  are  often  used to examine the status of a file or
       shell variable.  Binary operators are used  for  string,  numeric,  and
       file attribute comparisons.

       BBaasshh  handles several filenames specially when they are used in expres-
       sions.  If the operating system on which bbaasshh is running provides these
       special files, bash will use them; otherwise it will emulate  them  in-
       ternally  with  this  behavior: If any _f_i_l_e argument to one of the pri-
       maries is of the form _/_d_e_v_/_f_d_/_n, then bbaasshh checks  file  descriptor  _n.
       If  the  _f_i_l_e  argument  to  one of the primaries is one of _/_d_e_v_/_s_t_d_i_n,
       _/_d_e_v_/_s_t_d_o_u_t, or _/_d_e_v_/_s_t_d_e_r_r, bbaasshh checks file descriptor 0,  1,  or  2,
       respectively.

       Unless otherwise specified, primaries that operate on files follow sym-
       bolic links and operate on the target of the link, rather than the link
       itself.

       When  used with [[[[, or when the shell is in posix mode, the << and >> op-
       erators sort lexicographically using  the  current  locale.   When  the
       shell  is  not in posix mode, the tteesstt command sorts using ASCII order-
       ing.

       --aa _f_i_l_e
              True if _f_i_l_e exists.
       --bb _f_i_l_e
              True if _f_i_l_e exists and is a block special file.
       --cc _f_i_l_e
              True if _f_i_l_e exists and is a character special file.
       --dd _f_i_l_e
              True if _f_i_l_e exists and is a directory.
       --ee _f_i_l_e
              True if _f_i_l_e exists.
       --ff _f_i_l_e
              True if _f_i_l_e exists and is a regular file.
       --gg _f_i_l_e
              True if _f_i_l_e exists and is set-group-id.
       --hh _f_i_l_e
              True if _f_i_l_e exists and is a symbolic link.
       --kk _f_i_l_e
              True if _f_i_l_e exists and its "sticky" bit is set.
       --pp _f_i_l_e
              True if _f_i_l_e exists and is a named pipe (FIFO).
       --rr _f_i_l_e
              True if _f_i_l_e exists and is readable.
       --ss _f_i_l_e
              True if _f_i_l_e exists and has a size greater than zero.
       --tt _f_d  True if file descriptor _f_d is open and refers to a terminal.
       --uu _f_i_l_e
              True if _f_i_l_e exists and its set-user-id bit is set.
       --ww _f_i_l_e
              True if _f_i_l_e exists and is writable.
       --xx _f_i_l_e
              True if _f_i_l_e exists and is executable.
       --GG _f_i_l_e
              True if _f_i_l_e exists and is owned by the effective group id.
       --LL _f_i_l_e
              True if _f_i_l_e exists and is a symbolic link.
       --NN _f_i_l_e
              True if _f_i_l_e exists and has been modified since it was last  ac-
              cessed.
       --OO _f_i_l_e
              True if _f_i_l_e exists and is owned by the effective user id.
       --SS _f_i_l_e
              True if _f_i_l_e exists and is a socket.
       --oo _o_p_t_n_a_m_e
              True  if  the  shell option _o_p_t_n_a_m_e is enabled.  See the list of
              options under the description  of  the  --oo  option  to  the  sseett
              builtin below.
       --vv _v_a_r_n_a_m_e
              True  if  the shell variable _v_a_r_n_a_m_e is set (has been assigned a
              value).  If _v_a_r_n_a_m_e is  an  indexed  array  variable  name  sub-
              scripted  by  _@ or _*, this returns true if the array has any set
              elements.  If _v_a_r_n_a_m_e is an associative array variable name sub-
              scripted by _@ or _*, this returns true if an  element  with  that
              key is set.
       --RR _v_a_r_n_a_m_e
              True  if  the shell variable _v_a_r_n_a_m_e is set and is a name refer-
              ence.
       --zz _s_t_r_i_n_g
              True if the length of _s_t_r_i_n_g is zero.
       _s_t_r_i_n_g
       --nn _s_t_r_i_n_g
              True if the length of _s_t_r_i_n_g is non-zero.

       _s_t_r_i_n_g_1 ==== _s_t_r_i_n_g_2
       _s_t_r_i_n_g_1 == _s_t_r_i_n_g_2
              True if the strings are equal.  == should be used with  the  tteesstt
              command  for  POSIX conformance.  When used with the [[[[ command,
              this performs pattern matching as described above (CCoommppoouunndd CCoomm--
              mmaannddss).
       _s_t_r_i_n_g_1 !!== _s_t_r_i_n_g_2
              True if the strings are not equal.
       _s_t_r_i_n_g_1 << _s_t_r_i_n_g_2
              True if _s_t_r_i_n_g_1 sorts before _s_t_r_i_n_g_2 lexicographically.
       _s_t_r_i_n_g_1 >> _s_t_r_i_n_g_2
              True if _s_t_r_i_n_g_1 sorts after _s_t_r_i_n_g_2 lexicographically.

       _f_i_l_e_1 --eeff _f_i_l_e_2
              True if _f_i_l_e_1 and _f_i_l_e_2 refer to the same device and inode  num-
              bers.
       _f_i_l_e_1 -nntt _f_i_l_e_2
              True  if  _f_i_l_e_1  is  newer (according to modification date) than
              _f_i_l_e_2, or if _f_i_l_e_1 exists and _f_i_l_e_2 does not.
       _f_i_l_e_1 -oott _f_i_l_e_2
              True if _f_i_l_e_1 is older than _f_i_l_e_2, or if _f_i_l_e_2 exists and  _f_i_l_e_1
              does not.

       _a_r_g_1 OOPP _a_r_g_2
              OOPP  is one of --eeqq, --nnee, --lltt, --llee, --ggtt, or --ggee.  These arithmetic
              binary operators return true if _a_r_g_1 is equal to, not equal  to,
              less  than, less than or equal to, greater than, or greater than
              or equal to _a_r_g_2, respectively.  _a_r_g_1 and _a_r_g_2 may  be  positive
              or  negative  integers.  When used with the [[[[ command, _a_r_g_1 and
              _a_r_g_2 are evaluated as  arithmetic  expressions  (see  AARRIITTHHMMEETTIICC
              EEVVAALLUUAATTIIOONN above).  Since the expansions the [[[[ command performs
              on _a_r_g_1 and _a_r_g_2 can potentially result in empty strings, arith-
              metic  expression  evaluation  treats  those as expressions that
              evaluate to 0.

SSIIMMPPLLEE CCOOMMMMAANNDD EEXXPPAANNSSIIOONN
       When the shell executes a simple command, it performs the following ex-
       pansions, assignments, and redirections, from left  to  right,  in  the
       following order.

       1.     The  words  that  the  parser has marked as variable assignments
              (those preceding the command name) and  redirections  are  saved
              for later processing.

       2.     The  words that are not variable assignments or redirections are
              expanded.  If any words remain after expansion, the  first  word
              is  taken  to be the name of the command and the remaining words
              are the arguments.

       3.     Redirections are performed as described above under RREEDDIIRREECCTTIIOONN.

       4.     The text after the == in each variable assignment undergoes tilde
              expansion, parameter expansion, command substitution, arithmetic
              expansion, and quote removal before being assigned to the  vari-
              able.

       If no command name results, the variable assignments affect the current
       shell  environment.   In  the case of such a command (one that consists
       only of assignment statements and redirections), assignment  statements
       are  performed before redirections.  Otherwise, the variables are added
       to the environment of the executed command and do not affect  the  cur-
       rent shell environment.  If any of the assignments attempts to assign a
       value  to  a  readonly variable, an error occurs, and the command exits
       with a non-zero status.

       If no command name results, redirections are performed, but do not  af-
       fect  the  current  shell  environment.  A redirection error causes the
       command to exit with a non-zero status.

       If there is a command name left after expansion, execution proceeds  as
       described  below.   Otherwise, the command exits.  If one of the expan-
       sions contained a command substitution, the exit status of the  command
       is  the  exit  status  of  the last command substitution performed.  If
       there were no command substitutions, the command exits with a zero sta-
       tus.

CCOOMMMMAANNDD EEXXEECCUUTTIIOONN
       After a command has been split into words, if it results  in  a  simple
       command  and an optional list of arguments, the shell performs the fol-
       lowing actions.

       If the command name contains no slashes, the shell attempts  to  locate
       it.   If  there  exists a shell function by that name, that function is
       invoked as described above in FFUUNNCCTTIIOONNSS.  If the name does not match  a
       function,  the shell searches for it in the list of shell builtins.  If
       a match is found, that builtin is invoked.

       If the name is neither a shell function nor a builtin, and contains  no
       slashes,  bbaasshh  searches  each element of the PPAATTHH for a directory con-
       taining an executable file by that name.  BBaasshh uses a hash table to re-
       member the full pathnames of executable files  (see  hhaasshh  under  SSHHEELLLL
       BBUUIILLTTIINN  CCOOMMMMAANNDDSS  below).  Bash performs a full search of the directo-
       ries in PPAATTHH only if the command is not found in the  hash  table.   If
       the  search  is  unsuccessful,  the  shell searches for a defined shell
       function named ccoommmmaanndd__nnoott__ffoouunndd__hhaannddllee.  If that function  exists,  it
       is  invoked  in a separate execution environment with the original com-
       mand and the original command's arguments as  its  arguments,  and  the
       function's  exit  status  becomes the exit status of that subshell.  If
       that function is not defined, the shell prints an error message and re-
       turns an exit status of 127.

       If the search is successful, or if the command  name  contains  one  or
       more slashes, the shell executes the named program in a separate execu-
       tion environment.  Argument 0 is set to the name given, and the remain-
       ing arguments to the command are set to the arguments given, if any.

       If  this  execution fails because the file is not in executable format,
       and the file is not a directory, it is assumed to be a _s_h_e_l_l _s_c_r_i_p_t,  a
       file containing shell commands, and the shell creates a new instance of
       itself  to  execute  it.  Bash tries to determine whether the file is a
       text file or a binary, and will not execute files it determines  to  be
       binaries.  This subshell reinitializes itself, so that the effect is as
       if  a  new shell had been invoked to handle the script, with the excep-
       tion that the locations of commands remembered by the parent (see  hhaasshh
       below under SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS are retained by the child.

       If  the program is a file beginning with ##!!, the remainder of the first
       line specifies an interpreter for the program.  The shell executes  the
       specified interpreter on operating systems that do not handle this exe-
       cutable format themselves.  The arguments to the interpreter consist of
       a  single optional argument following the interpreter name on the first
       line of the program, followed by the name of the program,  followed  by
       the command arguments, if any.

CCOOMMMMAANNDD EEXXEECCUUTTIIOONN EENNVVIIRROONNMMEENNTT
       The  shell  has an _e_x_e_c_u_t_i_o_n _e_n_v_i_r_o_n_m_e_n_t, which consists of the follow-
       ing:

       +o      Open files inherited by the shell at invocation, as modified  by
              redirections supplied to the eexxeecc builtin.

       +o      The  current  working directory as set by ccdd, ppuusshhdd, or ppooppdd, or
              inherited by the shell at invocation.

       +o      The file creation mode mask as set by uummaasskk  or  inherited  from
              the shell's parent.

       +o      Current traps set by ttrraapp.

       +o      Shell parameters that are set by variable assignment or with sseett
              or inherited from the shell's parent in the environment.

       +o      Shell  functions  defined during execution or inherited from the
              shell's parent in the environment.

       +o      Options enabled at invocation (either by default  or  with  com-
              mand-line arguments) or by sseett.

       +o      Options enabled by sshhoopptt.

       +o      Shell aliases defined with aalliiaass.

       +o      Various  process  IDs,  including  those of background jobs, the
              value of $$$$, and the value of PPPPIIDD.

       When a simple command other than a builtin or shell function is  to  be
       executed,  it  is invoked in a separate execution environment that con-
       sists of the following.  Unless otherwise noted, the values are  inher-
       ited from the shell.

       +o      The  shell's  open  files,  plus any modifications and additions
              specified by redirections to the command.

       +o      The current working directory.

       +o      The file creation mode mask.

       +o      Shell variables and functions  marked  for  export,  along  with
              variables exported for the command, passed in the environment.

       +o      Traps caught by the shell are reset to the values inherited from
              the shell's parent, and traps ignored by the shell are ignored.

       A  command  invoked  in  this  separate  environment  cannot affect the
       shell's execution environment.

       A _s_u_b_s_h_e_l_l is a copy of the shell process.

       Command substitution, commands grouped with parentheses, and  asynchro-
       nous commands are invoked in a subshell environment that is a duplicate
       of the shell environment, except that traps caught by the shell are re-
       set  to  the values that the shell inherited from its parent at invoca-
       tion.  Builtin commands that are invoked as part of a pipeline,  except
       possibly  in  the  last  element depending on the value of the llaassttppiippee
       shell option, are also executed in  a  subshell  environment.   Changes
       made  to  the  subshell environment cannot affect the shell's execution
       environment.

       When the shell is in posix mode, subshells spawned to  execute  command
       substitutions  inherit  the  value  of  the --ee option from their parent
       shell.  When not in posix mode, bbaasshh clears the --ee option in such  sub-
       shells.   See the description of the iinnhheerriitt__eerrrreexxiitt shell option below
       for how to control this behavior when not in posix mode.

       If a command is followed by a && and job control is not active, the  de-
       fault standard input for the command is the empty file _/_d_e_v_/_n_u_l_l.  Oth-
       erwise,  the invoked command inherits the file descriptors of the call-
       ing shell as modified by redirections.

EENNVVIIRROONNMMEENNTT
       When a program is invoked it is given an array of  strings  called  the
       _e_n_v_i_r_o_n_m_e_n_t.   This  is  a  list  of  _n_a_m_e-_v_a_l_u_e  pairs,  of  the  form
       _n_a_m_e=_v_a_l_u_e.

       The shell provides several ways to manipulate the environment.  On  in-
       vocation,  the  shell scans its own environment and creates a parameter
       for each name found, automatically  marking  it  for  _e_x_p_o_r_t  to  child
       processes.  Executed commands inherit the environment.  The eexxppoorrtt, ddee--
       ccllaarree  --xx,  and  uunnsseett  commands  modify  the environment by adding and
       deleting parameters and functions.  If the value of a parameter in  the
       environment  is  modified,  the new value automatically becomes part of
       the environment, replacing the old.  The environment inherited  by  any
       executed  command  consists  of  the shell's initial environment, whose
       values may be modified in the shell, less any pairs removed by the  uunn--
       sseett  or  eexxppoorrtt  --nn commands, plus any additions via the eexxppoorrtt and ddee--
       ccllaarree --xx commands.

       If any parameter assignments, as described above in PPAARRAAMMEETTEERRSS,  appear
       before a _s_i_m_p_l_e _c_o_m_m_a_n_d, the variable assignments are part of that com-
       mand's environment for as long as it executes.  These assignment state-
       ments  affect  only the environment seen by that command.  If these as-
       signments precede a call to a shell function, the variables  are  local
       to the function and exported to that function's children.

       If  the  --kk option is set (see the sseett builtin command below), then _a_l_l
       parameter assignments are placed in the environment for a command,  not
       just those that precede the command name.

       When  bbaasshh  invokes  an  external command, the variable __ is set to the
       full pathname of the command and passed to that command in its environ-
       ment.

EEXXIITT SSTTAATTUUSS
       The exit status of an executed command is the  value  returned  by  the
       _w_a_i_t_p_i_d system call or equivalent function.  Exit statuses fall between
       0  and  255, though, as explained below, the shell may use values above
       125 specially.  Exit statuses from shell builtins and compound commands
       are also limited to this range.  Under certain circumstances, the shell
       will use special values to indicate specific failure modes.

       For the shell's purposes, a command which exits with a zero exit status
       has succeeded.  So while an exit status of zero  indicates  success,  a
       non-zero exit status indicates failure.

       When  a  command terminates on a fatal signal _N, bbaasshh uses the value of
       128+_N as the exit status.

       If a command is not found, the child process created to execute it  re-
       turns  a  status  of 127.  If a command is found but is not executable,
       the return status is 126.

       If a command fails because of an error during expansion or redirection,
       the exit status is greater than zero.

       Shell builtin commands return a status of 0 (_t_r_u_e) if  successful,  and
       non-zero  (_f_a_l_s_e)  if an error occurs while they execute.  All builtins
       return an exit status of 2 to indicate incorrect usage,  generally  in-
       valid options or missing arguments.

       The exit status of the last command is available in the special parame-
       ter $?.

       BBaasshh  itself  returns the exit status of the last command executed, un-
       less a syntax error occurs, in which case  it  exits  with  a  non-zero
       value.  See also the eexxiitt builtin command below.

SSIIGGNNAALLSS
       When  bbaasshh  is  interactive,  in  the  absence of any traps, it ignores
       SSIIGGTTEERRMM (so that kkiillll 00  does  not  kill  an  interactive  shell),  and
       catches and handles SSIIGGIINNTT (so that the wwaaiitt builtin is interruptible).
       When  bbaasshh  receives  SSIIGGIINNTT, it breaks out of any executing loops.  In
       all cases, bbaasshh ignores SSIIGGQQUUIITT.  If job control is in effect, bbaasshh ig-
       nores SSIIGGTTTTIINN, SSIIGGTTTTOOUU, and SSIIGGTTSSTTPP.

       The ttrraapp builtin modifies the shell's signal handling, as described be-
       low.

       Non-builtin commands bbaasshh executes have signal handlers set to the val-
       ues inherited by the shell from its parent, unless ttrraapp sets them to be
       ignored, in which case the child process  will  ignore  them  as  well.
       When  job control is not in effect, asynchronous commands ignore SSIIGGIINNTT
       and SSIIGGQQUUIITT in addition to these inherited handlers.  Commands run as a
       result of command substitution ignore the keyboard-generated  job  con-
       trol signals SSIIGGTTTTIINN, SSIIGGTTTTOOUU, and SSIIGGTTSSTTPP.

       The  shell  exits by default upon receipt of a SSIIGGHHUUPP.  Before exiting,
       an interactive shell  resends  the  SSIIGGHHUUPP  to  all  jobs,  running  or
       stopped.   The  shell sends SSIIGGCCOONNTT to stopped jobs to ensure that they
       receive the SSIIGGHHUUPP (see JJOOBB CCOONNTTRROOLL below for  more  information  about
       running  and stopped jobs).  To prevent the shell from sending the sig-
       nal to a particular job, remove it from the jobs table with the  ddiissoowwnn
       builtin  (see  SSHHEELLLL  BBUUIILLTTIINN CCOOMMMMAANNDDSS below) or mark it not to receive
       SSIIGGHHUUPP using ddiissoowwnn --hh.

       If the hhuuppoonneexxiitt shell option has been set using sshhoopptt,  bbaasshh  sends  a
       SSIIGGHHUUPP to all jobs when an interactive login shell exits.

       If  bbaasshh is waiting for a command to complete and receives a signal for
       which a trap has been set, it will not execute the trap until the  com-
       mand completes.  If bbaasshh is waiting for an asynchronous command via the
       wwaaiitt  builtin,  and it receives a signal for which a trap has been set,
       the wwaaiitt builtin will return immediately with an  exit  status  greater
       than 128, immediately after which the shell executes the trap.

       When  job  control is not enabled, and bbaasshh is waiting for a foreground
       command to complete, the shell receives keyboard-generated signals such
       as SSIIGGIINNTT (usually generated by ^^CC) that users commonly intend to  send
       to that command.  This happens because the shell and the command are in
       the  same  process  group  as  the terminal, and ^^CC sends SSIIGGIINNTT to all
       processes in that process group.  Since bbaasshh does not enable  job  con-
       trol  by  default  when  the shell is not interactive, this scenario is
       most common in non-interactive shells.

       When job control is enabled, and bbaasshh is waiting for a foreground  com-
       mand  to  complete,  the shell does not receive keyboard-generated sig-
       nals, because it is not in the same  process  group  as  the  terminal.
       This scenario is most common in interactive shells, where bbaasshh attempts
       to  enable  job control by default.  See JJOOBB CCOONNTTRROOLL below for more in-
       formation about process groups.

       When job control is not enabled, and bbaasshh receives SSIIGGIINNTT while waiting
       for a foreground command, it waits until that foreground command termi-
       nates and then decides what to do about the SSIIGGIINNTT:

       1.     If the command terminates due to the SSIIGGIINNTT, bbaasshh concludes that
              the user meant to send the SSIIGGIINNTT to the shell as well, and acts
              on the SSIIGGIINNTT (e.g., by running a SSIIGGIINNTT trap, exiting a non-in-
              teractive shell, or returning to the top level  to  read  a  new
              command).

       2.     If  the  command  does  not terminate due to SSIIGGIINNTT, the program
              handled the SSIIGGIINNTT itself and did not treat it as a  fatal  sig-
              nal.   In  that case, bbaasshh does not treat SSIIGGIINNTT as a fatal sig-
              nal, either, instead assuming that the SSIIGGIINNTT was used  as  part
              of  the program's normal operation (e.g., emacs uses it to abort
              editing commands) or deliberately discarded.  However, bbaasshh will
              run any trap set on SSIIGGIINNTT, as it does with  any  other  trapped
              signal  it  receives while it is waiting for the foreground com-
              mand to complete, for compatibility.

       When job control is enabled, bbaasshh does not  receive  keyboard-generated
       signals  such  as  SSIIGGIINNTT while it is waiting for a foreground command.
       An interactive shell does not pay attention to the SSIIGGIINNTT, even if  the
       foreground  command  terminates as a result, other than noting its exit
       status.  If the shell is not interactive, and  the  foreground  command
       terminates  due to the SSIIGGIINNTT, bbaasshh pretends it received the SSIIGGIINNTT it-
       self (scenario 1 above), for compatibility.

JJOOBB CCOONNTTRROOLL
       _J_o_b _c_o_n_t_r_o_l refers to the ability to selectively stop (_s_u_s_p_e_n_d) the ex-
       ecution of processes and continue (_r_e_s_u_m_e) their execution at  a  later
       point.   A  user typically employs this facility via an interactive in-
       terface supplied jointly by the operating system kernel's terminal dri-
       ver and bbaasshh.

       The shell associates a _j_o_b with each pipeline.  It  keeps  a  table  of
       currently  executing  jobs,  which the jjoobbss command will display.  Each
       job has a _j_o_b _n_u_m_b_e_r, which jjoobbss displays between brackets.   Job  num-
       bers  start  at 1.  When bbaasshh starts a job asynchronously (in the _b_a_c_k_-
       _g_r_o_u_n_d), it prints a line that looks like:

              [1] 25647

       indicating that this job is job number 1 and that the process ID of the
       last process in the pipeline associated with this job is 25647.  All of
       the processes in a single pipeline are members of the same  job.   BBaasshh
       uses the _j_o_b abstraction as the basis for job control.

       To  facilitate the implementation of the user interface to job control,
       each process has a _p_r_o_c_e_s_s _g_r_o_u_p _I_D, and the operating system maintains
       the notion of a _c_u_r_r_e_n_t  _t_e_r_m_i_n_a_l  _p_r_o_c_e_s_s  _g_r_o_u_p  _I_D.   This  terminal
       process group ID is associated with the _c_o_n_t_r_o_l_l_i_n_g _t_e_r_m_i_n_a_l.

       Processes  that  have  the same process group ID are said to be part of
       the same _p_r_o_c_e_s_s  _g_r_o_u_p.   Members  of  the  _f_o_r_e_g_r_o_u_n_d  process  group
       (processes  whose  process  group  ID  is equal to the current terminal
       process group ID) receive keyboard-generated signals  such  as  SSIIGGIINNTT.
       Processes  in  the  foreground  process group are said to be _f_o_r_e_g_r_o_u_n_d
       processes.  _B_a_c_k_g_r_o_u_n_d processes are those whose process group ID  dif-
       fers from the controlling terminal's; such processes are immune to key-
       board-generated signals.  Only foreground processes are allowed to read
       from or, if the user so specifies with "stty tostop", write to the con-
       trolling  terminal.   The  system  sends  a SSIIGGTTTTIINN ((SSIIGGTTTTOOUU)) signal to
       background processes which attempt to read from (write to when "tostop"
       is in effect) the terminal, which, unless caught, suspends the process.

       If the operating system on which bbaasshh is running supports job  control,
       bbaasshh contains facilities to use it.  Typing the _s_u_s_p_e_n_d character (typ-
       ically ^^ZZ, Control-Z) while a process is running stops that process and
       returns  control  to bbaasshh.  Typing the _d_e_l_a_y_e_d _s_u_s_p_e_n_d character (typi-
       cally ^^YY, Control-Y) causes the process stop when it attempts  to  read
       input  from  the  terminal, and returns control to bbaasshh.  The user then
       manipulates the state of this job, using the bbgg command to continue  it
       in  the background, the ffgg command to continue it in the foreground, or
       the kkiillll command to kill it.  The suspend character takes effect  imme-
       diately,  and  has the additional side effect of discarding any pending
       output and typeahead.  To force a background process to stop, or stop a
       process that's not associated with the current terminal  session,  send
       it the SSIIGGSSTTOOPP signal using kkiillll.

       There are a number of ways to refer to a job in the shell.  The %% char-
       acter introduces a job specification (jobspec).

       Job  number  _n may be referred to as %%nn.  A job may also be referred to
       using a prefix of the name used to start it, or using a substring  that
       appears  in  its  command line.  For example, %%ccee refers to a job whose
       command name begins with ccee.  Using %%??ccee, on the other hand, refers  to
       any job containing the string ccee in its command line.  If the prefix or
       substring matches more than one job, bbaasshh reports an error.

       The  symbols  %%%% and %%++ refer to the shell's notion of the _c_u_r_r_e_n_t _j_o_b.
       A single % (with no accompanying job specification) also refers to  the
       current  job.  %%-- refers to the _p_r_e_v_i_o_u_s _j_o_b.  When a job starts in the
       background, a job stops while in the foreground, or a job is resumed in
       the background, it becomes the current job.  The job that was the  cur-
       rent  job  becomes  the previous job.  When the current job terminates,
       the previous job becomes the current job.  If there is  only  a  single
       job,  %%++  and %%-- can both be used to refer to that job.  In output per-
       taining to jobs (e.g., the output of the jjoobbss command), the current job
       is always marked with a ++, and the previous job with a --.

       Simply naming a job can be used to bring it into the foreground: %%11  is
       a  synonym  for  "fg  %1",  bringing job 1 from the background into the
       foreground.  Similarly, "%1 &" resumes job 1 in the background, equiva-
       lent to "bg %1".

       The shell learns immediately whenever a job changes  state.   Normally,
       bbaasshh  waits  until  it  is about to print a prompt before notifying the
       user about changes in a job's status so as to not interrupt  any  other
       output,  though  it  will  notify  of changes in a job's status after a
       foreground command in a list completes, before executing the next  com-
       mand  in  the list.  If the --bb option to the sseett builtin command is en-
       abled, bbaasshh reports status changes immediately.  BBaasshh executes any trap
       on SSIIGGCCHHLLDD for each child that terminates.

       When a job terminates and bbaasshh notifies the user about it, bbaasshh removes
       the job from the table.  It will not appear in jjoobbss  output,  but  wwaaiitt
       will  report  its  exit status, as long as it's supplied the process ID
       associated with the job as an argument.  When the table is  empty,  job
       numbers start over at 1.

       If  a  user  attempts  to  exit bbaasshh while jobs are stopped (or, if the
       cchheecckkjjoobbss shell option has been enabled using the sshhoopptt  builtin,  run-
       ning), the shell prints a warning message, and, if the cchheecckkjjoobbss option
       is  enabled,  lists  the jobs and their statuses.  The jjoobbss command may
       then be used to inspect their status.  If the user immediately attempts
       to exit again, without an intervening command, bbaasshh does not print  an-
       other warning, and terminates any stopped jobs.

       When  the shell is waiting for a job or process using the wwaaiitt builtin,
       and job control is enabled, wwaaiitt  will  return  when  the  job  changes
       state.  The --ff option causes wwaaiitt to wait until the job or process ter-
       minates before returning.

PPRROOMMPPTTIINNGG
       When executing interactively, bbaasshh displays the primary prompt PPSS11 when
       it  is  ready  to  read a command, and the secondary prompt PPSS22 when it
       needs more input to complete a command.

       BBaasshh examines the value of the array variable PPRROOMMPPTT__CCOOMMMMAANNDD  just  be-
       fore  printing  each primary prompt.  If any elements in PPRROOMMPPTT__CCOOMMMMAANNDD
       are set and non-null, Bash executes each value, in numeric order,  just
       as  if  it had been typed on the command line.  BBaasshh displays PPSS00 after
       it reads a command but before executing it.

       BBaasshh displays PPSS44 as described above before tracing each  command  when
       the --xx option is enabled.

       BBaasshh allows the prompt strings PPSS00, PPSS11, PPSS22, and PPSS44, to be customized
       by  inserting a number of backslash-escaped special characters that are
       decoded as follows:

              \\aa     An ASCII bell character (07).
              \\dd     The date in "Weekday Month Date" format (e.g.,  "Tue  May
                     26").
              \\DD{{_f_o_r_m_a_t}}
                     The _f_o_r_m_a_t is passed to _s_t_r_f_t_i_m_e(3) and the result is in-
                     serted into the prompt string; an empty _f_o_r_m_a_t results in
                     a  locale-specific  time  representation.  The braces are
                     required.
              \\ee     An ASCII escape character (033).
              \\hh     The hostname up to the first ".".
              \\HH     The hostname.
              \\jj     The number of jobs currently managed by the shell.
              \\ll     The basename of the shell's terminal device  name  (e.g.,
                     "ttys0").
              \\nn     A newline.
              \\rr     A carriage return.
              \\ss     The  name  of  the shell: the basename of $$00 (the portion
                     following the final slash).
              \\tt     The current time in 24-hour HH:MM:SS format.
              \\TT     The current time in 12-hour HH:MM:SS format.
              \\@@     The current time in 12-hour am/pm format.
              \\AA     The current time in 24-hour HH:MM format.
              \\uu     The username of the current user.
              \\vv     The bbaasshh version (e.g., 2.00).
              \\VV     The bbaasshh release, version + patch level (e.g., 2.00.0)
              \\ww     The value of the PPWWDD shell variable  ($$PPWWDD),  with  $$HHOOMMEE
                     abbreviated   with   a  tilde  (uses  the  value  of  the
                     PPRROOMMPPTT__DDIIRRTTRRIIMM variable).
              \\WW     The basename of  $$PPWWDD,  with  $$HHOOMMEE  abbreviated  with  a
                     tilde.
              \\!!     The history number of this command.
              \\##     The command number of this command.
              \\$$     If the effective UID is 0, a ##, otherwise a $$.
              \\_n_n_n   The character corresponding to the octal number _n_n_n.
              \\\\     A backslash.
              \\[[     Begin  a sequence of non-printing characters, which could
                     be used to embed a terminal  control  sequence  into  the
                     prompt.
              \\]]     End a sequence of non-printing characters.

       The  command  number  and the history number are usually different: the
       history number of a command is its position in the history list,  which
       may  include  commands  restored from the history file (see HHIISSTTOORRYY be-
       low), while the command number is the position in the sequence of  com-
       mands  executed  during the current shell session.  After the string is
       decoded, it is expanded via parameter expansion, command  substitution,
       arithmetic  expansion,  and  quote removal, subject to the value of the
       pprroommppttvvaarrss shell option (see the description of the sshhoopptt command under
       SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS below).  This can have unwanted side effects  if
       escaped  portions  of  the string appear within command substitution or
       contain characters special to word expansion.

RREEAADDLLIINNEE
       This is the library that handles reading input when using  an  interac-
       tive  shell, unless the ----nnooeeddiittiinngg option is supplied at shell invoca-
       tion.  Line editing is also used when using the --ee option to  the  rreeaadd
       builtin.  By default, the line editing commands are similar to those of
       emacs; a vi-style line editing interface is also available.  Line edit-
       ing  can  be enabled at any time using the --oo eemmaaccss or --oo vvii options to
       the sseett builtin (see SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS below).  To turn  off  line
       editing  after  the shell is running, use the ++oo eemmaaccss or ++oo vvii options
       to the sseett builtin.

   RReeaaddlliinnee NNoottaattiioonn
       This section uses Emacs-style editing concepts and  uses  its  notation
       for  keystrokes.   Control  keys  are denoted by C-_k_e_y, e.g., C-n means
       Control-N.  Similarly, _m_e_t_a keys are denoted by  M-_k_e_y,  so  M-x  means
       Meta-X.  The Meta key is often labeled "Alt" or "Option".

       On  keyboards  without a _M_e_t_a key, M-_x means ESC _x, i.e., press and re-
       lease the Escape key, then press and release the _x  key,  in  sequence.
       This  makes  ESC the _m_e_t_a _p_r_e_f_i_x.  The combination M-C-_x means ESC Con-
       trol-_x: press and release the Escape key, then press and hold the  Con-
       trol key while pressing the _x key, then release both.

       On  some  keyboards, the Meta key modifier produces characters with the
       eighth bit (0200) set.  You can use  the  eennaabbllee--mmeettaa--kkeeyy  variable  to
       control  whether  or  not  it does this, if the keyboard allows it.  On
       many others, the terminal or terminal emulator  converts  the  metafied
       key  to a key sequence beginning with ESC as described in the preceding
       paragraph.

       If your _M_e_t_a key produces a key sequence with the ESC meta prefix,  you
       can  make M-_k_e_y key bindings you specify (see RReeaaddlliinnee KKeeyy BBiinnddiinnggss be-
       low) do the same thing by setting the ffoorrccee--mmeettaa--pprreeffiixx variable.

       RReeaaddlliinnee commands may be given numeric _a_r_g_u_m_e_n_t_s, which normally act as
       a repeat count.  Sometimes, however, it is the  sign  of  the  argument
       that  is  significant.   Passing  a negative argument to a command that
       acts in the forward direction (e.g., kkiillll--lliinnee) makes that command  act
       in  a backward direction.  Commands whose behavior with arguments devi-
       ates from this are noted below.

       The _p_o_i_n_t is the current cursor position, and _m_a_r_k refers  to  a  saved
       cursor position.  The text between the point and mark is referred to as
       the _r_e_g_i_o_n.  RReeaaddlliinnee has the concept of an _a_c_t_i_v_e _r_e_g_i_o_n: when the re-
       gion  is  active,  rreeaaddlliinnee  redisplay  highlights the region using the
       value of the aaccttiivvee--rreeggiioonn--ssttaarrtt--ccoolloorr variable.  The eennaabbllee--aaccttiivvee--rree--
       ggiioonn variable turns this on and off.  Several commands set  the  region
       to active; those are noted below.

       When  a command is described as _k_i_l_l_i_n_g text, the text deleted is saved
       for possible future retrieval (_y_a_n_k_i_n_g).  The killed text is saved in a
       _k_i_l_l _r_i_n_g.  Consecutive kills accumulate  the  deleted  text  into  one
       unit, which can be yanked all at once.  Commands which do not kill text
       separate the chunks of text on the kill ring.

   RReeaaddlliinnee IInniittiiaalliizzaattiioonn
       RReeaaddlliinnee  is  customized  by putting commands in an initialization file
       (the _i_n_p_u_t_r_c file).  The name of this file is taken from the  value  of
       the  IINNPPUUTTRRCC shell variable.  If that variable is unset, the default is
       _~_/_._i_n_p_u_t_r_c.  If that file  does not exist or cannot be  read,  rreeaaddlliinnee
       looks  for _/_e_t_c_/_i_n_p_u_t_r_c.  When a program that uses the rreeaaddlliinnee library
       starts up, rreeaaddlliinnee reads the initialization  file  and  sets  the  key
       bindings and variables found there, before reading any user input.

       There  are  only  a  few  basic constructs allowed in the inputrc file.
       Blank lines are ignored.  Lines beginning with a ## are comments.  Lines
       beginning with a $$ indicate conditional constructs.  Other lines denote
       key bindings and variable settings.

       The default key-bindings in this section may be changed using key bind-
       ing commands in the _i_n_p_u_t_r_c file.  Programs that use the  rreeaaddlliinnee  li-
       brary, including bbaasshh, may add their own commands and bindings.

       For example, placing

              M-Control-u: universal-argument
       or
              C-Meta-u: universal-argument

       into  the _i_n_p_u_t_r_c would make M-C-u execute the rreeaaddlliinnee command _u_n_i_v_e_r_-
       _s_a_l_-_a_r_g_u_m_e_n_t.

       Key bindings may contain the following symbolic character  names:  _D_E_L,
       _E_S_C,  _E_S_C_A_P_E,  _L_F_D,  _N_E_W_L_I_N_E,  _R_E_T, _R_E_T_U_R_N, _R_U_B_O_U_T (a destructive back-
       space), _S_P_A_C_E, _S_P_C, and _T_A_B.

       In addition to command names, rreeaaddlliinnee allows keys to  be  bound  to  a
       string that is inserted when the key is pressed (a _m_a_c_r_o).  The differ-
       ence  between a macro and a command is that a macro is enclosed in sin-
       gle or double quotes.

   RReeaaddlliinnee KKeeyy BBiinnddiinnggss
       The syntax for controlling key bindings in the _i_n_p_u_t_r_c file is  simple.
       All  that is required is the name of the command or the text of a macro
       and a key sequence to which it should be bound.  The key  sequence  may
       be  specified in one of two ways: as a symbolic key name, possibly with
       _M_e_t_a_- or _C_o_n_t_r_o_l_- prefixes, or as a key sequence  composed  of  one  or
       more  characters  enclosed in double quotes.  The key sequence and name
       are separated by a colon.  There can be no whitespace between the  name
       and the colon.

       When using the form kkeeyynnaammee:_f_u_n_c_t_i_o_n_-_n_a_m_e or _m_a_c_r_o, _k_e_y_n_a_m_e is the name
       of a key spelled out in English.  For example:

              Control-u: universal-argument
              Meta-Rubout: backward-kill-word
              Control-o: "> output"

       In  the above example, _C_-_u is bound to the function uunniivveerrssaall--aarrgguummeenntt,
       _M_-_D_E_L is bound to the function bbaacckkwwaarrdd--kkiillll--wwoorrdd, and _C_-_o is bound  to
       run  the macro expressed on the right hand side (that is, to insert the
       text "> output" into the line).

       In the second form, ""kkeeyysseeqq"":_f_u_n_c_t_i_o_n_-_n_a_m_e  or  _m_a_c_r_o,  kkeeyysseeqq  differs
       from  kkeeyynnaammee above in that strings denoting an entire key sequence may
       be specified by placing the sequence within double  quotes.   Some  GNU
       Emacs  style  key escapes can be used, as in the following example, but
       none of the symbolic character names are recognized.

              "\C-u": universal-argument
              "\C-x\C-r": re-read-init-file
              "\e[11~": "Function Key 1"

       In this example, _C_-_u is again bound to the function uunniivveerrssaall--aarrgguummeenntt.
       _C_-_x _C_-_r is bound to the function rree--rreeaadd--iinniitt--ffiillee, and _E_S_C _[ _1 _1 _~  is
       bound to insert the text "Function Key 1".

       The  full set of GNU Emacs style escape sequences available when speci-
       fying key sequences is
              \\CC--    A control prefix.
              \\MM--    Adding the meta prefix or converting the following  char-
                     acter  to  a  meta  character,  as  described below under
                     ffoorrccee--mmeettaa--pprreeffiixx.
              \\ee     An escape character.
              \\\\     Backslash.
              \\""     Literal ", a double quote.
              \\''     Literal ', a single quote.

       In addition to the GNU Emacs style escape sequences, a  second  set  of
       backslash escapes is available:
              \\aa     alert (bell)
              \\bb     backspace
              \\dd     delete
              \\ff     form feed
              \\nn     newline
              \\rr     carriage return
              \\tt     horizontal tab
              \\vv     vertical tab
              \\_n_n_n   The  eight-bit  character  whose value is the octal value
                     _n_n_n (one to three digits).
              \\xx_H_H   The eight-bit character whose value  is  the  hexadecimal
                     value _H_H (one or two hex digits).

       When entering the text of a macro, single or double quotes must be used
       to indicate a macro definition.  Unquoted text is assumed to be a func-
       tion  name.   The backslash escapes described above are expanded in the
       macro body.  Backslash quotes any other character in  the  macro  text,
       including " and '.

       BBaasshh  will display or modify the current rreeaaddlliinnee key bindings with the
       bbiinndd builtin command.  The --oo eemmaaccss or --oo vvii options to the sseett builtin
       (see SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS below) change the editing mode  during  in-
       teractive use.

   RReeaaddlliinnee VVaarriiaabblleess
       RReeaaddlliinnee has variables that can be used to further customize its behav-
       ior.  A variable may be set in the _i_n_p_u_t_r_c file with a statement of the
       form

              sseett _v_a_r_i_a_b_l_e_-_n_a_m_e _v_a_l_u_e
       or using the bbiinndd builtin command (see SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS below).

       Except  where  noted,  rreeaaddlliinnee variables can take the values OOnn or OOffff
       (without regard to case).  Unrecognized  variable  names  are  ignored.
       When rreeaaddlliinnee reads a variable value, empty or null values, "on" (case-
       insensitive),  and  "1"  are  equivalent  to  OOnn.  All other values are
       equivalent to OOffff.

       The bbiinndd --VV command lists the current rreeaaddlliinnee variable names and  val-
       ues (see SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS below).

       The variables and their default values are:

       aaccttiivvee--rreeggiioonn--ssttaarrtt--ccoolloorr
              A  string  variable  that controls the text color and background
              when displaying the text in the active region (see the  descrip-
              tion  of eennaabbllee--aaccttiivvee--rreeggiioonn below).  This string must not take
              up any physical character positions on the display, so it should
              consist only of terminal escape sequences.  It is output to  the
              terminal  before displaying the text in the active region.  This
              variable is reset to the default  value  whenever  the  terminal
              type  changes.   The  default  value is the string that puts the
              terminal in standout mode, as obtained from the terminal's  ter-
              minfo description.  A sample value might be "\e[01;33m".
       aaccttiivvee--rreeggiioonn--eenndd--ccoolloorr
              A  string  variable  that  "undoes"  the  effects  of aaccttiivvee--rree--
              ggiioonn--ssttaarrtt--ccoolloorr and restores "normal" terminal display  appear-
              ance  after  displaying  text in the active region.  This string
              must not take up any physical character positions  on  the  dis-
              play,  so  it  should consist only of terminal escape sequences.
              It is output to the terminal after displaying the  text  in  the
              active  region.   This  variable  is  reset to the default value
              whenever the terminal type changes.  The default  value  is  the
              string  that  restores  the  terminal from standout mode, as ob-
              tained from the terminal's terminfo description.  A sample value
              might be "\e[0m".
       bbeellll--ssttyyllee ((aauuddiibbllee))
              Controls what happens when rreeaaddlliinnee wants to ring  the  terminal
              bell.  If set to nnoonnee, rreeaaddlliinnee never rings the bell.  If set to
              vviissiibbllee,  rreeaaddlliinnee  uses a visible bell if one is available.  If
              set to aauuddiibbllee, rreeaaddlliinnee attempts to ring the terminal's bell.
       bbiinndd--ttttyy--ssppeecciiaall--cchhaarrss ((OOnn))
              If set to OOnn, rreeaaddlliinnee attempts to bind the  control  characters
              that  are  treated  specially by the kernel's terminal driver to
              their rreeaaddlliinnee equivalents.  These override the default rreeaaddlliinnee
              bindings described here.  Type "stty -a" at a bbaasshh prompt to see
              your current terminal settings, including  the  special  control
              characters (usually cccchhaarrss).
       bblliinnkk--mmaattcchhiinngg--ppaarreenn ((OOffff))
              If set to OOnn, rreeaaddlliinnee attempts to briefly move the cursor to an
              opening parenthesis when a closing parenthesis is inserted.
       ccoolloorreedd--ccoommpplleettiioonn--pprreeffiixx ((OOffff))
              If  set  to  OOnn, when listing completions, rreeaaddlliinnee displays the
              common prefix of the set of possible completions using a differ-
              ent color.  The color definitions are taken from  the  value  of
              the LLSS__CCOOLLOORRSS environment variable.  If there is a color defini-
              tion in $$LLSS__CCOOLLOORRSS for the custom suffix ".readline-colored-com-
              pletion-prefix",  rreeaaddlliinnee uses this color for the common prefix
              instead of its default.
       ccoolloorreedd--ssttaattss ((OOffff))
              If set to OOnn, rreeaaddlliinnee displays possible completions using  dif-
              ferent  colors  to  indicate their file type.  The color defini-
              tions are taken from the  value  of  the  LLSS__CCOOLLOORRSS  environment
              variable.
       ccoommmmeenntt--bbeeggiinn (("##"))
              The  string  that  the  rreeaaddlliinnee iinnsseerrtt--ccoommmmeenntt command inserts.
              This command is bound to MM--## in emacs mode and to ## in  vi  com-
              mand mode.
       ccoommpplleettiioonn--ddiissppllaayy--wwiiddtthh ((--11))
              The  number  of  screen columns used to display possible matches
              when performing completion.  The value is ignored if it is  less
              than  0 or greater than the terminal screen width.  A value of 0
              causes matches to be displayed one per line.  The default  value
              is -1.
       ccoommpplleettiioonn--iiggnnoorree--ccaassee ((OOffff))
              If set to OOnn, rreeaaddlliinnee performs filename matching and completion
              in a case-insensitive fashion.
       ccoommpplleettiioonn--mmaapp--ccaassee ((OOffff))
              If  set  to  OOnn, and ccoommpplleettiioonn--iiggnnoorree--ccaassee is enabled, rreeaaddlliinnee
              treats hyphens (_-) and underscores (__) as equivalent  when  per-
              forming case-insensitive filename matching and completion.
       ccoommpplleettiioonn--pprreeffiixx--ddiissppllaayy--lleennggtthh ((00))
              The  maximum length in characters of the common prefix of a list
              of possible completions that is displayed without  modification.
              When  set to a value greater than zero, rreeaaddlliinnee replaces common
              prefixes longer than this value with an ellipsis when displaying
              possible completions.  If a completion begins with a period, and
              eeaaddlliinnee is completing filenames, it uses three  underscores  in-
              stead of an ellipsis.
       ccoommpplleettiioonn--qquueerryy--iitteemmss ((110000))
              This  determines when the user is queried about viewing the num-
              ber of possible completions generated  by  the  ppoossssiibbllee--ccoommppllee--
              ttiioonnss  command.  It may be set to any integer value greater than
              or equal to zero.  If the  number  of  possible  completions  is
              greater  than  or  equal to the value of this variable, rreeaaddlliinnee
              asks whether or not the user  wishes  to  view  them;  otherwise
              rreeaaddlliinnee  simply lists them on the terminal.  A zero value means
              rreeaaddlliinnee should never ask; negative values are treated as zero.
       ccoonnvveerrtt--mmeettaa ((OOnn))
              If set to OOnn, rreeaaddlliinnee converts characters it  reads  that  have
              the  eighth  bit  set  to  an ASCII key sequence by clearing the
              eighth bit and prefixing it with an escape character (converting
              the character to have the meta prefix).  The default is _O_n,  but
              rreeaaddlliinnee  sets it to _O_f_f if the locale contains characters whose
              encodings may include bytes with the eighth bit set.  This vari-
              able is dependent on  the  LLCC__CCTTYYPPEE  locale  category,  and  may
              change  if  the  locale changes.  This variable also affects key
              bindings; see the description of ffoorrccee--mmeettaa--pprreeffiixx below.
       ddiissaabbllee--ccoommpplleettiioonn ((OOffff))
              If set to OOnn, rreeaaddlliinnee  inhibits  word  completion.   Completion
              characters are inserted into the line as if they had been mapped
              to sseellff--iinnsseerrtt.
       eecchhoo--ccoonnttrrooll--cchhaarraacctteerrss ((OOnn))
              When  set to OOnn, on operating systems that indicate they support
              it, rreeaaddlliinnee echoes a character corresponding to a signal gener-
              ated from the keyboard.
       eeddiittiinngg--mmooddee ((eemmaaccss))
              Controls whether rreeaaddlliinnee uses a set of key bindings similar  to
              _E_m_a_c_s or _v_i.  eeddiittiinngg--mmooddee can be set to either eemmaaccss or vvii.
       eemmaaccss--mmooddee--ssttrriinngg ((@@))
              If  the  _s_h_o_w_-_m_o_d_e_-_i_n_-_p_r_o_m_p_t variable is enabled, this string is
              displayed immediately before the last line of the primary prompt
              when emacs editing mode is active.  The value is expanded like a
              key binding, so the standard set of meta- and control-  prefixes
              and  backslash escape sequences is available.  The \1 and \2 es-
              capes begin and end sequences of non-printing characters,  which
              can  be  used to embed a terminal control sequence into the mode
              string.
       eennaabbllee--aaccttiivvee--rreeggiioonn ((OOnn))
              When this variable is set to _O_n, rreeaaddlliinnee  allows  certain  com-
              mands to designate the region as _a_c_t_i_v_e.  When the region is ac-
              tive, rreeaaddlliinnee highlights the text in the region using the value
              of the aaccttiivvee--rreeggiioonn--ssttaarrtt--ccoolloorr variable, which defaults to the
              string  that  enables  the terminal's standout mode.  The active
              region shows the text inserted by bracketed-paste and any match-
              ing  text  found  by  incremental  and  non-incremental  history
              searches.
       eennaabbllee--bbrraacckkeetteedd--ppaassttee ((OOnn))
              When  set to OOnn, rreeaaddlliinnee configures the terminal to insert each
              paste into the editing buffer as a single string of  characters,
              instead  of  treating each character as if it had been read from
              the keyboard.  This is called _b_r_a_c_k_e_t_e_d_-_p_a_s_t_e _m_o_d_e; it  prevents
              rreeaaddlliinnee  from  executing  any editing commands bound to key se-
              quences appearing in the pasted text.
       eennaabbllee--kkeeyyppaadd ((OOffff))
              When set to OOnn, rreeaaddlliinnee tries  to enable the application keypad
              when it is called.  Some systems need this to enable  the  arrow
              keys.
       eennaabbllee--mmeettaa--kkeeyy ((OOnn))
              When  set  to OOnn, rreeaaddlliinnee tries to enable any meta modifier key
              the terminal claims to support.  On many terminals, the Meta key
              is used to send eight-bit characters; this variable  checks  for
              the  terminal  capability that indicates the terminal can enable
              and disable a mode that sets  the  eighth  bit  of  a  character
              (0200)  if the Meta key is held down when the character is typed
              (a meta character).
       eexxppaanndd--ttiillddee ((OOffff))
              If set to OOnn, rreeaaddlliinnee performs tilde expansion when it attempts
              word completion.
       ffoorrccee--mmeettaa--pprreeffiixx ((OOffff))
              If set to OOnn, rreeaaddlliinnee modifies its behavior  when  binding  key
              sequences  containing  \M-  or Meta- (see KKeeyy BBiinnddiinnggss above) by
              converting a key sequence of the form \M-_C or Meta-_C to the two-
              character  sequence  EESSCC  _C  (adding  the  meta   prefix).    If
              ffoorrccee--mmeettaa--pprreeffiixx is set to OOffff (the default), rreeaaddlliinnee uses the
              value  of the ccoonnvveerrtt--mmeettaa variable to determine whether to per-
              form this conversion: if ccoonnvveerrtt--mmeettaa is OOnn,  rreeaaddlliinnee  performs
              the  conversion described above; if it is OOffff, rreeaaddlliinnee converts
              _C to a meta character by setting the eighth bit (0200).
       hhiissttoorryy--pprreesseerrvvee--ppooiinntt ((OOffff))
              If set to OOnn, the history code attempts to place  point  at  the
              same  location on each history line retrieved with pprreevviioouuss--hhiiss--
              ttoorryy or nneexxtt--hhiissttoorryy.
       hhiissttoorryy--ssiizzee ((uunnsseett))
              Set the maximum number of history entries saved in  the  history
              list.   If set to zero, any existing history entries are deleted
              and no new entries are saved.  If set to a value less than zero,
              the number of history entries is not limited.  By default,  bbaasshh
              sets  the  maximum number of history entries to the value of the
              HHIISSTTSSIIZZEE shell variable.  Setting _h_i_s_t_o_r_y_-_s_i_z_e to a  non-numeric
              value will set the maximum number of history entries to 500.
       hhoorriizzoonnttaall--ssccrroollll--mmooddee ((OOffff))
              Setting this variable to OOnn makes rreeaaddlliinnee use a single line for
              display,  scrolling  the  input  horizontally on a single screen
              line when it becomes longer than the screen  width  rather  than
              wrapping  to  a new line.  This setting is automatically enabled
              for terminals of height 1.
       iinnppuutt--mmeettaa ((OOffff))
              If set to OOnn, rreeaaddlliinnee enables eight-bit input (that is, it does
              not clear the eighth bit in the characters it reads), regardless
              of what the terminal claims it can support.  The default is _O_f_f,
              but rreeaaddlliinnee sets it to _O_n if  the  locale  contains  characters
              whose encodings may include bytes with the eighth bit set.  This
              variable  is  dependent on the LLCC__CCTTYYPPEE locale category, and its
              value may change if the locale changes.  The name mmeettaa--ffllaagg is a
              synonym for iinnppuutt--mmeettaa.
       iisseeaarrcchh--tteerrmmiinnaattoorrss (("CC--[[CC--jj"))
              The string of characters that should  terminate  an  incremental
              search  without  subsequently  executing the character as a com-
              mand.  If this variable has not been given a value, the  charac-
              ters _E_S_C and CC--jj terminate an incremental search.
       kkeeyymmaapp ((eemmaaccss))
              Set  the current rreeaaddlliinnee keymap.  The set of valid keymap names
              is _e_m_a_c_s_, _e_m_a_c_s_-_s_t_a_n_d_a_r_d_, _e_m_a_c_s_-_m_e_t_a_,  _e_m_a_c_s_-_c_t_l_x_,  _v_i_,  _v_i_-_c_o_m_-
              _m_a_n_d,  and  _v_i_-_i_n_s_e_r_t.  _v_i is equivalent to _v_i_-_c_o_m_m_a_n_d; _e_m_a_c_s is
              equivalent to _e_m_a_c_s_-_s_t_a_n_d_a_r_d.  The default value is  _e_m_a_c_s;  the
              value of eeddiittiinngg--mmooddee also affects the default keymap.
       kkeeyysseeqq--ttiimmeeoouutt ((550000))
              Specifies  the  duration rreeaaddlliinnee will wait for a character when
              reading an ambiguous key sequence (one that can form a  complete
              key sequence using the input read so far, or can take additional
              input  to complete a longer key sequence).  If rreeaaddlliinnee does not
              receive any input within the timeout, it uses  the  shorter  but
              complete  key sequence.  The value is specified in milliseconds,
              so a value of 1000 means that rreeaaddlliinnee will wait one second  for
              additional  input.  If this variable is set to a value less than
              or equal to zero, or to a non-numeric value, rreeaaddlliinnee waits  un-
              til  another key is pressed to decide which key sequence to com-
              plete.
       mmaarrkk--ddiirreeccttoorriieess ((OOnn))
              If set to OOnn, completed directory names have a slash appended.
       mmaarrkk--mmooddiiffiieedd--lliinneess ((OOffff))
              If set to OOnn, rreeaaddlliinnee displays history  lines  that  have  been
              modified with a preceding asterisk (**).
       mmaarrkk--ssyymmlliinnkkeedd--ddiirreeccttoorriieess ((OOffff))
              If set to OOnn, completed names which are symbolic links to direc-
              tories  have  a slash appended, subject to the value of mmaarrkk--ddii--
              rreeccttoorriieess.
       mmaattcchh--hhiiddddeenn--ffiilleess ((OOnn))
              This variable, when set to OOnn, forces rreeaaddlliinnee  to  match  files
              whose  names  begin  with  a "."  (hidden files) when performing
              filename completion.  If set to OOffff, the user must  include  the
              leading "."  in the filename to be completed.
       mmeennuu--ccoommpplleettee--ddiissppllaayy--pprreeffiixx ((OOffff))
              If  set to OOnn, menu completion displays the common prefix of the
              list of possible completions (which may be empty) before cycling
              through the list.
       oouuttppuutt--mmeettaa ((OOffff))
              If set to OOnn, rreeaaddlliinnee displays characters with the  eighth  bit
              set  directly  rather  than  as a meta-prefixed escape sequence.
              The default is _O_f_f, but rreeaaddlliinnee sets it to  _O_n  if  the  locale
              contains  characters  whose encodings may include bytes with the
              eighth bit set.  This variable is dependent on the LLCC__CCTTYYPPEE  lo-
              cale category, and its value may change if the locale changes.
       ppaaggee--ccoommpplleettiioonnss ((OOnn))
              If set to OOnn, rreeaaddlliinnee uses an internal pager resembling _m_o_r_e(1)
              to display a screenful of possible completions at a time.
       pprreeffeerr--vviissiibbllee--bbeellll
              See bbeellll--ssttyyllee.
       pprriinntt--ccoommpplleettiioonnss--hhoorriizzoonnttaallllyy ((OOffff))
              If  set to OOnn, rreeaaddlliinnee displays completions with matches sorted
              horizontally in alphabetical order, rather than down the screen.
       rreevveerrtt--aallll--aatt--nneewwlliinnee ((OOffff))
              If set to OOnn, rreeaaddlliinnee will undo all changes  to  history  lines
              before  returning  when executing aacccceepptt--lliinnee.  By default, his-
              tory lines may be modified  and  retain  individual  undo  lists
              across calls to rreeaaddlliinnee.
       sseeaarrcchh--iiggnnoorree--ccaassee ((OOffff))
              If  set to OOnn, rreeaaddlliinnee performs incremental and non-incremental
              history list searches in a case-insensitive fashion.
       sshhooww--aallll--iiff--aammbbiigguuoouuss ((OOffff))
              This alters the default behavior of  the  completion  functions.
              If set to OOnn, words which have more than one possible completion
              cause  the  matches  to be listed immediately instead of ringing
              the bell.
       sshhooww--aallll--iiff--uunnmmooddiiffiieedd ((OOffff))
              This alters the default behavior of the completion functions  in
              a fashion similar to sshhooww--aallll--iiff--aammbbiigguuoouuss.  If set to OOnn, words
              which  have more than one possible completion without any possi-
              ble partial completion (the possible completions don't  share  a
              common  prefix)  cause  the matches to be listed immediately in-
              stead of ringing the bell.
       sshhooww--mmooddee--iinn--pprroommpptt ((OOffff))
              If set to OOnn, add a string to the beginning of the prompt  indi-
              cating  the  editing  mode:  emacs, vi command, or vi insertion.
              The mode strings are user-settable (e.g., _e_m_a_c_s_-_m_o_d_e_-_s_t_r_i_n_g).
       sskkiipp--ccoommpplleetteedd--tteexxtt ((OOffff))
              If set to OOnn, this alters the default completion  behavior  when
              inserting  a  single match into the line.  It's only active when
              performing completion in the middle  of  a  word.   If  enabled,
              rreeaaddlliinnee  does  not  insert  characters from the completion that
              match characters after point in the  word  being  completed,  so
              portions of the word following the cursor are not duplicated.
       vvii--ccmmdd--mmooddee--ssttrriinngg ((((ccmmdd))))
              If  the  _s_h_o_w_-_m_o_d_e_-_i_n_-_p_r_o_m_p_t variable is enabled, this string is
              displayed immediately before the last line of the primary prompt
              when vi editing mode is active and in command mode.   The  value
              is expanded like a key binding, so the standard set of meta- and
              control-  prefixes  and backslash escape sequences is available.
              The \1 and \2 escapes begin and end  sequences  of  non-printing
              characters,  which  can  be used to embed a terminal control se-
              quence into the mode string.
       vvii--iinnss--mmooddee--ssttrriinngg ((((iinnss))))
              If the _s_h_o_w_-_m_o_d_e_-_i_n_-_p_r_o_m_p_t variable is enabled, this  string  is
              displayed immediately before the last line of the primary prompt
              when vi editing mode is active and in insertion mode.  The value
              is expanded like a key binding, so the standard set of meta- and
              control-  prefixes  and backslash escape sequences is available.
              The \1 and \2 escapes begin and end  sequences  of  non-printing
              characters,  which  can  be used to embed a terminal control se-
              quence into the mode string.
       vviissiibbllee--ssttaattss ((OOffff))
              If set to OOnn, a character denoting a file's type as reported  by
              _s_t_a_t(2)  is  appended to the filename when listing possible com-
              pletions.

   RReeaaddlliinnee CCoonnddiittiioonnaall CCoonnssttrruuccttss
       RReeaaddlliinnee implements a facility similar in  spirit  to  the  conditional
       compilation  features  of  the C preprocessor which allows key bindings
       and variable settings to be performed as the result  of  tests.   There
       are four parser directives available.

       $$iiff    The  $$iiff construct allows bindings to be made based on the edit-
              ing mode, the terminal being  used,  or  the  application  using
              rreeaaddlliinnee.   The text of the test, after any comparison operator,
              extends to the end of the line; unless otherwise noted, no char-
              acters are required to isolate it.

              mmooddee   The mmooddee== form of the  $$iiff  directive  is  used  to  test
                     whether  rreeaaddlliinnee  is  in  emacs or vi mode.  This may be
                     used in conjunction with the sseett kkeeyymmaapp command, for  in-
                     stance,   to  set  bindings  in  the  _e_m_a_c_s_-_s_t_a_n_d_a_r_d  and
                     _e_m_a_c_s_-_c_t_l_x keymaps only if rreeaaddlliinnee is  starting  out  in
                     emacs mode.

              tteerrmm   The  tteerrmm==  form may be used to include terminal-specific
                     key bindings, perhaps to bind the key sequences output by
                     the terminal's function keys.  The word on the right side
                     of the == is tested against both the full name of the ter-
                     minal and the portion of the  terminal  name  before  the
                     first  --.   This  allows  _x_t_e_r_m  to  match both _x_t_e_r_m and
                     _x_t_e_r_m_-_2_5_6_c_o_l_o_r, for instance.

              vveerrssiioonn
                     The vveerrssiioonn test  may  be  used  to  perform  comparisons
                     against  specific rreeaaddlliinnee versions.  The vveerrssiioonn expands
                     to the current rreeaaddlliinnee version.  The set  of  comparison
                     operators  includes  ==,  (and  ====), !!==, <<==, >>==, <<, and >>.
                     The version number supplied on the right side of the  op-
                     erator  consists  of  a major version number, an optional
                     decimal point, and an optional minor version (e.g., 77..11).
                     If the minor version is omitted, it defaults to  00.   The
                     operator  may  be  separated  from the string vveerrssiioonn and
                     from the version number argument by whitespace.

              _a_p_p_l_i_c_a_t_i_o_n
                     The _a_p_p_l_i_c_a_t_i_o_n construct is used to include application-
                     specific settings.  Each program using the  rreeaaddlliinnee  li-
                     brary  sets  the  _a_p_p_l_i_c_a_t_i_o_n _n_a_m_e, and an initialization
                     file can test for a particular value.  This could be used
                     to bind key sequences to functions useful for a  specific
                     program.   For instance, the following command adds a key
                     sequence that quotes the  current  or  previous  word  in
                     bbaasshh:

                     $$iiff Bash
                     # Quote the current or previous word
                     "\C-xq": "\eb\"\ef\""
                     $$eennddiiff

              _v_a_r_i_a_b_l_e
                     The _v_a_r_i_a_b_l_e construct provides simple equality tests for
                     rreeaaddlliinnee  variables and values.  The permitted comparison
                     operators are _=, _=_=, and _!_=.  The variable name  must  be
                     separated from the comparison operator by whitespace; the
                     operator  may  be  separated  from the value on the right
                     hand side by whitespace.  String  and  boolean  variables
                     may  be tested.  Boolean variables must be tested against
                     the values _o_n and _o_f_f.

       $$eellssee  Commands in this branch of the $$iiff directive are executed if the
              test fails.

       $$eennddiiff This command, as seen in the previous example, terminates an $$iiff
              command.

       $$iinncclluuddee
              This directive takes a single filename as an argument and  reads
              commands and key bindings from that file.  For example, the fol-
              lowing directive would read _/_e_t_c_/_i_n_p_u_t_r_c:

              $$iinncclluuddee  _/_e_t_c_/_i_n_p_u_t_r_c

   SSeeaarrcchhiinngg
       RReeaaddlliinnee  provides  commands  for searching through the command history
       (see HHIISSTTOORRYY below) for lines containing a specified string.  There are
       two search modes: _i_n_c_r_e_m_e_n_t_a_l and _n_o_n_-_i_n_c_r_e_m_e_n_t_a_l.

       Incremental searches begin before the  user  has  finished  typing  the
       search  string.  As each character of the search string is typed, rreeaadd--
       lliinnee displays the next entry from the history matching the string typed
       so far.  An incremental search requires  only  as  many  characters  as
       needed  to  find  the  desired history entry.  When using emacs editing
       mode, type CC--rr to search backward  in  the  history  for  a  particular
       string.   Typing CC--ss searches forward through the history.  The charac-
       ters present in the value of the iisseeaarrcchh--tteerrmmiinnaattoorrss variable are  used
       to  terminate an incremental search.  If that variable has not been as-
       signed a value, _E_S_C and  CC--jj  terminate  an  incremental  search.   CC--gg
       aborts  an incremental search and restores the original line.  When the
       search is terminated, the history entry containing  the  search  string
       becomes the current line.

       To  find other matching entries in the history list, type CC--rr or CC--ss as
       appropriate.  This searches backward or forward in the history for  the
       next  entry matching the search string typed so far.  Any other key se-
       quence bound to a rreeaaddlliinnee command terminates the search  and  executes
       that  command.   For  instance, a newline terminates the search and ac-
       cepts the line, thereby executing the command from the history list.  A
       movement command will terminate the search, make the  last  line  found
       the current line, and begin editing.

       RReeaaddlliinnee remembers the last incremental search string.  If two CC--rrs are
       typed  without any intervening characters defining a new search string,
       rreeaaddlliinnee uses any remembered search string.

       Non-incremental searches read the entire search string before  starting
       to search for matching history entries.  The search string may be typed
       by the user or be part of the contents of the current line.

   RReeaaddlliinnee CCoommmmaanndd NNaammeess
       The  following  is  a list of the names of the commands and the default
       key sequences to which they are bound.  Command names without an accom-
       panying key sequence are unbound by default.

       In the following descriptions, _p_o_i_n_t refers to the current cursor posi-
       tion, and _m_a_r_k refers to a cursor position saved by the  sseett--mmaarrkk  com-
       mand.   The  text  between the point and mark is referred to as the _r_e_-
       _g_i_o_n.  RReeaaddlliinnee has the concept of an _a_c_t_i_v_e _r_e_g_i_o_n: when the region is
       active, rreeaaddlliinnee redisplay highlights the region using the value of the
       aaccttiivvee--rreeggiioonn--ssttaarrtt--ccoolloorr variable.  The eennaabbllee--aaccttiivvee--rreeggiioonn  rreeaaddlliinnee
       variable turns this on and off.  Several commands set the region to ac-
       tive; those are noted below.

   CCoommmmaannddss ffoorr MMoovviinngg
       bbeeggiinnnniinngg--ooff--lliinnee ((CC--aa))
              Move  to  the start of the current line.  This may also be bound
              to the Home key on some keyboards.
       eenndd--ooff--lliinnee ((CC--ee))
              Move to the end of the line.  This may also be bound to the  End
              key on some keyboards.
       ffoorrwwaarrdd--cchhaarr ((CC--ff))
              Move  forward  a character.  This may also be bound to the right
              arrow key on some keyboards.
       bbaacckkwwaarrdd--cchhaarr ((CC--bb))
              Move back a character.  This may also be bound to the left arrow
              key on some keyboards.
       ffoorrwwaarrdd--wwoorrdd ((MM--ff))
              Move forward to the end of the next word.  Words are composed of
              alphanumeric characters (letters and digits).
       bbaacckkwwaarrdd--wwoorrdd ((MM--bb))
              Move back to the start of the current or previous  word.   Words
              are composed of alphanumeric characters (letters and digits).
       sshheellll--ffoorrwwaarrdd--wwoorrdd ((MM--CC--ff))
              Move  forward  to the end of the next word.  Words are delimited
              by non-quoted shell metacharacters.
       sshheellll--bbaacckkwwaarrdd--wwoorrdd ((MM--CC--bb))
              Move back to the start of the current or previous  word.   Words
              are delimited by non-quoted shell metacharacters.
       pprreevviioouuss--ssccrreeeenn--lliinnee
              Attempt  to move point to the same physical screen column on the
              previous physical screen line.  This will not have  the  desired
              effect  if  the current rreeaaddlliinnee line does not take up more than
              one physical line or if point is not greater than the length  of
              the prompt plus the screen width.
       nneexxtt--ssccrreeeenn--lliinnee
              Attempt  to move point to the same physical screen column on the
              next physical screen line.  This will not have the  desired  ef-
              fect if the current rreeaaddlliinnee line does not take up more than one
              physical  line  or if the length of the current rreeaaddlliinnee line is
              not greater than the length of the prompt plus the screen width.
       cclleeaarr--ddiissppllaayy ((MM--CC--ll))
              Clear the screen and, if  possible,  the  terminal's  scrollback
              buffer,  then  redraw the current line, leaving the current line
              at the top of the screen.
       cclleeaarr--ssccrreeeenn ((CC--ll))
              Clear the screen, then redraw the current line, leaving the cur-
              rent line at the top of the screen.  With  a  numeric  argument,
              refresh the current line without clearing the screen.
       rreeddrraaww--ccuurrrreenntt--lliinnee
              Refresh the current line.

   CCoommmmaannddss ffoorr MMaanniippuullaattiinngg tthhee HHiissttoorryy
       aacccceepptt--lliinnee ((NNeewwlliinnee,, RReettuurrnn))
              Accept the line regardless of where the cursor is.  If this line
              is  non-empty, add it to the history list according to the state
              of the HHIISSTTCCOONNTTRROOLL and HHIISSTTIIGGNNOORREE variables.  If the line  is  a
              modified  history line, restore the history line to its original
              state.
       pprreevviioouuss--hhiissttoorryy ((CC--pp))
              Fetch the previous command from the history list, moving back in
              the list.  This may also be bound to the up arrow  key  on  some
              keyboards.
       nneexxtt--hhiissttoorryy ((CC--nn))
              Fetch  the next command from the history list, moving forward in
              the list.  This may also be bound to the down arrow key on  some
              keyboards.
       bbeeggiinnnniinngg--ooff--hhiissttoorryy ((MM--<<))
              Move to the first line in the history.
       eenndd--ooff--hhiissttoorryy ((MM-->>))
              Move  to  the end of the input history, i.e., the line currently
              being entered.
       ooppeerraattee--aanndd--ggeett--nneexxtt ((CC--oo))
              Accept the current line for execution as if a newline  had  been
              entered,  and  fetch  the next line relative to the current line
              from the history for editing.  A numeric argument, if  supplied,
              specifies the history entry to use instead of the current line.
       ffeettcchh--hhiissttoorryy
              With  a numeric argument, fetch that entry from the history list
              and make it the current line.  Without an argument, move back to
              the first entry in the history list.
       rreevveerrssee--sseeaarrcchh--hhiissttoorryy ((CC--rr))
              Search backward starting at the current  line  and  moving  "up"
              through  the  history  as  necessary.   This  is  an incremental
              search.  This command sets the region to the  matched  text  and
              activates the region.
       ffoorrwwaarrdd--sseeaarrcchh--hhiissttoorryy ((CC--ss))
              Search  forward  starting  at the current line and moving "down"
              through the  history  as  necessary.   This  is  an  incremental
              search.   This  command  sets the region to the matched text and
              activates the region.
       nnoonn--iinnccrreemmeennttaall--rreevveerrssee--sseeaarrcchh--hhiissttoorryy ((MM--pp))
              Search backward through the history starting at the current line
              using a non-incremental search for  a  string  supplied  by  the
              user.  The search string may match anywhere in a history line.
       nnoonn--iinnccrreemmeennttaall--ffoorrwwaarrdd--sseeaarrcchh--hhiissttoorryy ((MM--nn))
              Search  forward  through  the  history  using  a non-incremental
              search for a string supplied by the user.  The search string may
              match anywhere in a history line.
       hhiissttoorryy--sseeaarrcchh--bbaacckkwwaarrdd
              Search backward through the history for the string of characters
              between the start of the current line and the point.  The search
              string must match at the beginning of a history line.  This is a
              non-incremental search.  This may be bound to the Page Up key on
              some keyboards.
       hhiissttoorryy--sseeaarrcchh--ffoorrwwaarrdd
              Search forward through the history for the string of  characters
              between the start of the current line and the point.  The search
              string must match at the beginning of a history line.  This is a
              non-incremental  search.  This may be bound to the Page Down key
              on some keyboards.
       hhiissttoorryy--ssuubbssttrriinngg--sseeaarrcchh--bbaacckkwwaarrdd
              Search backward through the history for the string of characters
              between the start of the current line and the point.  The search
              string may match anywhere in a history line.  This is a  non-in-
              cremental search.
       hhiissttoorryy--ssuubbssttrriinngg--sseeaarrcchh--ffoorrwwaarrdd
              Search  forward through the history for the string of characters
              between the start of the current line and the point.  The search
              string may match anywhere in a history line.  This is a  non-in-
              cremental search.
       yyaannkk--nntthh--aarrgg ((MM--CC--yy))
              Insert  the  first argument to the previous command (usually the
              second word on the previous line) at point.  With an argument _n,
              insert the _nth word from the previous command (the words in  the
              previous  command  begin  with word 0).  A negative argument in-
              serts the _nth word from the end of the previous  command.   Once
              the  argument _n is computed, this uses the history expansion fa-
              cilities to extract the _nth word, as if the "!_n" history  expan-
              sion had been specified.
       yyaannkk--llaasstt--aarrgg ((MM--..,, MM--__))
              Insert  the last argument to the previous command (the last word
              of the previous history entry).  With a numeric argument, behave
              exactly like yyaannkk--nntthh--aarrgg.  Successive  calls  to  yyaannkk--llaasstt--aarrgg
              move  back through the history list, inserting the last word (or
              the word specified by the argument to the first  call)  of  each
              line in turn.  Any numeric argument supplied to these successive
              calls  determines  the direction to move through the history.  A
              negative argument switches the  direction  through  the  history
              (back  or  forward).  This uses the history expansion facilities
              to extract the last word, as if the "!$" history  expansion  had
              been specified.
       sshheellll--eexxppaanndd--lliinnee ((MM--CC--ee))
              Expand  the line by performing shell word expansions.  This per-
              forms alias and history expansion, $$'_s_t_r_i_n_g' and $$"_s_t_r_i_n_g" quot-
              ing, tilde expansion, parameter and variable  expansion,  arith-
              metic  expansion,  command and process substitution, word split-
              ting, and quote removal.  An explicit argument  suppresses  com-
              mand  and process substitution.  See HHIISSTTOORRYY EEXXPPAANNSSIIOONN below for
              a description of history expansion.
       hhiissttoorryy--eexxppaanndd--lliinnee ((MM--^^))
              Perform history expansion on the current line.  See HHIISSTTOORRYY  EEXX--
              PPAANNSSIIOONN below for a description of history expansion.
       mmaaggiicc--ssppaaccee
              Perform  history  expansion  on  the  current  line and insert a
              space.  See HHIISSTTOORRYY EEXXPPAANNSSIIOONN below for a description of history
              expansion.
       aalliiaass--eexxppaanndd--lliinnee
              Perform alias expansion on the current line.  See AALLIIAASSEESS  above
              for a description of alias expansion.
       hhiissttoorryy--aanndd--aalliiaass--eexxppaanndd--lliinnee
              Perform history and alias expansion on the current line.
       iinnsseerrtt--llaasstt--aarrgguummeenntt ((MM--..,, MM--__))
              A synonym for yyaannkk--llaasstt--aarrgg.
       eeddiitt--aanndd--eexxeeccuuttee--ccoommmmaanndd ((CC--xx CC--ee))
              Invoke  an  editor  on the current command line, and execute the
              result as shell commands.  BBaasshh attempts to invoke $$VVIISSUUAALL, $$EEDD--
              IITTOORR, and _e_m_a_c_s as the editor, in that order.

   CCoommmmaannddss ffoorr CChhaannggiinngg TTeexxtt
       _e_n_d_-_o_f_-_f_i_l_e ((uussuuaallllyy CC--dd))
              The character indicating end-of-file as  set,  for  example,  by
              _s_t_t_y(1).  If this character is read when there are no characters
              on the line, and point is at the beginning of the line, rreeaaddlliinnee
              interprets it as the end of input and returns EEOOFF.
       ddeelleettee--cchhaarr ((CC--dd))
              Delete the character at point.  If this function is bound to the
              same character as the tty EEOOFF character, as CC--dd commonly is, see
              above for the effects.  This may also be bound to the Delete key
              on some keyboards.
       bbaacckkwwaarrdd--ddeelleettee--cchhaarr ((RRuubboouutt))
              Delete  the  character  behind the cursor.  When given a numeric
              argument, save the deleted text on the kill ring.
       ffoorrwwaarrdd--bbaacckkwwaarrdd--ddeelleettee--cchhaarr
              Delete the character under the cursor, unless the cursor  is  at
              the end of the line, in which case the character behind the cur-
              sor is deleted.
       qquuootteedd--iinnsseerrtt ((CC--qq,, CC--vv))
              Add  the next character typed to the line verbatim.  This is how
              to insert characters like CC--qq, for example.
       ttaabb--iinnsseerrtt ((CC--vv TTAABB))
              Insert a tab character.
       sseellff--iinnsseerrtt ((aa,, bb,, AA,, 11,, !!,, ...))
              Insert the character typed.
       bbrraacckkeetteedd--ppaassttee--bbeeggiinn
              This function is intended to be bound to the  "bracketed  paste"
              escape  sequence  sent  by some terminals, and such a binding is
              assigned by default.  It allows rreeaaddlliinnee to  insert  the  pasted
              text  as  a single unit without treating each character as if it
              had been read from the keyboard.  The pasted characters are  in-
              serted  as  if each one was bound to sseellff--iinnsseerrtt instead of exe-
              cuting any editing commands.
              Bracketed paste sets the region to the inserted text  and  acti-
              vates the region.
       ttrraannssppoossee--cchhaarrss ((CC--tt))
              Drag  the  character  before point forward over the character at
              point, moving point forward as well.  If point is at the end  of
              the  line, then this transposes the two characters before point.
              Negative arguments have no effect.
       ttrraannssppoossee--wwoorrddss ((MM--tt))
              Drag the word before point past the  word  after  point,  moving
              point  past  that  word  as well.  If point is at the end of the
              line, this transposes the last two words on the line.
       sshheellll--ttrraannssppoossee--wwoorrddss ((MM--CC--tt))
              Drag the word before point past the  word  after  point,  moving
              point  past that word as well.  If the insertion point is at the
              end of the line, this transposes the last two words on the line.
              Word  boundaries  are  the  same   as   sshheellll--ffoorrwwaarrdd--wwoorrdd   and
              sshheellll--bbaacckkwwaarrdd--wwoorrdd.
       uuppccaassee--wwoorrdd ((MM--uu))
              Uppercase  the current (or following) word.  With a negative ar-
              gument, uppercase the previous word, but do not move point.
       ddoowwnnccaassee--wwoorrdd ((MM--ll))
              Lowercase the current (or following) word.  With a negative  ar-
              gument, lowercase the previous word, but do not move point.
       ccaappiittaalliizzee--wwoorrdd ((MM--cc))
              Capitalize the current (or following) word.  With a negative ar-
              gument, capitalize the previous word, but do not move point.
       oovveerrwwrriittee--mmooddee
              Toggle  overwrite mode.  With an explicit positive numeric argu-
              ment, switches to overwrite mode.  With an explicit non-positive
              numeric argument, switches to insert mode.  This command affects
              only eemmaaccss mode; vvii mode does overwrite differently.  Each  call
              to _r_e_a_d_l_i_n_e_(_) starts in insert mode.
              In  overwrite  mode, characters bound to sseellff--iinnsseerrtt replace the
              text at point rather than pushing the text to the right.   Char-
              acters  bound  to bbaacckkwwaarrdd--ddeelleettee--cchhaarr replace the character be-
              fore point with a space.  By default, this command  is  unbound,
              but may be bound to the Insert key on some keyboards.

   KKiilllliinngg aanndd YYaannkkiinngg
       kkiillll--lliinnee ((CC--kk))
              Kill the text from point to the end of the current line.  With a
              negative  numeric argument, kill backward from the cursor to the
              beginning of the line.
       bbaacckkwwaarrdd--kkiillll--lliinnee ((CC--xx RRuubboouutt))
              Kill backward to the beginning of the current line.  With a neg-
              ative numeric argument, kill forward from the cursor to the  end
              of the line.
       uunniixx--lliinnee--ddiissccaarrdd ((CC--uu))
              Kill  backward  from  point to the beginning of the line, saving
              the killed text on the kill-ring.
       kkiillll--wwhhoollee--lliinnee
              Kill all characters on the current line, no matter  where  point
              is.
       kkiillll--wwoorrdd ((MM--dd))
              Kill  from  point  to the end of the current word, or if between
              words, to the end of the next word.   Word  boundaries  are  the
              same as those used by ffoorrwwaarrdd--wwoorrdd.
       bbaacckkwwaarrdd--kkiillll--wwoorrdd ((MM--RRuubboouutt))
              Kill  the  word  behind  point.  Word boundaries are the same as
              those used by bbaacckkwwaarrdd--wwoorrdd.
       sshheellll--kkiillll--wwoorrdd ((MM--CC--dd))
              Kill from point to the end of the current word,  or  if  between
              words,  to  the  end  of the next word.  Word boundaries are the
              same as those used by sshheellll--ffoorrwwaarrdd--wwoorrdd.
       sshheellll--bbaacckkwwaarrdd--kkiillll--wwoorrdd
              Kill the word behind point.  Word boundaries  are  the  same  as
              those used by sshheellll--bbaacckkwwaarrdd--wwoorrdd.
       uunniixx--wwoorrdd--rruubboouutt ((CC--ww))
              Kill  the  word behind point, using white space as a word bound-
              ary, saving the killed text on the kill-ring.
       uunniixx--ffiilleennaammee--rruubboouutt
              Kill the word behind point, using  white  space  and  the  slash
              character  as the word boundaries, saving the killed text on the
              kill-ring.
       ddeelleettee--hhoorriizzoonnttaall--ssppaaccee ((MM--\\))
              Delete all spaces and tabs around point.
       kkiillll--rreeggiioonn
              Kill the text in the current region.
       ccooppyy--rreeggiioonn--aass--kkiillll
              Copy the text in the region to the kill buffer,  so  it  can  be
              yanked immediately.
       ccooppyy--bbaacckkwwaarrdd--wwoorrdd
              Copy  the word before point to the kill buffer.  The word bound-
              aries are the same as bbaacckkwwaarrdd--wwoorrdd.
       ccooppyy--ffoorrwwaarrdd--wwoorrdd
              Copy the word following point to  the  kill  buffer.   The  word
              boundaries are the same as ffoorrwwaarrdd--wwoorrdd.
       yyaannkk ((CC--yy))
              Yank the top of the kill ring into the buffer at point.
       yyaannkk--ppoopp ((MM--yy))
              Rotate  the kill ring, and yank the new top.  Only works follow-
              ing yyaannkk or yyaannkk--ppoopp.

   NNuummeerriicc AArrgguummeennttss
       ddiiggiitt--aarrgguummeenntt ((MM--00,, MM--11,, ...,, MM----))
              Add this digit to the argument already accumulating, or start  a
              new argument.  M-- starts a negative argument.
       uunniivveerrssaall--aarrgguummeenntt
              This  is another way to specify an argument.  If this command is
              followed by one or more digits, optionally with a leading  minus
              sign,  those digits define the argument.  If the command is fol-
              lowed by digits, executing uunniivveerrssaall--aarrgguummeenntt again ends the nu-
              meric argument, but is otherwise ignored.  As a special case, if
              this command is immediately followed by a character that is nei-
              ther a digit nor minus sign, the argument  count  for  the  next
              command  is multiplied by four.  The argument count is initially
              one, so executing this function the first time makes  the  argu-
              ment count four, a second time makes the argument count sixteen,
              and so on.

   CCoommpplleettiinngg
       ccoommpplleettee ((TTAABB))
              Attempt  to  perform  completion on the text before point.  BBaasshh
              attempts completion by first checking for any programmable  com-
              pletions  for  the command word (see PPrrooggrraammmmaabbllee CCoommpplleettiioonn be-
              low), otherwise treating the text as a variable (if the text be-
              gins with $$), username (if the text begins with ~~), hostname (if
              the text begins with @@), or command  (including  aliases,  func-
              tions,  and  builtins)  in  turn.   If  none of these produces a
              match, it falls back to filename completion.
       ppoossssiibbllee--ccoommpplleettiioonnss ((MM--??))
              List the possible completions of the text  before  point.   When
              displaying completions, rreeaaddlliinnee sets the number of columns used
              for  display to the value of ccoommpplleettiioonn--ddiissppllaayy--wwiiddtthh, the value
              of the shell variable CCOOLLUUMMNNSS, or the screen width, in that  or-
              der.
       iinnsseerrtt--ccoommpplleettiioonnss ((MM--**))
              Insert  all completions of the text before point that would have
              been generated by ppoossssiibbllee--ccoommpplleettiioonnss, separated by a space.
       mmeennuu--ccoommpplleettee
              Similar to ccoommpplleettee, but replaces the word to be completed  with
              a  single  match from the list of possible completions.  Repeat-
              edly executing mmeennuu--ccoommpplleettee steps through the list of  possible
              completions,  inserting  each  match in turn.  At the end of the
              list of completions, mmeennuu--ccoommpplleettee rings the  bell  (subject  to
              the  setting  of bbeellll--ssttyyllee) and restores the original text.  An
              argument of _n moves _n positions forward in the list of  matches;
              a  negative argument moves backward through the list.  This com-
              mand is intended to be bound to TTAABB, but is unbound by default.
       mmeennuu--ccoommpplleettee--bbaacckkwwaarrdd
              Identical to mmeennuu--ccoommpplleettee, but moves backward through the  list
              of  possible  completions,  as if mmeennuu--ccoommpplleettee had been given a
              negative argument.  This command is unbound by default.
       eexxppoorrtt--ccoommpplleettiioonnss
              Perform completion on the word before point as  described  above
              and  write the list of possible completions to rreeaaddlliinnee's output
              stream using the following format, writing information on  sepa-
              rate lines:

              +o      the number of matches _N;
              +o      the word being completed;
              +o      _S:_E,  where  _S and _E are the start and end offsets of the
                     word in the rreeaaddlliinnee line buffer; then
              +o      each match, one per line

              If there are no matches, the first line will be  "0",  and  this
              command  does  not  print any output after the _S:_E.  If there is
              only a single match, this prints a single  line  containing  it.
              If  there  is more than one match, this prints the common prefix
              of the matches, which may be empty, on the first line after  the
              _S:_E, then the matches on subsequent lines.  In this case, _N will
              include the first line with the common prefix.

              The user or application should be able to accommodate the possi-
              bility of a blank line.  The intent is that the user or applica-
              tion  reads  _N lines after the line containing _S:_E to obtain the
              match list.  This command is unbound by default.

       ddeelleettee--cchhaarr--oorr--lliisstt
              Deletes the character under the cursor if not at  the  beginning
              or  end of the line (like ddeelleettee--cchhaarr).  At the end of the line,
              it behaves identically to ppoossssiibbllee--ccoommpplleettiioonnss.  This command is
              unbound by default.

       ccoommpplleettee--ffiilleennaammee ((MM--//))
              Attempt filename completion on the text before point.

       ppoossssiibbllee--ffiilleennaammee--ccoommpplleettiioonnss ((CC--xx //))
              List the possible completions of the text before point, treating
              it as a filename.

       ccoommpplleettee--uusseerrnnaammee ((MM--~~))
              Attempt completion on the text before point, treating  it  as  a
              username.

       ppoossssiibbllee--uusseerrnnaammee--ccoommpplleettiioonnss ((CC--xx ~~))
              List the possible completions of the text before point, treating
              it as a username.

       ccoommpplleettee--vvaarriiaabbllee ((MM--$$))
              Attempt  completion  on  the text before point, treating it as a
              shell variable.

       ppoossssiibbllee--vvaarriiaabbllee--ccoommpplleettiioonnss ((CC--xx $$))
              List the possible completions of the text before point, treating
              it as a shell variable.

       ccoommpplleettee--hhoossttnnaammee ((MM--@@))
              Attempt completion on the text before point, treating  it  as  a
              hostname.

       ppoossssiibbllee--hhoossttnnaammee--ccoommpplleettiioonnss ((CC--xx @@))
              List the possible completions of the text before point, treating
              it as a hostname.

       ccoommpplleettee--ccoommmmaanndd ((MM--!!))
              Attempt  completion  on  the text before point, treating it as a
              command name.  Command completion attempts  to  match  the  text
              against   aliases,   reserved   words,  shell  functions,  shell
              builtins, and finally executable filenames, in that order.

       ppoossssiibbllee--ccoommmmaanndd--ccoommpplleettiioonnss ((CC--xx !!))
              List the possible completions of the text before point, treating
              it as a command name.

       ddyynnaammiicc--ccoommpplleettee--hhiissttoorryy ((MM--TTAABB))
              Attempt completion on the text before point, comparing the  text
              against history list entries for possible completion matches.

       ddaabbbbrreevv--eexxppaanndd
              Attempt  menu completion on the text before point, comparing the
              text against lines from the history list for possible completion
              matches.

       ccoommpplleettee--iinnttoo--bbrraacceess ((MM--{{))
              Perform filename completion and insert the list of possible com-
              pletions enclosed within braces so the list is available to  the
              shell (see BBrraaccee EExxppaannssiioonn above).

   KKeeyybbooaarrdd MMaaccrrooss
       ssttaarrtt--kkbbdd--mmaaccrroo ((CC--xx (())
              Begin  saving  the  characters  typed  into the current keyboard
              macro.
       eenndd--kkbbdd--mmaaccrroo ((CC--xx ))))
              Stop saving the characters typed into the current keyboard macro
              and store the definition.
       ccaallll--llaasstt--kkbbdd--mmaaccrroo ((CC--xx ee))
              Re-execute the last keyboard macro defined, by making the  char-
              acters in the macro appear as if typed at the keyboard.
       pprriinntt--llaasstt--kkbbdd--mmaaccrroo (())
              Print  the  last keyboard macro defined in a format suitable for
              the _i_n_p_u_t_r_c file.

   MMiisscceellllaanneeoouuss
       rree--rreeaadd--iinniitt--ffiillee ((CC--xx CC--rr))
              Read in the contents of the _i_n_p_u_t_r_c file,  and  incorporate  any
              bindings or variable assignments found there.
       aabboorrtt ((CC--gg))
              Abort  the  current editing command and ring the terminal's bell
              (subject to the setting of bbeellll--ssttyyllee).
       ddoo--lloowweerrccaassee--vveerrssiioonn ((MM--AA,, MM--BB,, MM--_x,, ...))
              If the metafied character _x is uppercase, run the  command  that
              is bound to the corresponding metafied lowercase character.  The
              behavior is undefined if _x is already lowercase.
       pprreeffiixx--mmeettaa ((EESSCC))
              Metafy the next character typed.  EESSCC ff is equivalent to MMeettaa--ff.
       uunnddoo ((CC--__,, CC--xx CC--uu))
              Incremental undo, separately remembered for each line.
       rreevveerrtt--lliinnee ((MM--rr))
              Undo  all changes made to this line.  This is like executing the
              uunnddoo command enough times to return  the  line  to  its  initial
              state.
       ttiillddee--eexxppaanndd ((MM--&&))
              Perform tilde expansion on the current word.
       sseett--mmaarrkk ((CC--@@,, MM--<<ssppaaccee>>))
              Set  the  mark to the point.  If a numeric argument is supplied,
              set the mark to that position.
       eexxcchhaannggee--ppooiinntt--aanndd--mmaarrkk ((CC--xx CC--xx))
              Swap the point with the mark.  Set the current  cursor  position
              to the saved position, then set the mark to the old cursor posi-
              tion.
       cchhaarraacctteerr--sseeaarrcchh ((CC--]]))
              Read  a  character and move point to the next occurrence of that
              character.  A negative argument  searches  for  previous  occur-
              rences.
       cchhaarraacctteerr--sseeaarrcchh--bbaacckkwwaarrdd ((MM--CC--]]))
              Read  a  character  and move point to the previous occurrence of
              that character.  A negative argument searches for subsequent oc-
              currences.
       sskkiipp--ccssii--sseeqquueennccee
              Read enough characters to consume a multi-key sequence  such  as
              those  defined  for keys like Home and End.  CSI sequences begin
              with a Control Sequence Indicator (CSI), usually _E_S_C _[.  If this
              sequence is bound to "\e[", keys producing CSI sequences have no
              effect unless explicitly bound to a rreeaaddlliinnee command, instead of
              inserting stray characters into the editing buffer.  This is un-
              bound by default, but usually bound to _E_S_C _[.
       iinnsseerrtt--ccoommmmeenntt ((MM--##))
              Without a numeric argument, insert the  value  of  the  rreeaaddlliinnee
              ccoommmmeenntt--bbeeggiinn variable at the beginning of the current line.  If
              a  numeric  argument is supplied, this command acts as a toggle:
              if the characters at the beginning of the line do not match  the
              value  of  ccoommmmeenntt--bbeeggiinn, insert the value; otherwise delete the
              characters in ccoommmmeenntt--bbeeggiinn from the beginning of the line.   In
              either  case,  the  line  is  accepted  as if a newline had been
              typed.  The default value of ccoommmmeenntt--bbeeggiinn causes  this  command
              to make the current line a shell comment.  If a numeric argument
              causes the comment character to be removed, the line will be ex-
              ecuted by the shell.
       ssppeellll--ccoorrrreecctt--wwoorrdd ((CC--xx ss))
              Perform  spelling correction on the current word, treating it as
              a directory or filename, in the same way as  the  ccddssppeellll  shell
              option.    Word  boundaries  are  the  same  as  those  used  by
              sshheellll--ffoorrwwaarrdd--wwoorrdd.
       gglloobb--ccoommpplleettee--wwoorrdd ((MM--gg))
              Treat the word before point as a pattern for pathname expansion,
              with an asterisk implicitly appended, then use  the  pattern  to
              generate a list of matching file names for possible completions.
       gglloobb--eexxppaanndd--wwoorrdd ((CC--xx **))
              Treat the word before point as a pattern for pathname expansion,
              and  insert the list of matching file names, replacing the word.
              If a numeric argument is supplied, append a  **  before  pathname
              expansion.
       gglloobb--lliisstt--eexxppaannssiioonnss ((CC--xx gg))
              Display the list of expansions that would have been generated by
              gglloobb--eexxppaanndd--wwoorrdd  and redisplay the line.  If a numeric argument
              is supplied, append a ** before pathname expansion.
       dduummpp--ffuunnccttiioonnss
              Print all of the functions and their key bindings to  the  rreeaadd--
              lliinnee output stream.  If a numeric argument is supplied, the out-
              put  is  formatted  in such a way that it can be made part of an
              _i_n_p_u_t_r_c file.
       dduummpp--vvaarriiaabblleess
              Print all of the settable rreeaaddlliinnee variables and their values to
              the rreeaaddlliinnee output stream.  If a numeric argument is  supplied,
              the  output  is formatted in such a way that it can be made part
              of an _i_n_p_u_t_r_c file.
       dduummpp--mmaaccrrooss
              Print all of the rreeaaddlliinnee key sequences bound to macros and  the
              strings they output to the rreeaaddlliinnee output stream.  If a numeric
              argument is supplied, the output is formatted in such a way that
              it can be made part of an _i_n_p_u_t_r_c file.
       eexxeeccuuttee--nnaammeedd--ccoommmmaanndd ((MM--xx))
              Read a bindable rreeaaddlliinnee command name from the input and execute
              the  function  to  which  it's  bound, as if the key sequence to
              which it was bound appeared in the input.  If this  function  is
              supplied with a numeric argument, it passes that argument to the
              function it executes.
       ddiissppllaayy--sshheellll--vveerrssiioonn ((CC--xx CC--vv))
              Display version information about the current instance of bbaasshh.

   PPrrooggrraammmmaabbllee CCoommpplleettiioonn
       When  a user attempts word completion for a command or an argument to a
       command for which a completion specification (a _c_o_m_p_s_p_e_c) has been  de-
       fined  using  the  ccoommpplleettee builtin (see SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS below),
       rreeaaddlliinnee invokes the programmable completion facilities.

       First, bbaasshh identifies the command name.  If a compspec  has  been  de-
       fined  for  that  command, the compspec is used to generate the list of
       possible completions for the word.  If the command word  is  the  empty
       string  (completion  attempted at the beginning of an empty line), bbaasshh
       uses any compspec defined with the --EE option to ccoommpplleettee.  The  --II  op-
       tion  to  ccoommpplleettee indicates that the command word is the first non-as-
       signment word on the line, or after a command delimiter such as ;; or ||.
       This usually indicates command name completion.

       If the command word is a full pathname, bbaasshh searches  for  a  compspec
       for  the  full  pathname  first.   If there is no compspec for the full
       pathname, bbaasshh attempts to find a compspec for  the  portion  following
       the  final slash.  If those searches do not result in a compspec, or if
       there is no compspec for the command word, bbaasshh uses any  compspec  de-
       fined  with  the  --DD option to ccoommpplleettee as the default.  If there is no
       default compspec, bbaasshh performs alias expansion on the command word  as
       a  final  resort,  and attempts to find a compspec for the command word
       resulting from any successful expansion.

       If a compspec is not found, bbaasshh performs its default completion as de-
       scribed above under CCoommpplleettiinngg.  Otherwise, once a  compspec  has  been
       found, bbaasshh uses it to generate the list of matching words.

       First,  bbaasshh performs the _a_c_t_i_o_n_s specified by the compspec.  This only
       returns matches which are prefixes of the word being  completed.   When
       the  --ff or --dd option is used for filename or directory name completion,
       bbaasshh uses the shell variable FFIIGGNNOORREE to filter the matches.

       Next, programmable completion generates matches specified by a pathname
       expansion pattern supplied as an argument to the --GG option.  The  words
       generated by the pattern need not match the word being completed.  BBaasshh
       uses  the  FFIIGGNNOORREE variable to filter the matches, but does not use the
       GGLLOOBBIIGGNNOORREE shell variable.

       Next, completion considers the string specified as the argument to  the
       --WW  option.   The string is first split using the characters in the IIFFSS
       special variable as delimiters.  This honors shell quoting  within  the
       string,  in order to provide a mechanism for the words to contain shell
       metacharacters or characters in the value of IIFFSS.  Each  word  is  then
       expanded using brace expansion, tilde expansion, parameter and variable
       expansion, command substitution, and arithmetic expansion, as described
       above under EEXXPPAANNSSIIOONN.  The results are split using the rules described
       above  under  WWoorrdd SSpplliittttiinngg.  The results of the expansion are prefix-
       matched against the word being completed, and the matching words become
       possible completions.

       After these matches have been generated, bbaasshh executes any shell  func-
       tion or command specified with the --FF and --CC options.  When the command
       or   function  is  invoked,  bbaasshh  assigns  values  to  the  CCOOMMPP__LLIINNEE,
       CCOOMMPP__PPOOIINNTT, CCOOMMPP__KKEEYY, and CCOOMMPP__TTYYPPEE variables as described above  under
       SShheellll  VVaarriiaabblleess.  If a shell function is being invoked, bbaasshh also sets
       the CCOOMMPP__WWOORRDDSS and CCOOMMPP__CCWWOORRDD variables.  When the function or  command
       is  invoked,  the  first argument ($$11) is the name of the command whose
       arguments are being completed, the second argument ($$22) is the word be-
       ing completed, and the third argument ($$33) is the  word  preceding  the
       word  being completed on the current command line.  There is no filter-
       ing of the generated completions against the word being completed;  the
       function  or command has complete freedom in generating the matches and
       they do not need to match a prefix of the word.

       Any function specified with --FF is invoked first.  The function may  use
       any of the shell facilities, including the ccoommppggeenn and ccoommppoopptt builtins
       described  below,  to  generate  the matches.  It must put the possible
       completions in the CCOOMMPPRREEPPLLYY array variable, one per array element.

       Next, any command specified with the --CC option is invoked in  an  envi-
       ronment  equivalent to command substitution.  It should print a list of
       completions, one per line, to the standard output.  Backslash will  es-
       cape  a  newline, if necessary.  These are added to the set of possible
       completions.

       After generating all of the possible completions, bbaasshh applies any fil-
       ter specified with the --XX option to the completions in the  list.   The
       filter  is a pattern as used for pathname expansion; a && in the pattern
       is replaced with the text of the word being completed.  A literal && may
       be escaped with a backslash; the backslash is removed before attempting
       a match.  Any completion that matches the pattern is removed  from  the
       list.   A  leading !! negates the pattern; in this case bbaasshh removes any
       completion that does not match the pattern.  If the  nnooccaasseemmaattcchh  shell
       option  is  enabled, bbaasshh performs the match without regard to the case
       of alphabetic characters.

       Finally, programmable completion adds any prefix and  suffix  specified
       with  the  --PP and --SS options, respectively, to each completion, and re-
       turns the result to rreeaaddlliinnee as the list of possible completions.

       If the previously-applied actions do not generate any matches, and  the
       --oo  ddiirrnnaammeess  option was supplied to ccoommpplleettee when the compspec was de-
       fined, bbaasshh attempts directory name completion.

       If the --oo pplluussddiirrss option was supplied to ccoommpplleettee  when  the  compspec
       was  defined,  bbaasshh  attempts  directory  name  completion and adds any
       matches to the set of possible completions.

       By default, if a compspec is found, whatever it generates  is  returned
       to  the  completion  code as the full set of possible completions.  The
       default bbaasshh completions and the rreeaaddlliinnee default of  filename  comple-
       tion  are  disabled.  If the --oo bbaasshhddeeffaauulltt option was supplied to ccoomm--
       pplleettee when the compspec was defined,  and  the  compspec  generates  no
       matches,  bbaasshh  attempts its default completions.  If the compspec and,
       if attempted, the default bbaasshh completions generate no matches, and the
       --oo ddeeffaauulltt option was supplied to ccoommpplleettee when the  compspec  was  de-
       fined, programmable completion performs rreeaaddlliinnee's default completion.

       The  options  supplied to ccoommpplleettee and ccoommppoopptt can control how rreeaaddlliinnee
       treats the completions.  For instance, the _-_o  _f_u_l_l_q_u_o_t_e  option  tells
       rreeaaddlliinnee  to  quote the matches as if they were filenames.  See the de-
       scription of ccoommpplleettee below for details.

       When a compspec indicates that it wants directory name completion,  the
       programmable  completion  functions force rreeaaddlliinnee to append a slash to
       completed names which are symbolic links to directories, subject to the
       value of the mmaarrkk--ddiirreeccttoorriieess rreeaaddlliinnee variable, regardless of the set-
       ting of the mmaarrkk--ssyymmlliinnkkeedd--ddiirreeccttoorriieess rreeaaddlliinnee variable.

       There is some support for dynamically modifying completions.   This  is
       most  useful  when used in combination with a default completion speci-
       fied with ccoommpplleettee --DD.  It's possible for shell functions  executed  as
       completion  functions  to indicate that completion should be retried by
       returning an exit status of 124.  If a shell function returns 124,  and
       changes the compspec associated with the command on which completion is
       being  attempted  (supplied  as the first argument when the function is
       executed), programmable completion restarts from the beginning, with an
       attempt to find a new compspec for that command.  This can be  used  to
       build  a  set  of  completions  dynamically as completion is attempted,
       rather than loading them all at once.

       For instance, assuming that there is a library of compspecs, each  kept
       in  a  file corresponding to the name of the command, the following de-
       fault completion function would load completions dynamically:
              _completion_loader()
              {
                . "/etc/bash_completion.d/$1.sh" \
                  >/dev/null 2>&1 && return 124
              }
              complete -D -F _completion_loader \
                  -o bashdefault -o default

HHIISSTTOORRYY
       When the --oo hhiissttoorryy option to the sseett builtin  is  enabled,  the  shell
       provides access to the _c_o_m_m_a_n_d _h_i_s_t_o_r_y, the list of commands previously
       typed.   The  value  of  the HHIISSTTSSIIZZEE variable is used as the number of
       commands to save in a history list: the shell saves  the  text  of  the
       last HHIISSTTSSIIZZEE commands (default 500).  The shell stores each command in
       the  history list prior to parameter and variable expansion (see EEXXPPAANN--
       SSIIOONN above) but after history expansion is performed,  subject  to  the
       values of the shell variables HHIISSTTIIGGNNOORREE and HHIISSTTCCOONNTTRROOLL.

       On  startup,  bbaasshh  initializes the history list by reading history en-
       tries  from  the  file  named  by  the   HHIISSTTFFIILLEE   variable   (default
       _~_/_._b_a_s_h___h_i_s_t_o_r_y).   That  file is referred to as the _h_i_s_t_o_r_y _f_i_l_e.  The
       history file is truncated, if necessary, to contain no  more  than  the
       number  of  history  entries specified by the value of the HHIISSTTFFIILLEESSIIZZEE
       variable.  If HHIISSTTFFIILLEESSIIZZEE is unset, or  set  to  null,  a  non-numeric
       value, or a numeric value less than zero, the history file is not trun-
       cated.

       When the history file is read, lines beginning with the history comment
       character followed immediately by a digit are interpreted as timestamps
       for  the  following history line.  These timestamps are optionally dis-
       played depending on the value of  the  HHIISSTTTTIIMMEEFFOORRMMAATT  variable.   When
       present,  history timestamps delimit history entries, making multi-line
       entries possible.

       When a shell with history enabled exits, bbaasshh copies the last $$HHIISSTTSSIIZZEE
       entries from the history list to $$HHIISSTTFFIILLEE.  If  the  hhiissttaappppeenndd  shell
       option  is  enabled  (see  the description of sshhoopptt under SSHHEELLLL BBUUIILLTTIINN
       CCOOMMMMAANNDDSS below), bbaasshh appends the entries to the history  file,  other-
       wise  it overwrites the history file.  If HHIISSTTFFIILLEE is unset or null, or
       if the history file is unwritable, the history  is  not  saved.   After
       saving  the history, bbaasshh truncates the history file to contain no more
       than HHIISSTTFFIILLEESSIIZZEE lines as described above.

       If the HHIISSTTTTIIMMEEFFOORRMMAATT variable is set, the shell writes  the  timestamp
       information  associated  with  each  history entry to the history file,
       marked with the history comment character, so timestamps are  preserved
       across shell sessions.  This uses the history comment character to dis-
       tinguish  timestamps  from  other  history lines.  As above, when using
       HHIISSTTTTIIMMEEFFOORRMMAATT, the timestamps delimit multi-line history entries.

       The ffcc builtin command (see SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS below) will list  or
       edit and re-execute a portion of the history list.  The hhiissttoorryy builtin
       can display or modify the history list and manipulate the history file.
       When  using command-line editing, search commands are available in each
       editing mode that provide access to the history list.

       The shell allows control over which commands are saved on  the  history
       list.  The HHIISSTTCCOONNTTRROOLL and HHIISSTTIIGGNNOORREE variables are used to save only a
       subset  of  the  commands  entered.  If the ccmmddhhiisstt shell option is en-
       abled, the shell attempts to save each line of a multi-line command  in
       the  same  history entry, adding semicolons where necessary to preserve
       syntactic correctness.  The lliitthhiisstt shell option  modifies  ccmmddhhiisstt  by
       saving  the  command with embedded newlines instead of semicolons.  See
       the description of the sshhoopptt builtin below under SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS
       for information on setting and unsetting shell options.

HHIISSTTOORRYY EEXXPPAANNSSIIOONN
       The shell supports a history expansion feature that is similar  to  the
       history  expansion in ccsshh.  This section describes what syntax features
       are available.

       History expansion is enabled by default for interactive shells, and can
       be disabled using the ++HH option to the sseett builtin command  (see  SSHHEELLLL
       BBUUIILLTTIINN CCOOMMMMAANNDDSS below).  Non-interactive shells do not perform history
       expansion by default, but it can be enabled with "set -H".

       History expansions introduce words from the history list into the input
       stream,  making  it  easy to repeat commands, insert the arguments to a
       previous command into the current input line, or fix errors in previous
       commands quickly.

       History expansion is performed immediately after  a  complete  line  is
       read,  before  the shell breaks it into words, and is performed on each
       line individually.  The shell attempts to inform the history  expansion
       functions about quoting still in effect from previous lines.

       It  takes  place in two parts.  The first is to determine which history
       list entry to use during substitution.  The second is  to  select  por-
       tions of that entry to include into the current one.

       The  entry  selected from the history is the _e_v_e_n_t, and the portions of
       that entry that are acted upon are _w_o_r_d_s.  Various _m_o_d_i_f_i_e_r_s are avail-
       able to manipulate the selected words.  The entry is split  into  words
       in  the same fashion as when reading input, so that several _m_e_t_a_c_h_a_r_a_c_-
       _t_e_r-separated words surrounded by quotes are considered one word.   The
       _e_v_e_n_t  _d_e_s_i_g_n_a_t_o_r  selects  the event, the optional _w_o_r_d _d_e_s_i_g_n_a_t_o_r se-
       lects words from the event, and various optional _m_o_d_i_f_i_e_r_s  are  avail-
       able to manipulate the selected words.

       History  expansions are introduced by the appearance of the history ex-
       pansion character, which is !! by default.  History expansions  may  ap-
       pear anywhere in the input, but do not nest.

       Only  backslash  (\\)  and single quotes can quote the history expansion
       character, but the history  expansion  character  is  also  treated  as
       quoted if it immediately precedes the closing double quote in a double-
       quoted string.

       Several  characters inhibit history expansion if found immediately fol-
       lowing the history expansion character, even if it is unquoted:  space,
       tab,  newline,  carriage  return, ==, and the other shell metacharacters
       defined above.

       There is a special abbreviation for substitution, active when the _q_u_i_c_k
       _s_u_b_s_t_i_t_u_t_i_o_n character (described above under hhiissttcchhaarrss) is  the  first
       character on the line.  It selects the previous history list entry, us-
       ing  an  event  designator equivalent to !!!!, and substitutes one string
       for another in that entry.  It is described below under EEvveenntt  DDeessiiggnnaa--
       ttoorrss.   This is the only history expansion that does not begin with the
       history expansion character.

       Several shell options settable with the sshhoopptt builtin will modify  his-
       tory  expansion  behavior (see the description of the sshhoopptt builtin be-
       low).and If the hhiissttvveerriiffyy shell option is enabled, and rreeaaddlliinnee is be-
       ing used, history substitutions are not immediately passed to the shell
       parser.  Instead, the expanded line is reloaded into the rreeaaddlliinnee edit-
       ing buffer for further modification.  If rreeaaddlliinnee is  being  used,  and
       the  hhiissttrreeeeddiitt  shell option is enabled, a failed history substitution
       is reloaded into the rreeaaddlliinnee editing buffer for correction.

       The --pp option to the hhiissttoorryy builtin command shows what a  history  ex-
       pansion  will do before using it.  The --ss option to the hhiissttoorryy builtin
       will add commands to the end of the history list without actually  exe-
       cuting them, so that they are available for subsequent recall.

       The  shell allows control of the various characters used by the history
       expansion mechanism (see the description of hhiissttcchhaarrss above under SShheellll
       VVaarriiaabblleess).  The shell uses the history comment character to mark  his-
       tory timestamps when writing the history file.

   EEvveenntt DDeessiiggnnaattoorrss
       An  event  designator  is  a reference to an entry in the history list.
       The event designator consists of the portion of the word beginning with
       the history expansion character and ending with the word designator  if
       present,  or  the  end  of the word.  Unless the reference is absolute,
       events are relative to the current position in the history list.

       !!      Start a history substitution, except when followed by  a  bbllaannkk,
              newline,  carriage  return, =, or, when the eexxttgglloobb shell option
              is enabled using the sshhoopptt builtin, (.
       !!_n     Refer to history list entry _n.
       !!--_n    Refer to the current entry minus _n.
       !!!!     Refer to the previous entry.  This is a synonym for "!-1".
       !!_s_t_r_i_n_g
              Refer to the most recent command preceding the current  position
              in the history list starting with _s_t_r_i_n_g.
       !!??_s_t_r_i_n_g[[??]]
              Refer  to the most recent command preceding the current position
              in the history list containing _s_t_r_i_n_g.  The trailing  ??  may  be
              omitted  if  _s_t_r_i_n_g  is  followed  immediately by a newline.  If
              _s_t_r_i_n_g is missing, this uses the string  from  the  most  recent
              search; it is an error if there is no previous search string.
       ^^_s_t_r_i_n_g_1^^_s_t_r_i_n_g_2^^
              Quick  substitution.   Repeat  the  previous  command, replacing
              _s_t_r_i_n_g_1 with  _s_t_r_i_n_g_2.   Equivalent  to  "!!:s^_s_t_r_i_n_g_1^_s_t_r_i_n_g_2^"
              (see MMooddiiffiieerrss below).
       !!##     The entire command line typed so far.

   WWoorrdd DDeessiiggnnaattoorrss
       Word designators are used to select desired words from the event.  They
       are optional; if the word designator isn't supplied, the history expan-
       sion uses the entire event.  A :: separates the event specification from
       the  word  designator.  It may be omitted if the word designator begins
       with a ^^, $$, **, --, or %%.  Words are numbered from the beginning of  the
       line,  with  the  first  word being denoted by 0 (zero).  Words are in-
       serted into the current line separated by single spaces.

       00 ((zzeerroo))
              The zeroth word.  For the shell, this is the command word.
       _n      The _nth word.
       ^^      The first argument: word 1.
       $$      The last word.  This is usually the last argument, but will  ex-
              pand to the zeroth word if there is only one word in the line.
       %%      The first word matched by the most recent "?_s_t_r_i_n_g?"  search, if
              the  search  string  begins  with  a character that is part of a
              word.  By default, searches begin at the end of  each  line  and
              proceed  to  the beginning, so the first word matched is the one
              closest to the end of the line.
       _x--_y    A range of words; "-_y" abbreviates "0-_y".
       **      All of the words but the zeroth.  This is a synonym  for  "_1_-_$".
              It  is  not  an  error to use ** if there is just one word in the
              event; it expands to the empty string in that case.
       xx**     Abbreviates _x_-_$.
       xx--     Abbreviates _x_-_$ like xx**, but omits the last word.  If xx is miss-
              ing, it defaults to 0.

       If a word designator is supplied without an  event  specification,  the
       previous command is used as the event, equivalent to !!!!.

   MMooddiiffiieerrss
       After  the  optional  word  designator, the expansion may include a se-
       quence of one or more of the following modifiers, each  preceded  by  a
       ":".   These  modify, or edit, the word or words selected from the his-
       tory event.

       hh      Remove a trailing pathname component, leaving only the head.
       tt      Remove all leading pathname components, leaving the tail.
       rr      Remove a trailing suffix of the form _._x_x_x, leaving the basename.
       ee      Remove all but the trailing suffix.
       pp      Print the new command but do not execute it.
       qq      Quote the substituted words, escaping further substitutions.
       xx      Quote the substituted words as with qq, but break into  words  at
              bbllaannkkss  and newlines.  The qq and xx modifiers are mutually exclu-
              sive; expansion uses the last one supplied.
       ss//_o_l_d//_n_e_w//
              Substitute _n_e_w for the first occurrence  of  _o_l_d  in  the  event
              line.  Any character may be used as the delimiter in place of /.
              The  final  delimiter is optional if it is the last character of
              the event line.  A single backslash quotes the delimiter in  _o_l_d
              and  _n_e_w.  If & appears in _n_e_w, it is replaced with _o_l_d.  A sin-
              gle backslash quotes the &.  If _o_l_d is null, it is  set  to  the
              last  _o_l_d  substituted, or, if no previous history substitutions
              took place, the last _s_t_r_i_n_g in a !!??_s_t_r_i_n_g[[??]]  search.  If _n_e_w is
              null, each matching _o_l_d is deleted.
       &&      Repeat the previous substitution.
       gg      Cause changes to be applied over the entire event line.  This is
              used in conjunction with "::ss" (e.g.,  "::ggss//_o_l_d//_n_e_w//")  or  "::&&".
              If  used with "::ss", any delimiter can be used in place of /, and
              the final delimiter is optional if it is the last  character  of
              the event line.  An aa may be used as a synonym for gg.
       GG      Apply the following "ss" or "&&" modifier once to each word in the
              event line.

SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS
       Unless otherwise noted, each builtin command documented in this section
       as accepting options preceded by -- accepts ---- to signify the end of the
       options.  The ::, ttrruuee, ffaallssee, and tteesstt/[[ builtins do not accept options
       and  do  not treat ---- specially.  The eexxiitt, llooggoouutt, rreettuurrnn, bbrreeaakk, ccoonn--
       ttiinnuuee, lleett, and sshhiifftt builtins accept and process  arguments  beginning
       with  -- without requiring ----.  Other builtins that accept arguments but
       are not specified as accepting options  interpret  arguments  beginning
       with  --  as  invalid options and require ---- to prevent this interpreta-
       tion.

       :: [_a_r_g_u_m_e_n_t_s]
              No effect; the command does nothing beyond  expanding  _a_r_g_u_m_e_n_t_s
              and performing any specified redirections.  The return status is
              zero.

       .. [--pp _p_a_t_h] _f_i_l_e_n_a_m_e [_a_r_g_u_m_e_n_t_s]
       ssoouurrccee [--pp _p_a_t_h] _f_i_l_e_n_a_m_e [_a_r_g_u_m_e_n_t_s]
              The  .. command (ssoouurrccee) reads and execute commands from _f_i_l_e_n_a_m_e
              in the current shell environment and returns the exit status  of
              the last command executed from _f_i_l_e_n_a_m_e.

              If _f_i_l_e_n_a_m_e does not contain a slash, .. searches for it.  If the
              --pp  option  is supplied, .. treats _p_a_t_h as a colon-separated list
              of directories in which to find _f_i_l_e_n_a_m_e; otherwise, .. uses  the
              entries  in  PPAATTHH  to  find  the  directory containing _f_i_l_e_n_a_m_e.
              _f_i_l_e_n_a_m_e does not need to be executable.  When bbaasshh  is  not  in
              posix mode, it searches the current directory if _f_i_l_e_n_a_m_e is not
              found  in  PPAATTHH, but does not search the current directory if --pp
              is supplied.  If the ssoouurrcceeppaatthh option to the sshhoopptt builtin com-
              mand is turned off, .. does not search PPAATTHH.

              If any _a_r_g_u_m_e_n_t_s are supplied, they become the positional  para-
              meters  when _f_i_l_e_n_a_m_e is executed.  Otherwise the positional pa-
              rameters are unchanged.

              If the --TT option is enabled, .. inherits any trap on DDEEBBUUGG; if it
              is not, any DDEEBBUUGG trap string is saved and restored  around  the
              call to .., and .. unsets the DDEEBBUUGG trap while it executes.  If --TT
              is not set, and the sourced file changes the DDEEBBUUGG trap, the new
              value persists after .. completes.  The return status is the sta-
              tus of the last command executed from _f_i_l_e_n_a_m_e (0 if no commands
              are  executed),  and non-zero if _f_i_l_e_n_a_m_e is not found or cannot
              be read.

       aalliiaass [--pp] [_n_a_m_e[=_v_a_l_u_e] ...]
              With no arguments or with the --pp option, aalliiaass prints  the  list
              of  aliases  in  the  form  aalliiaass _n_a_m_e=_v_a_l_u_e on standard output.
              When arguments are supplied, define an alias for each _n_a_m_e whose
              _v_a_l_u_e is given.  A trailing space in _v_a_l_u_e causes the next  word
              to  be checked for alias substitution when the alias is expanded
              during command parsing.  For each _n_a_m_e in the argument list  for
              which  no  _v_a_l_u_e  is  supplied,  print the name and value of the
              alias _n_a_m_e.  aalliiaass returns true unless a _n_a_m_e is given  (without
              a corresponding =_v_a_l_u_e) for which no alias has been defined.

       bbgg [_j_o_b_s_p_e_c ...]
              Resume  each  suspended  job _j_o_b_s_p_e_c in the background, as if it
              had been started with &&.  If _j_o_b_s_p_e_c is not present,  the  shell
              uses its notion of the _c_u_r_r_e_n_t _j_o_b.  bbgg _j_o_b_s_p_e_c returns 0 unless
              run  when  job control is disabled or, when run with job control
              enabled, any specified _j_o_b_s_p_e_c was  not  found  or  was  started
              without job control.

       bbiinndd [--mm _k_e_y_m_a_p] [--llssvvSSVVXX]
       bbiinndd [--mm _k_e_y_m_a_p] [--qq _f_u_n_c_t_i_o_n] [--uu _f_u_n_c_t_i_o_n] [--rr _k_e_y_s_e_q]
       bbiinndd [--mm _k_e_y_m_a_p] --ff _f_i_l_e_n_a_m_e
       bbiinndd [--mm _k_e_y_m_a_p] --xx _k_e_y_s_e_q[:] _s_h_e_l_l_-_c_o_m_m_a_n_d
       bbiinndd [--mm _k_e_y_m_a_p] _k_e_y_s_e_q:_f_u_n_c_t_i_o_n_-_n_a_m_e
       bbiinndd [--mm _k_e_y_m_a_p] --pp|--PP [_r_e_a_d_l_i_n_e_-_c_o_m_m_a_n_d]
       bbiinndd [--mm _k_e_y_m_a_p] _k_e_y_s_e_q:_r_e_a_d_l_i_n_e_-_c_o_m_m_a_n_d
       bbiinndd _r_e_a_d_l_i_n_e_-_c_o_m_m_a_n_d_-_l_i_n_e
              Display  current  rreeaaddlliinnee key and function bindings, bind a key
              sequence to a rreeaaddlliinnee function or macro or to a shell  command,
              or  set  a rreeaaddlliinnee variable.  Each non-option argument is a key
              binding or command as it would appear in a rreeaaddlliinnee  initializa-
              tion  file such as _._i_n_p_u_t_r_c, but each binding or command must be
              passed   as   a   separate    argument;    e.g.,    '"\C-x\C-r":
              re-read-init-file'.    In  the  following  descriptions,  output
              available to be re-read is formatted as commands that would  ap-
              pear in a rreeaaddlliinnee initialization file or that would be supplied
              as  individual  arguments  to  a bbiinndd command.  Options, if sup-
              plied, have the following meanings:
              --mm _k_e_y_m_a_p
                     Use _k_e_y_m_a_p as the keymap to be affected by the subsequent
                     bindings.  Acceptable _k_e_y_m_a_p names are _e_m_a_c_s_, _e_m_a_c_s_-_s_t_a_n_-
                     _d_a_r_d_, _e_m_a_c_s_-_m_e_t_a_, _e_m_a_c_s_-_c_t_l_x_,  _v_i_,  _v_i_-_m_o_v_e_,  _v_i_-_c_o_m_m_a_n_d,
                     and  _v_i_-_i_n_s_e_r_t.   _v_i is equivalent to _v_i_-_c_o_m_m_a_n_d (_v_i_-_m_o_v_e
                     is also a synonym); _e_m_a_c_s is  equivalent  to  _e_m_a_c_s_-_s_t_a_n_-
                     _d_a_r_d.
              --ll     List the names of all rreeaaddlliinnee functions.
              --pp     Display  rreeaaddlliinnee  function  names and bindings in such a
                     way that they can be used as an argument to a  subsequent
                     bbiinndd  command  or  in a rreeaaddlliinnee initialization file.  If
                     arguments remain after  option  processing,  bbiinndd  treats
                     them  as  rreeaaddlliinnee  command names and restricts output to
                     those names.
              --PP     List current rreeaaddlliinnee function names  and  bindings.   If
                     arguments  remain  after  option  processing, bbiinndd treats
                     them as rreeaaddlliinnee command names and  restricts  output  to
                     those names.
              --ss     Display  rreeaaddlliinnee  key  sequences bound to macros and the
                     strings they output in such a way that they can  be  used
                     as an argument to a subsequent bbiinndd command or in a rreeaadd--
                     lliinnee initialization file.
              --SS     Display  rreeaaddlliinnee  key  sequences bound to macros and the
                     strings they output.
              --vv     Display rreeaaddlliinnee variable names and values in such a  way
                     that they can be used as an argument to a subsequent bbiinndd
                     command or in a rreeaaddlliinnee initialization file.
              --VV     List current rreeaaddlliinnee variable names and values.
              --ff _f_i_l_e_n_a_m_e
                     Read key bindings from _f_i_l_e_n_a_m_e.
              --qq _f_u_n_c_t_i_o_n
                     Display  key  sequences  that  invoke  the named rreeaaddlliinnee
                     _f_u_n_c_t_i_o_n.
              --uu _f_u_n_c_t_i_o_n
                     Unbind all key sequences  bound  to  the  named  rreeaaddlliinnee
                     _f_u_n_c_t_i_o_n.
              --rr _k_e_y_s_e_q
                     Remove any current binding for _k_e_y_s_e_q.
              --xx _k_e_y_s_e_q[[:: ]]_s_h_e_l_l_-_c_o_m_m_a_n_d
                     Cause _s_h_e_l_l_-_c_o_m_m_a_n_d to be executed whenever _k_e_y_s_e_q is en-
                     tered.  The separator between _k_e_y_s_e_q and _s_h_e_l_l_-_c_o_m_m_a_n_d is
                     either  whitespace  or  a  colon  optionally  followed by
                     whitespace.  If the separator is  whitespace,  _s_h_e_l_l_-_c_o_m_-
                     _m_a_n_d  must  be enclosed in double quotes and rreeaaddlliinnee ex-
                     pands any of its special backslash-escapes in  _s_h_e_l_l_-_c_o_m_-
                     _m_a_n_d  before saving it.  If the separator is a colon, any
                     enclosing double quotes are optional, and  rreeaaddlliinnee  does
                     not  expand  the  command string before saving it.  Since
                     the entire key binding expression must be a single  argu-
                     ment,  it  should  be  enclosed  in  single quotes.  When
                     _s_h_e_l_l_-_c_o_m_m_a_n_d is  executed,  the  shell  sets  the  RREEAADD--
                     LLIINNEE__LLIINNEE  variable  to the contents of the rreeaaddlliinnee line
                     buffer and the RREEAADDLLIINNEE__PPOOIINNTT and RREEAADDLLIINNEE__MMAARRKK variables
                     to the current location of the insertion  point  and  the
                     saved  insertion  point  (the  mark),  respectively.  The
                     shell assigns any numeric argument the user  supplied  to
                     the  RREEAADDLLIINNEE__AARRGGUUMMEENNTT  variable.   If there was no argu-
                     ment, that variable is not set.  If the executed  command
                     changes   the   value  of  any  of  RREEAADDLLIINNEE__LLIINNEE,  RREEAADD--
                     LLIINNEE__PPOOIINNTT, or RREEAADDLLIINNEE__MMAARRKK, those new  values  will  be
                     reflected in the editing state.
              --XX     List  all  key  sequences bound to shell commands and the
                     associated commands in a format that can be reused as  an
                     argument to a subsequent bbiinndd command.

              The  return value is 0 unless an unrecognized option is supplied
              or an error occurred.

       bbrreeaakk [_n]
              Exit from within a ffoorr, wwhhiillee, uunnttiill, or sseelleecctt loop.  If  _n  is
              specified, bbrreeaakk exits _n enclosing loops.  _n must be >= 1.  If _n
              is  greater  than  the  number of enclosing loops, all enclosing
              loops are exited.  The return value is 0 unless _n is not greater
              than or equal to 1.

       bbuuiillttiinn _s_h_e_l_l_-_b_u_i_l_t_i_n [_a_r_g_u_m_e_n_t_s]
              Execute the specified shell builtin  _s_h_e_l_l_-_b_u_i_l_t_i_n,  passing  it
              _a_r_g_u_m_e_n_t_s,  and  return  its  exit  status.  This is useful when
              defining a function whose name is the same as a  shell  builtin,
              retaining  the functionality of the builtin within the function.
              The ccdd builtin is commonly redefined this way.  The return  sta-
              tus is false if _s_h_e_l_l_-_b_u_i_l_t_i_n is not a shell builtin command.

       ccaalllleerr [_e_x_p_r]
              Returns the context of any active subroutine call (a shell func-
              tion or a script executed with the .. or ssoouurrccee builtins).

              Without  _e_x_p_r,  ccaalllleerr displays the line number and source file-
              name of the current subroutine call.  If a non-negative  integer
              is supplied as _e_x_p_r, ccaalllleerr displays the line number, subroutine
              name, and source file corresponding to that position in the cur-
              rent  execution call stack.  This extra information may be used,
              for example, to print a stack trace.  The current frame is frame
              0.

              The return value is 0 unless the shell is not executing  a  sub-
              routine  call or _e_x_p_r does not correspond to a valid position in
              the call stack.

       ccdd [--LL] [--@@] [_d_i_r]
       ccdd --PP [--ee] [--@@] [_d_i_r]
              Change the current directory to _d_i_r.  if _d_i_r  is  not  supplied,
              the  value of the HHOOMMEE shell variable is used as _d_i_r.  The vari-
              able CCDDPPAATTHH exists, and _d_i_r does not begin with a slash (/),  ccdd
              uses it as a search path: the shell searches each directory name
              in  CCDDPPAATTHH  for  _d_i_r.  Alternative directory names in CCDDPPAATTHH are
              separated by a colon (:).  A null directory name  in  CCDDPPAATTHH  is
              the same as the current directory, i.e., ".".

              The  --PP option causes ccdd to use the physical directory structure
              by resolving symbolic links while traversing _d_i_r and before pro-
              cessing instances of _._. in _d_i_r (see also the --PP  option  to  the
              sseett builtin command).

              The  --LL  option  forces ccdd to follow symbolic links by resolving
              the link after processing instances of _._. in _d_i_r.  If _._. appears
              in _d_i_r, ccdd processes it by  removing  the  immediately  previous
              pathname component from _d_i_r, back to a slash or the beginning of
              _d_i_r,  and  verifying that the portion of _d_i_r it has processed to
              that point is still a valid directory name  after  removing  the
              pathname component.  If it is not a valid directory name, ccdd re-
              turns  a  non-zero status.  If neither --LL nor --PP is supplied, ccdd
              behaves as if --LL had been supplied.

              If the --ee option is supplied with --PP, and ccdd cannot successfully
              determine the current working directory after a  successful  di-
              rectory change, it returns a non-zero status.

              On  systems that support it, the --@@ option presents the extended
              attributes associated with a file as a directory.

              An argument of -- is converted to $$OOLLDDPPWWDD before  attempting  the
              directory change.

              If  ccdd  uses  a non-empty directory name from CCDDPPAATTHH, or if -- is
              the first argument, and the directory change is  successful,  ccdd
              writes the absolute pathname of the new working directory to the
              standard output.

              If  the directory change is successful, ccdd sets the value of the
              PPWWDD environment variable to the new directory name, and sets the
              OOLLDDPPWWDD environment variable to the value of the current  working
              directory before the change.

              The  return  value  is  true  if  the directory was successfully
              changed; false otherwise.

       ccoommmmaanndd [--ppVVvv] _c_o_m_m_a_n_d [_a_r_g ...]
              The ccoommmmaanndd builtin runs _c_o_m_m_a_n_d with _a_r_g_s suppressing the  nor-
              mal shell function lookup for _c_o_m_m_a_n_d.  Only builtin commands or
              commands  found  in the PPAATTHH named _c_o_m_m_a_n_d are executed.  If the
              --pp option is supplied, the search for _c_o_m_m_a_n_d is performed using
              a default value for PPAATTHH that is guaranteed to find all  of  the
              standard utilities.

              If  either the --VV or --vv option is supplied, ccoommmmaanndd prints a de-
              scription of _c_o_m_m_a_n_d.  The --vv option displays a single word  in-
              dicating  the command or filename used to invoke _c_o_m_m_a_n_d; the --VV
              option produces a more verbose description.

              If the --VV or --vv option is supplied, the exit status is  zero  if
              _c_o_m_m_a_n_d  was  found,  and non-zero if not.  If neither option is
              supplied and an error occurred or _c_o_m_m_a_n_d cannot be  found,  the
              exit  status  is 127.  Otherwise, the exit status of the ccoommmmaanndd
              builtin is the exit status of _c_o_m_m_a_n_d.

       ccoommppggeenn [--VV _v_a_r_n_a_m_e] [_o_p_t_i_o_n] [_w_o_r_d]
              Generate possible completion matches for _w_o_r_d according  to  the
              _o_p_t_i_o_ns,  which  may  be  any  option  accepted  by the ccoommpplleettee
              builtin with the exceptions of --pp, --rr, --DD, --EE, and --II, and write
              the matches to the standard output.

              If the --VV option is supplied, ccoommppggeenn stores the generated  com-
              pletions  into  the  indexed  array  variable _v_a_r_n_a_m_e instead of
              writing them to the standard output.

              When using the --FF or --CC options, the various shell variables set
              by the programmable completion facilities, while available, will
              not have useful values.

              The matches will be generated in the same way as if the program-
              mable completion code had generated them directly from a comple-
              tion specification with the same flags.  If _w_o_r_d  is  specified,
              only  those  completions  matching  _w_o_r_d  will  be  displayed or
              stored.

              The return value is true unless an invalid option  is  supplied,
              or no matches were generated.

       ccoommpplleettee [--aabbccddeeffggjjkkssuuvv] [--oo _c_o_m_p_-_o_p_t_i_o_n] [--DDEEII] [--AA _a_c_t_i_o_n]
              [--GG _g_l_o_b_p_a_t] [--WW _w_o_r_d_l_i_s_t] [--FF _f_u_n_c_t_i_o_n] [--CC _c_o_m_m_a_n_d]
              [--XX _f_i_l_t_e_r_p_a_t] [--PP _p_r_e_f_i_x] [--SS _s_u_f_f_i_x] _n_a_m_e [_n_a_m_e ...]
       ccoommpplleettee --pprr [--DDEEII] [_n_a_m_e ...]
              Specify how arguments to each _n_a_m_e should be completed.

              If the --pp option is supplied, or if no options or _n_a_m_es are sup-
              plied,  print  existing  completion specifications in a way that
              allows them to be reused as input.  The --rr option removes a com-
              pletion specification for each _n_a_m_e, or, if no  _n_a_m_es  are  sup-
              plied, all completion specifications.

              The  --DD option indicates that other supplied options and actions
              should apply to the "default" command completion; that is,  com-
              pletion  attempted on a command for which no completion has pre-
              viously been defined.  The --EE option indicates that  other  sup-
              plied  options  and actions should apply to "empty" command com-
              pletion; that is, completion attempted on a blank line.  The  --II
              option  indicates that other supplied options and actions should
              apply to completion on the initial non-assignment  word  on  the
              line, or after a command delimiter such as ;; or ||, which is usu-
              ally command name completion.  If multiple options are supplied,
              the --DD option takes precedence over --EE, and both take precedence
              over  --II.   If any of --DD, --EE, or --II are supplied, any other _n_a_m_e
              arguments are ignored; these completions only apply to the  case
              specified by the option.

              The process of applying these completion specifications when at-
              tempting  word completion  is described above under PPrrooggrraammmmaabbllee
              CCoommpplleettiioonn.

              Other options, if specified, have the following  meanings.   The
              arguments  to the --GG, --WW, and --XX options (and, if necessary, the
              --PP and --SS options) should be quoted to protect them from  expan-
              sion before the ccoommpplleettee builtin is invoked.

              --oo _c_o_m_p_-_o_p_t_i_o_n
                      The  _c_o_m_p_-_o_p_t_i_o_n  controls  several aspects of the comp-
                      spec's behavior beyond the simple generation of  comple-
                      tions.  _c_o_m_p_-_o_p_t_i_o_n may be one of:
                      bbaasshhddeeffaauulltt
                              Perform the rest of the default bbaasshh completions
                              if the compspec generates no matches.
                      ddeeffaauulltt Use  rreeaaddlliinnee's  default  filename completion if
                              the compspec generates no matches.
                      ddiirrnnaammeess
                              Perform directory name completion if  the  comp-
                              spec generates no matches.
                      ffiilleennaammeess
                              Tell  rreeaaddlliinnee that the compspec generates file-
                              names, so it can perform  any  filename-specific
                              processing  (such as adding a slash to directory
                              names, quoting special characters, or  suppress-
                              ing  trailing  spaces).   This is intended to be
                              used with shell functions.
                      ffuullllqquuoottee
                              Tell rreeaaddlliinnee to quote all the  completed  words
                              even if they are not filenames.
                      nnooqquuoottee Tell  rreeaaddlliinnee  not to quote the completed words
                              if they are filenames (quoting filenames is  the
                              default).
                      nnoossoorrtt  Tell  rreeaaddlliinnee  not to sort the list of possible
                              completions alphabetically.
                      nnoossppaaccee Tell rreeaaddlliinnee not to append  a  space  (the  de-
                              fault)  to  words  completed  at  the end of the
                              line.
                      pplluussddiirrss
                              After generating  any  matches  defined  by  the
                              compspec,  attempt directory name completion and
                              add any matches to the results of the other  ac-
                              tions.
              --AA _a_c_t_i_o_n
                      The  _a_c_t_i_o_n  may  be  one of the following to generate a
                      list of possible completions:
                      aalliiaass   Alias names.  May also be specified as --aa.
                      aarrrraayyvvaarr
                              Array variable names.
                      bbiinnddiinngg RReeaaddlliinnee key binding names.
                      bbuuiillttiinn Names of shell builtin commands.   May  also  be
                              specified as --bb.
                      ccoommmmaanndd Command names.  May also be specified as --cc.
                      ddiirreeccttoorryy
                              Directory names.  May also be specified as --dd.
                      ddiissaabblleedd
                              Names of disabled shell builtins.
                      eennaabblleedd Names of enabled shell builtins.
                      eexxppoorrtt  Names  of exported shell variables.  May also be
                              specified as --ee.
                      ffiillee    File and directory names, similar to  rreeaaddlliinnee's
                              filename  completion.   May also be specified as
                              --ff.
                      ffuunnccttiioonn
                              Names of shell functions.
                      ggrroouupp   Group names.  May also be specified as --gg.
                      hheellppttooppiicc
                              Help topics as accepted by the hheellpp builtin.
                      hhoossttnnaammee
                              Hostnames, as taken from the file  specified  by
                              the HHOOSSTTFFIILLEE shell variable.
                      jjoobb     Job  names,  if job control is active.  May also
                              be specified as --jj.
                      kkeeyywwoorrdd Shell reserved words.  May also be specified  as
                              --kk.
                      rruunnnniinngg Names of running jobs, if job control is active.
                      sseerrvviiccee Service names.  May also be specified as --ss.
                      sseettoopptt  Valid  arguments  for  the  --oo option to the sseett
                              builtin.
                      sshhoopptt   Shell option names  as  accepted  by  the  sshhoopptt
                              builtin.
                      ssiiggnnaall  Signal names.
                      ssttooppppeedd Names of stopped jobs, if job control is active.
                      uusseerr    User names.  May also be specified as --uu.
                      vvaarriiaabbllee
                              Names of all shell variables.  May also be spec-
                              ified as --vv.
              --CC _c_o_m_m_a_n_d
                      _c_o_m_m_a_n_d  is  executed in a subshell environment, and its
                      output is used as the possible  completions.   Arguments
                      are passed as with the --FF option.
              --FF _f_u_n_c_t_i_o_n
                      The  shell  function _f_u_n_c_t_i_o_n is executed in the current
                      shell environment.  When the function is  executed,  the
                      first argument ($$11) is the name of the command whose ar-
                      guments are being completed, the second argument ($$22) is
                      the word being completed, and the third argument ($$33) is
                      the  word preceding the word being completed on the cur-
                      rent command line.  When _f_u_n_c_t_i_o_n finishes, programmable
                      completion retrieves the possible completions  from  the
                      value of the CCOOMMPPRREEPPLLYY array variable.
              --GG _g_l_o_b_p_a_t
                      Expand  the pathname expansion pattern _g_l_o_b_p_a_t to gener-
                      ate the possible completions.
              --PP _p_r_e_f_i_x
                      Add _p_r_e_f_i_x to the beginning of each possible  completion
                      after all other options have been applied.
              --SS _s_u_f_f_i_x
                      Append  _s_u_f_f_i_x  to  each  possible  completion after all
                      other options have been applied.
              --WW _w_o_r_d_l_i_s_t
                      Split the _w_o_r_d_l_i_s_t using the characters in the IIFFSS  spe-
                      cial  variable  as delimiters, and expand each resulting
                      word.  Shell quoting is honored within _w_o_r_d_l_i_s_t, in  or-
                      der  to  provide  a  mechanism  for the words to contain
                      shell metacharacters or characters in the value of  IIFFSS.
                      The  possible  completions are the members of the resul-
                      tant list which match a prefix of the  word  being  com-
                      pleted.
              --XX _f_i_l_t_e_r_p_a_t
                      _f_i_l_t_e_r_p_a_t  is  a pattern as used for pathname expansion.
                      It is applied to the list of possible completions gener-
                      ated by the preceding options and  arguments,  and  each
                      completion  matching _f_i_l_t_e_r_p_a_t is removed from the list.
                      A leading !! in _f_i_l_t_e_r_p_a_t negates the  pattern;  in  this
                      case, any completion not matching _f_i_l_t_e_r_p_a_t is removed.

              The  return  value is true unless an invalid option is supplied,
              an option other than --pp, --rr, --DD, --EE, or --II is supplied without a
              _n_a_m_e argument, an attempt is made to remove a completion  speci-
              fication for a _n_a_m_e for which no specification exists, or an er-
              ror occurs adding a completion specification.

       ccoommppoopptt [--oo _o_p_t_i_o_n] [--DDEEII] [++oo _o_p_t_i_o_n] [_n_a_m_e]
              Modify  completion  options  for  each _n_a_m_e according to the _o_p_-
              _t_i_o_ns, or for the currently-executing completion if no _n_a_m_es are
              supplied.  If no _o_p_t_i_o_ns are supplied,  display  the  completion
              options  for  each _n_a_m_e or the current completion.  The possible
              values of _o_p_t_i_o_n are those valid for the  ccoommpplleettee  builtin  de-
              scribed above.

              The --DD option indicates that other supplied options should apply
              to  the  "default"  command  completion; the --EE option indicates
              that other supplied options should apply to "empty" command com-
              pletion; and the --II option indicates that other supplied options
              should apply to completion on the  initial  word  on  the  line.
              These are determined in the same way as the ccoommpplleettee builtin.

              If multiple options are supplied, the --DD option takes precedence
              over --EE, and both take precedence over --II.

              The  return  value is true unless an invalid option is supplied,
              an attempt is made to modify the options for a _n_a_m_e for which no
              completion specification exists, or an output error occurs.

       ccoonnttiinnuuee [_n]
              ccoonnttiinnuuee resumes the next iteration of the enclosing ffoorr, wwhhiillee,
              uunnttiill, or sseelleecctt loop.  If _n is specified, bbaasshh resumes the  _nth
              enclosing  loop.  _n must be >= 1.  If _n is greater than the num-
              ber of enclosing loops, the shell  resumes  the  last  enclosing
              loop  (the "top-level" loop).  The return value is 0 unless _n is
              not greater than or equal to 1.

       ddeeccllaarree [--aaAAffFFggiiIIllnnrrttuuxx] [--pp] [_n_a_m_e[=_v_a_l_u_e] ...]
       ttyyppeesseett [--aaAAffFFggiiIIllnnrrttuuxx] [--pp] [_n_a_m_e[=_v_a_l_u_e] ...]
              Declare variables and/or give them attributes.  If no _n_a_m_es  are
              given then display the values of variables or functions.  The --pp
              option  will  display  the  attributes  and values of each _n_a_m_e.
              When --pp is used with _n_a_m_e arguments, additional  options,  other
              than --ff and --FF, are ignored.

              When --pp is supplied without _n_a_m_e arguments, ddeeccllaarree will display
              the attributes and values of all variables having the attributes
              specified  by  the  additional options.  If no other options are
              supplied with --pp, ddeeccllaarree will display the attributes and values
              of all shell variables.  The --ff option restricts the display  to
              shell functions.

              The --FF option inhibits the display of function definitions; only
              the  function  name and attributes are printed.  If the eexxttddeebbuugg
              shell option is enabled using sshhoopptt, the source  file  name  and
              line  number  where  each _n_a_m_e is defined are displayed as well.
              The --FF option implies --ff.

              The --gg option forces variables to be created or modified at  the
              global scope, even when ddeeccllaarree is executed in a shell function.
              It is ignored when ddeeccllaarree is not executed in a shell function.

              The  --II  option causes local variables to inherit the attributes
              (except the _n_a_m_e_r_e_f attribute) and value of any  existing  vari-
              able  with the same _n_a_m_e at a surrounding scope.  If there is no
              existing variable, the local variable is initially unset.

              The following options can be used to restrict  output  to  vari-
              ables  with the specified attribute or to give variables attrib-
              utes:
              --aa     Each _n_a_m_e  is  an  indexed  array  variable  (see  AArrrraayyss
                     above).
              --AA     Each  _n_a_m_e  is  an associative array variable (see AArrrraayyss
                     above).
              --ff     Each _n_a_m_e refers to a shell function.
              --ii     The variable is treated as an integer; arithmetic evalua-
                     tion (see AARRIITTHHMMEETTIICC EEVVAALLUUAATTIIOONN above) is performed  when
                     the variable is assigned a value.
              --ll     When  the  variable  is  assigned a value, all upper-case
                     characters are converted to lower-case.   The  upper-case
                     attribute is disabled.
              --nn     Give  each  _n_a_m_e  the _n_a_m_e_r_e_f attribute, making it a name
                     reference to another variable.  That  other  variable  is
                     defined  by  the  value of _n_a_m_e.  All references, assign-
                     ments, and attribute modifications to _n_a_m_e, except  those
                     using  or changing the --nn attribute itself, are performed
                     on the variable referenced by _n_a_m_e's value.  The  nameref
                     attribute cannot be applied to array variables.
              --rr     Make _n_a_m_es readonly.  These names cannot then be assigned
                     values by subsequent assignment statements or unset.
              --tt     Give each _n_a_m_e the _t_r_a_c_e attribute.  Traced functions in-
                     herit  the DDEEBBUUGG and RREETTUURRNN traps from the calling shell.
                     The trace attribute has no special meaning for variables.
              --uu     When the variable is assigned  a  value,  all  lower-case
                     characters  are  converted to upper-case.  The lower-case
                     attribute is disabled.
              --xx     Mark each _n_a_m_e for export to subsequent commands via  the
                     environment.

              Using  "+"  instead of "-" turns off the specified attribute in-
              stead, with the exceptions that ++aa and ++AA may not be used to de-
              stroy array variables and ++rr will not remove  the  readonly  at-
              tribute.

              When  used in a function, ddeeccllaarree and ttyyppeesseett make each _n_a_m_e lo-
              cal, as with the llooccaall command, unless the  --gg  option  is  sup-
              plied.   If  a variable name is followed by =_v_a_l_u_e, the value of
              the variable is set to _v_a_l_u_e.  When using --aa or --AA and the  com-
              pound  assignment  syntax  to create array variables, additional
              attributes do not take effect until subsequent assignments.

              The return value is 0 unless an invalid option  is  encountered,
              an  attempt  is made to define a function using "-f foo=bar", an
              attempt is made to assign a value to a readonly variable, an at-
              tempt is made to assign a value to an array variable without us-
              ing the compound assignment syntax (see AArrrraayyss  above),  one  of
              the _n_a_m_e_s is not a valid shell variable name, an attempt is made
              to  turn off readonly status for a readonly variable, an attempt
              is made to turn off array status for an array  variable,  or  an
              attempt is made to display a non-existent function with --ff.

       ddiirrss [[--ccllppvv]] [[++_n]] [[--_n]]
              Without options, display the list of currently remembered direc-
              tories.   The default display is on a single line with directory
              names separated by spaces.  Directories are added  to  the  list
              with  the  ppuusshhdd  command; the ppooppdd command removes entries from
              the list.  The current directory is always the  first  directory
              in the stack.

              Options, if supplied, have the following meanings:
              --cc     Clears  the  directory  stack  by deleting all of the en-
                     tries.
              --ll     Produces a listing  using  full  pathnames;  the  default
                     listing format uses a tilde to denote the home directory.
              --pp     Print the directory stack with one entry per line.
              --vv     Print  the  directory stack with one entry per line, pre-
                     fixing each entry with its index in the stack.
              ++_n     Displays the _nth entry counting from the left of the list
                     shown by ddiirrss when invoked without options, starting with
                     zero.
              --_n     Displays the _nth entry counting from  the  right  of  the
                     list shown by ddiirrss when invoked without options, starting
                     with zero.

              The  return value is 0 unless an invalid option is supplied or _n
              indexes beyond the end of the directory stack.

       ddiissoowwnn [--aarr] [--hh] [_i_d ...]
              Without options, remove each _i_d from the table of  active  jobs.
              Each  _i_d may be a job specification _j_o_b_s_p_e_c or a process ID _p_i_d;
              if _i_d is a _p_i_d, ddiissoowwnn uses the job containing _p_i_d as _j_o_b_s_p_e_c.

              If the --hh option is supplied, ddiissoowwnn does not  remove  the  jobs
              corresponding  to  each _i_d from the jobs table, but rather marks
              them so the shell does not send SSIIGGHHUUPP to the job if  the  shell
              receives a SSIIGGHHUUPP.

              If  no _i_d is supplied, the --aa option means to remove or mark all
              jobs; the --rr option without an _i_d argument removes or marks run-
              ning jobs.  If no _i_d is supplied, and neither the --aa nor the  --rr
              option is supplied, ddiissoowwnn removes or marks the current job.

              The return value is 0 unless an _i_d does not specify a valid job.

       eecchhoo [--nneeEE] [_a_r_g ...]
              Output  the  _a_r_gs,  separated  by spaces, followed by a newline.
              The return status is 0 unless a write error occurs.   If  --nn  is
              specified, the trailing newline is not printed.

              If  the  --ee option is given, eecchhoo interprets the following back-
              slash-escaped characters.  The --EE option disables interpretation
              of these escape characters, even on systems where they  are  in-
              terpreted  by  default.   The  xxppgg__eecchhoo  shell option determines
              whether or not eecchhoo interprets any options and expands these es-
              cape characters.  eecchhoo does not interpret ---- to mean the end  of
              options.

              eecchhoo interprets the following escape sequences:
              \\aa     alert (bell)
              \\bb     backspace
              \\cc     suppress further output
              \\ee
              \\EE     an escape character
              \\ff     form feed
              \\nn     new line
              \\rr     carriage return
              \\tt     horizontal tab
              \\vv     vertical tab
              \\\\     backslash
              \\00_n_n_n  The  eight-bit  character  whose value is the octal value
                     _n_n_n (zero to three octal digits).
              \\xx_H_H   The eight-bit character whose value  is  the  hexadecimal
                     value _H_H (one or two hex digits).
              \\uu_H_H_H_H The  Unicode (ISO/IEC 10646) character whose value is the
                     hexadecimal value _H_H_H_H (one to four hex digits).
              \\UU_H_H_H_H_H_H_H_H
                     The Unicode (ISO/IEC 10646) character whose value is  the
                     hexadecimal value _H_H_H_H_H_H_H_H (one to eight hex digits).

              eecchhoo  writes  any  unrecognized backslash-escaped characters un-
              changed.

       eennaabbllee [--aa] [--ddnnppss] [--ff _f_i_l_e_n_a_m_e] [_n_a_m_e ...]
              Enable and disable builtin shell commands.  Disabling a  builtin
              allows  an  executable  file  which has the same name as a shell
              builtin to be executed without specifying a full pathname,  even
              though the shell normally searches for builtins before files.

              If  --nn  is supplied, each _n_a_m_e is disabled; otherwise, _n_a_m_es are
              enabled.  For example, to use the tteesstt binary found  using  PPAATTHH
              instead of the shell builtin version, run "enable -n test".

              If  no  _n_a_m_e arguments are supplied, or if the --pp option is sup-
              plied, print a list of shell builtins.  With no other option ar-
              guments, the list consists of all enabled shell builtins.  If --nn
              is supplied, print only disabled builtins.  If --aa  is  supplied,
              the  list  printed  includes all builtins, with an indication of
              whether or not each is enabled.  The --ss option means to restrict
              the output to the POSIX _s_p_e_c_i_a_l builtins.

              The --ff option means to load the new builtin  command  _n_a_m_e  from
              shared object _f_i_l_e_n_a_m_e, on systems that support dynamic loading.
              If _f_i_l_e_n_a_m_e does not contain a slash, BBaasshh will use the value of
              the  BBAASSHH__LLOOAADDAABBLLEESS__PPAATTHH  variable  as a colon-separated list of
              directories in which to search for _f_i_l_e_n_a_m_e.   The  default  for
              BBAASSHH__LLOOAADDAABBLLEESS__PPAATTHH  is system-dependent, and may include "." to
              force a search of the current directory.   The  --dd  option  will
              delete  a builtin previously loaded with --ff.  If _-_s is used with
              _-_f, the new builtin becomes a POSIX special builtin.

              If no options are supplied and a _n_a_m_e is not  a  shell  builtin,
              eennaabbllee  will  attempt  to  load  _n_a_m_e from a shared object named
              _n_a_m_e, as if the command were "enable -f _n_a_m_e _n_a_m_e".

              The return value is 0 unless a _n_a_m_e is not a  shell  builtin  or
              there is an error loading a new builtin from a shared object.

       eevvaall [_a_r_g ...]
              Concatenate  the _a_r_gs together into a single command, separating
              them with spaces.  BBaasshh then reads and execute this command, and
              returns its exit status as the return status of eevvaall.  If  there
              are no _a_r_g_s, or only null arguments, eevvaall returns 0.

       eexxeecc [--ccll] [--aa _n_a_m_e] [_c_o_m_m_a_n_d [_a_r_g_u_m_e_n_t_s]]
              If  _c_o_m_m_a_n_d is specified, it replaces the shell without creating
              a new process.  _c_o_m_m_a_n_d cannot be a shell builtin  or  function.
              The _a_r_g_u_m_e_n_t_s become the arguments to _c_o_m_m_a_n_d.  If the --ll option
              is supplied, the shell places a dash at the beginning of the ze-
              roth  argument  passed  to _c_o_m_m_a_n_d.  This is what _l_o_g_i_n(1) does.
              The --cc option causes _c_o_m_m_a_n_d to be executed with an empty  envi-
              ronment.  If --aa is supplied, the shell passes _n_a_m_e as the zeroth
              argument to the executed command.

              If _c_o_m_m_a_n_d cannot be executed for some reason, a non-interactive
              shell  exits,  unless  the eexxeeccffaaiill shell option is enabled.  In
              that case, it returns a non-zero status.  An  interactive  shell
              returns  a  non-zero  status  if the file cannot be executed.  A
              subshell exits unconditionally if eexxeecc fails.

              If _c_o_m_m_a_n_d is not specified, any redirections take effect in the
              current shell, and the return status is 0.  If there is a  redi-
              rection error, the return status is 1.

       eexxiitt [_n]
              Cause  the  shell  to exit with a status of _n.  If _n is omitted,
              the exit status is that of the last command executed.  Any  trap
              on EEXXIITT is executed before the shell terminates.

       eexxppoorrtt [--ffnn] [_n_a_m_e[=_v_a_l_u_e]] ...
       eexxppoorrtt --pp [[--ff]]
              The  supplied _n_a_m_e_s are marked for automatic export to the envi-
              ronment of subsequently executed commands.  If the --ff option  is
              given, the _n_a_m_e_s refer to functions.

              The  --nn  option unexports, or removes the export attribute, from
              each _n_a_m_e.  If no _n_a_m_e_s are given, or if only the --pp  option  is
              supplied,  eexxppoorrtt displays a list of names of all exported vari-
              ables on the standard output.  Using --pp and --ff together displays
              exported functions.  The --pp option displays  output  in  a  form
              that may be reused as input.

              eexxppoorrtt  allows  the value of a variable to be set when it is ex-
              ported or unexported by following the variable name with =_v_a_l_u_e.
              This sets the value of the variable to _v_a_l_u_e while modifying the
              export attribute.  eexxppoorrtt returns an exit status of 0 unless  an
              invalid  option  is encountered, one of the _n_a_m_e_s is not a valid
              shell variable name, or --ff is supplied with a _n_a_m_e that is not a
              function.

       ffaallssee  Does nothing; returns a non-zero status.

       ffcc [--ee _e_n_a_m_e] [--llnnrr] [_f_i_r_s_t] [_l_a_s_t]
       ffcc --ss [_p_a_t=_r_e_p] [_c_m_d]
              The first form selects a range of commands from  _f_i_r_s_t  to  _l_a_s_t
              from  the  history  list  and  displays or edits and re-executes
              them.  _F_i_r_s_t and _l_a_s_t may be specified as a  string  (to  locate
              the  last command beginning with that string) or as a number (an
              index into the history list, where a negative number is used  as
              an offset from the current command number).

              When listing, a _f_i_r_s_t or _l_a_s_t of 0 is equivalent to -1 and -0 is
              equivalent to the current command (usually the ffcc command); oth-
              erwise  0 is equivalent to -1 and -0 is invalid.  If _l_a_s_t is not
              specified, it is set to the current command for listing (so that
              "fc -l -10" prints the last 10 commands) and to _f_i_r_s_t otherwise.
              If _f_i_r_s_t is not specified, it is set to the previous command for
              editing and -16 for listing.

              If the --ll option is supplied, the commands  are  listed  on  the
              standard  output.   The --nn option suppresses the command numbers
              when listing.  The --rr option reverses the order of the commands.

              Otherwise, ffcc invokes the editor named by _e_n_a_m_e on a  file  con-
              taining  those  commands.  If _e_n_a_m_e is not supplied, ffcc uses the
              value of the FFCCEEDDIITT variable, and the value of EEDDIITTOORR if  FFCCEEDDIITT
              is  not set.  If neither variable is set, ffcc uses _v_i_. When edit-
              ing is complete, ffcc reads the file containing  the  edited  com-
              mands and echoes and executes them.

              In  the second form, ffcc re-executes _c_o_m_m_a_n_d after replacing each
              instance of _p_a_t with _r_e_p.  _C_o_m_m_a_n_d is interpreted  the  same  as
              _f_i_r_s_t above.

              A  useful alias to use with ffcc is "r="fc -s"", so that typing "r
              cc" runs the last command beginning with "cc" and typing "r" re-
              executes the last command.

              If the first form is used, the return value is  zero  unless  an
              invalid  option  is encountered or _f_i_r_s_t or _l_a_s_t specify history
              lines out of range.  When editing and  re-executing  a  file  of
              commands, the return value is the value of the last command exe-
              cuted or failure if an error occurs with the temporary file.  If
              the second form is used, the return status is that of the re-ex-
              ecuted  command, unless _c_m_d does not specify a valid history en-
              try, in which case ffcc returns a non-zero status.

       ffgg [_j_o_b_s_p_e_c]
              Resume _j_o_b_s_p_e_c in the foreground, and make it the  current  job.
              If  _j_o_b_s_p_e_c  is  not  present, ffgg uses the shell's notion of the
              _c_u_r_r_e_n_t _j_o_b.  The return value is that  of  the  command  placed
              into  the foreground, or failure if run when job control is dis-
              abled or, when run with job control enabled, if _j_o_b_s_p_e_c does not
              specify a valid job or _j_o_b_s_p_e_c specifies a job that was  started
              without job control.

       ggeettooppttss _o_p_t_s_t_r_i_n_g _n_a_m_e [_a_r_g ...]
              ggeettooppttss  is  used  by shell scripts and functions to parse posi-
              tional parameters and obtain options and their arguments.   _o_p_t_-
              _s_t_r_i_n_g  contains  the  option  characters to be recognized; if a
              character is followed by a colon, the option is expected to have
              an argument, which should be separated from it by  white  space.
              The colon and question mark characters may not be used as option
              characters.

              Each  time  it is invoked, ggeettooppttss places the next option in the
              shell variable _n_a_m_e, initializing _n_a_m_e if it does not exist, and
              the index of the next argument to be processed into the variable
              OOPPTTIINNDD.  OOPPTTIINNDD is initialized to 1 each time  the  shell  or  a
              shell  script  is invoked.  When an option requires an argument,
              ggeettooppttss places that argument into the variable OOPPTTAARRGG.

              The shell does not reset OOPPTTIINNDD automatically; it must be  manu-
              ally  reset  between  multiple  calls to ggeettooppttss within the same
              shell invocation to use a new set of parameters.

              When it reaches the end of options, ggeettooppttss exits with a  return
              value  greater  than  zero.   OOPPTTIINNDD  is set to the index of the
              first non-option argument, and _n_a_m_e is set to ?.

              ggeettooppttss normally parses the positional parameters, but  if  more
              arguments  are  supplied as _a_r_g values, ggeettooppttss parses those in-
              stead.

              ggeettooppttss can report errors in two ways.  If the  first  character
              of  _o_p_t_s_t_r_i_n_g  is  a colon, ggeettooppttss uses _s_i_l_e_n_t error reporting.
              In normal operation, ggeettooppttss prints diagnostic messages when  it
              encounters  invalid options or missing option arguments.  If the
              variable OOPPTTEERRRR is set to 0, ggeettooppttss does not display any  error
              messages,  even  if  the  first  character of _o_p_t_s_t_r_i_n_g is not a
              colon.

              If ggeettooppttss detects an invalid option, it places ? into _n_a_m_e and,
              if not silent, prints an error message and  unsets  OOPPTTAARRGG.   If
              ggeettooppttss  is silent, it assigns the option character found to OOPP--
              TTAARRGG and does not print a diagnostic message.

              If a required argument is not found, and ggeettooppttss is not  silent,
              it sets the value of _n_a_m_e to a question mark (??), unsets OOPPTTAARRGG,
              and  prints a diagnostic message.  If ggeettooppttss is silent, it sets
              the value of _n_a_m_e to a colon (::) and sets OOPPTTAARRGG to  the  option
              character found.

              ggeettooppttss  returns true if an option, specified or unspecified, is
              found.  It returns false if the end of options is encountered or
              an error occurs.

       hhaasshh [--llrr] [--pp _f_i_l_e_n_a_m_e] [--ddtt] [_n_a_m_e]
              Each time hhaasshh is invoked, it remembers the full pathname of the
              command _n_a_m_e as  determined  by  searching  the  directories  in
              $$PPAATTHH.   Any previously-remembered pathname associated with _n_a_m_e
              is discarded.  If the --pp option is supplied, hhaasshh uses  _f_i_l_e_n_a_m_e
              as the full pathname of the command.

              The  --rr  option  causes the shell to forget all remembered loca-
              tions.  Assigning to the PPAATTHH variable also  clears  all  hashed
              filenames.   The --dd option causes the shell to forget the remem-
              bered location of each _n_a_m_e.

              If the --tt option is supplied, hhaasshh prints the full pathname cor-
              responding to each _n_a_m_e.  If multiple _n_a_m_e  arguments  are  sup-
              plied  with  --tt,  hhaasshh  prints the _n_a_m_e before the corresponding
              hashed full pathname.  The --ll option displays output in a format
              that may be reused as input.

              If no arguments are given, or  if  only  --ll  is  supplied,  hhaasshh
              prints  information  about remembered commands.  The --tt, --dd, and
              --pp options (the options that act on the _n_a_m_e arguments) are  mu-
              tually exclusive.  Only one will be active.  If more than one is
              supplied,  --tt  has higher priority than --pp, and both have higher
              priority than --dd.

              The return status is zero unless a _n_a_m_e is not found or  an  in-
              valid option is supplied.

       hheellpp [--ddmmss] [_p_a_t_t_e_r_n]
              Display  helpful information about builtin commands.  If _p_a_t_t_e_r_n
              is specified, hheellpp gives detailed help on all commands  matching
              _p_a_t_t_e_r_n  as described below; otherwise it displays a list of all
              the builtins and shell compound commands.

              Options, if supplied, have the follow meanings:

              --dd     Display a short description of each _p_a_t_t_e_r_n
              --mm     Display the description of each _p_a_t_t_e_r_n in a manpage-like
                     format
              --ss     Display only a short usage synopsis for each _p_a_t_t_e_r_n

              If _p_a_t_t_e_r_n contains pattern  matching  characters  (see  PPaatttteerrnn
              MMaattcchhiinngg  above) it's treated as a shell pattern and hheellpp prints
              the description of each help topic matching _p_a_t_t_e_r_n.

              If not, and _p_a_t_t_e_r_n exactly matches the name of  a  help  topic,
              hheellpp  prints the description associated with that topic.  Other-
              wise, hheellpp performs prefix matching and prints the  descriptions
              of all matching help topics.

              The return status is 0 unless no command matches _p_a_t_t_e_r_n.

       hhiissttoorryy [[_n]]
       hhiissttoorryy --cc
       hhiissttoorryy --dd _o_f_f_s_e_t
       hhiissttoorryy --dd _s_t_a_r_t-_e_n_d
       hhiissttoorryy --aannrrww [_f_i_l_e_n_a_m_e]
       hhiissttoorryy --pp _a_r_g [_a_r_g ...]
       hhiissttoorryy --ss _a_r_g [_a_r_g ...]
              With  no options, display the command history list with numbers.
              Entries prefixed with a ** have been modified.  An argument of  _n
              lists  only the last _n entries.  If the shell variable HHIISSTTTTIIMMEE--
              FFOORRMMAATT is set and not null, it is used as a  format  string  for
              _s_t_r_f_t_i_m_e(3)  to display the time stamp associated with each dis-
              played history entry.  If hhiissttoorryy uses HHIISSTTTTIIMMEEFFOORRMMAATT,  it  does
              not  print an intervening space between the formatted time stamp
              and the history entry.

              If _f_i_l_e_n_a_m_e is supplied, hhiissttoorryy uses it as the name of the his-
              tory file; if not, it uses the value of HHIISSTTFFIILLEE.   If  _f_i_l_e_n_a_m_e
              is  not  supplied and HHIISSTTFFIILLEE is unset or null, the --aa,, --nn,, --rr,,
              and --ww options have no effect.

              Options, if supplied, have the following meanings:
              --cc     Clear the history list by deleting all the entries.  This
                     can be used with the other options to replace the history
                     list.
              --dd _o_f_f_s_e_t
                     Delete the history entry at position _o_f_f_s_e_t.   If  _o_f_f_s_e_t
                     is negative, it is interpreted as relative to one greater
                     than the last history position, so negative indices count
                     back  from  the  end  of  the history, and an index of -1
                     refers to the current hhiissttoorryy --dd command.
              --dd _s_t_a_r_t-_e_n_d
                     Delete the range of  history  entries  between  positions
                     _s_t_a_r_t  and  _e_n_d, inclusive.  Positive and negative values
                     for _s_t_a_r_t and _e_n_d are interpreted as described above.
              --aa     Append the "new"  history  lines  to  the  history  file.
                     These  are  history  lines entered since the beginning of
                     the current bbaasshh session, but not already appended to the
                     history file.
              --nn     Read the history lines not already read from the  history
                     file and add them to the current history list.  These are
                     lines appended to the history file since the beginning of
                     the current bbaasshh session.
              --rr     Read the history file and append its contents to the cur-
                     rent history list.
              --ww     Write the current history list to the history file, over-
                     writing the history file.
              --pp     Perform  history  substitution  on the following _a_r_g_s and
                     display the result on the standard output, without  stor-
                     ing  the  results  in the history list.  Each _a_r_g must be
                     quoted to disable normal history expansion.
              --ss     Store the _a_r_g_s in the history list  as  a  single  entry.
                     The  last  command  in the history list is removed before
                     adding the _a_r_g_s.

              If the HHIISSTTTTIIMMEEFFOORRMMAATT variable is set, hhiissttoorryy writes  the  time
              stamp information associated with each history entry to the his-
              tory  file,  marked  with  the  history comment character as de-
              scribed above.  When the history file is read,  lines  beginning
              with  the  history  comment  character followed immediately by a
              digit are interpreted as timestamps for  the  following  history
              entry.

              The  return  value is 0 unless an invalid option is encountered,
              an error occurs while reading or writing the  history  file,  an
              invalid _o_f_f_s_e_t or range is supplied as an argument to --dd, or the
              history expansion supplied as an argument to --pp fails.

       jjoobbss [--llnnpprrss] [ _j_o_b_s_p_e_c ... ]
       jjoobbss --xx _c_o_m_m_a_n_d [ _a_r_g_s ... ]
              The first form lists the active jobs.  The options have the fol-
              lowing meanings:
              --ll     List process IDs in addition to the normal information.
              --nn     Display  information  only  about  jobs that have changed
                     status since the user was last notified of their status.
              --pp     List only the process  ID  of  the  job's  process  group
                     leader.
              --rr     Display only running jobs.
              --ss     Display only stopped jobs.

              If  _j_o_b_s_p_e_c  is  supplied,  jjoobbss restricts output to information
              about that job.  The return status is 0 unless an invalid option
              is encountered or an invalid _j_o_b_s_p_e_c is supplied.

              If the --xx option is supplied, jjoobbss replaces any _j_o_b_s_p_e_c found in
              _c_o_m_m_a_n_d or _a_r_g_s with the corresponding process group ID, and ex-
              ecutes _c_o_m_m_a_n_d, passing it _a_r_g_s, returning its exit status.

       kkiillll [--ss _s_i_g_s_p_e_c | --nn _s_i_g_n_u_m | --_s_i_g_s_p_e_c] _i_d [ ... ]
       kkiillll --ll|--LL [_s_i_g_s_p_e_c | _e_x_i_t___s_t_a_t_u_s]
              Send the signal specified by _s_i_g_s_p_e_c or _s_i_g_n_u_m to the  processes
              named by each _i_d.  Each _i_d may be a job specification _j_o_b_s_p_e_c or
              a  process  ID _p_i_d.  _s_i_g_s_p_e_c is either a case-insensitive signal
              name such as SSIIGGKKIILLLL (with or without the SSIIGG prefix) or a  sig-
              nal  number;  _s_i_g_n_u_m is a signal number.  If _s_i_g_s_p_e_c is not sup-
              plied, then kkiillll sends SSIIGGTTEERRMM.

              The --ll option lists the signal names.  If any arguments are sup-
              plied when --ll is given, kkiillll lists the names of the signals cor-
              responding to the arguments, and the return status  is  0.   The
              _e_x_i_t___s_t_a_t_u_s  argument to --ll is a number specifying either a sig-
              nal number or the exit status of a process terminated by a  sig-
              nal;  if it is supplied, kkiillll prints the name of the signal that
              caused the process to terminate.  kkiillll assumes that process exit
              statuses are greater than 128; anything less than that is a sig-
              nal number.  The --LL option is equivalent to --ll.

              kkiillll returns true if at least one signal was successfully  sent,
              or false if an error occurs or an invalid option is encountered.

       lleett _a_r_g [_a_r_g ...]
              Each  _a_r_g  is  evaluated as an arithmetic expression (see AARRIITTHH--
              MMEETTIICC EEVVAALLUUAATTIIOONN above).  If the last _a_r_g evaluates  to  0,  lleett
              returns 1; otherwise lleett returns 0.

       llooccaall [_o_p_t_i_o_n] [_n_a_m_e[=_v_a_l_u_e] ... | - ]
              For each argument, create a local variable named _n_a_m_e and assign
              it  _v_a_l_u_e.  The _o_p_t_i_o_n can be any of the options accepted by ddee--
              ccllaarree.  When llooccaall is used within  a  function,  it  causes  the
              variable  _n_a_m_e  to have a visible scope restricted to that func-
              tion and its children.  It is an error to  use  llooccaall  when  not
              within a function.

              If  _n_a_m_e  is  -,  it makes the set of shell options local to the
              function in which llooccaall is invoked: any  shell  options  changed
              using  the sseett builtin inside the function after the call to lloo--
              ccaall are restored to their original values when the function  re-
              turns.   The restore is performed as if a series of sseett commands
              were executed to restore the values that were  in  place  before
              the function.

              With  no operands, llooccaall writes a list of local variables to the
              standard output.

              The return status is 0 unless llooccaall is used outside a  function,
              an invalid _n_a_m_e is supplied, or _n_a_m_e is a readonly variable.

       llooggoouutt [[_n]]
              Exit  a login shell, returning a status of _n to the shell's par-
              ent.

       mmaappffiillee [--dd _d_e_l_i_m] [--nn _c_o_u_n_t] [--OO _o_r_i_g_i_n] [--ss _c_o_u_n_t] [--tt] [--uu _f_d] [--CC
       _c_a_l_l_b_a_c_k] [--cc _q_u_a_n_t_u_m] [_a_r_r_a_y]
       rreeaaddaarrrraayy [--dd _d_e_l_i_m] [--nn _c_o_u_n_t] [--OO _o_r_i_g_i_n] [--ss _c_o_u_n_t] [--tt] [--uu _f_d] [--CC
       _c_a_l_l_b_a_c_k] [--cc _q_u_a_n_t_u_m] [_a_r_r_a_y]
              Read lines from the standard input, or from file  descriptor  _f_d
              if  the  --uu  option is supplied, into the indexed array variable
              _a_r_r_a_y.  The variable MMAAPPFFIILLEE is the default _a_r_r_a_y.  Options,  if
              supplied, have the following meanings:
              --dd     Use  the first character of _d_e_l_i_m to terminate each input
                     line, rather than newline.  If _d_e_l_i_m is the empty string,
                     mmaappffiillee will terminate a line when it reads a NUL charac-
                     ter.
              --nn     Copy at most _c_o_u_n_t lines.  If _c_o_u_n_t is 0, copy all lines.
              --OO     Begin assigning to _a_r_r_a_y at index  _o_r_i_g_i_n.   The  default
                     index is 0.
              --ss     Discard the first _c_o_u_n_t lines read.
              --tt     Remove  a trailing _d_e_l_i_m (default newline) from each line
                     read.
              --uu     Read lines from file descriptor _f_d instead of  the  stan-
                     dard input.
              --CC     Evaluate  _c_a_l_l_b_a_c_k each time _q_u_a_n_t_u_m lines are read.  The
                     --cc option specifies _q_u_a_n_t_u_m.
              --cc     Specify the number of lines read  between  each  call  to
                     _c_a_l_l_b_a_c_k.

              If  --CC  is  specified  without  --cc, the default quantum is 5000.
              When _c_a_l_l_b_a_c_k is evaluated, it is supplied the index of the next
              array element to be assigned and the line to be assigned to that
              element as additional arguments.  _c_a_l_l_b_a_c_k  is  evaluated  after
              the line is read but before the array element is assigned.

              If  not supplied with an explicit origin, mmaappffiillee will clear _a_r_-
              _r_a_y before assigning to it.

              mmaappffiillee returns zero unless an invalid option or option argument
              is supplied, _a_r_r_a_y is invalid or unassignable, or  if  _a_r_r_a_y  is
              not an indexed array.

       ppooppdd [-nn] [+_n] [-_n]
              Remove  entries from the directory stack.  The elements are num-
              bered from 0 starting at the first directory listed by ddiirrss,  so
              ppooppdd  is  equivalent  to "popd +0."  With no arguments, ppooppdd re-
              moves the top directory from the stack, and changes to  the  new
              top directory.  Arguments, if supplied, have the following mean-
              ings:
              --nn     Suppress the normal change of directory when removing di-
                     rectories from the stack, only manipulate the stack.
              ++_n     Remove  the  _nth entry counting from the left of the list
                     shown by ddiirrss, starting with zero, from the  stack.   For
                     example: "popd +0" removes the first directory, "popd +1"
                     the second.
              --_n     Remove  the _nth entry counting from the right of the list
                     shown by ddiirrss, starting with zero.   For  example:  "popd
                     -0"  removes  the  last  directory, "popd -1" the next to
                     last.

              If the top element of the directory stack is modified,  and  the
              _-_n  option  was not supplied, ppooppdd uses the ccdd builtin to change
              to the directory at the top of the stack.  If the ccdd fails, ppooppdd
              returns a non-zero value.

              Otherwise, ppooppdd returns false if an invalid option is  supplied,
              the  directory stack is empty, or _n specifies a non-existent di-
              rectory stack entry.

              If the ppooppdd command is successful, bbaasshh runs ddiirrss  to  show  the
              final  contents of the directory stack, and the return status is
              0.

       pprriinnttff [--vv _v_a_r] _f_o_r_m_a_t [_a_r_g_u_m_e_n_t_s]
              Write the formatted _a_r_g_u_m_e_n_t_s to the standard output  under  the
              control  of the _f_o_r_m_a_t.  The --vv option assigns the output to the
              variable _v_a_r rather than printing it to the standard output.

              The _f_o_r_m_a_t is a character string which contains three  types  of
              objects:  plain  characters, which are simply copied to standard
              output, character escape  sequences,  which  are  converted  and
              copied  to  the standard output, and format specifications, each
              of which causes printing of the next  successive  _a_r_g_u_m_e_n_t.   In
              addition  to  the  standard  _p_r_i_n_t_f(3)  format  characters ccCCssSS--
              nnddiioouuxxXXeeEEffFFggGGaaAA, pprriinnttff interprets the following additional for-
              mat specifiers:
              %%bb     causes pprriinnttff to expand backslash escape sequences in the
                     corresponding _a_r_g_u_m_e_n_t in the same way as eecchhoo --ee.
              %%qq     causes pprriinnttff to output the corresponding _a_r_g_u_m_e_n_t  in  a
                     format  that can be reused as shell input.  %%qq and %%QQ use
                     the $$'''' quoting style if any characters in  the  argument
                     string  require  it, and backslash quoting otherwise.  If
                     the format string uses the _p_r_i_n_t_f alternate  form,  these
                     two  formats  quote  the  argument  string  using  single
                     quotes.
              %%QQ     like %%qq, but applies any supplied precision to the  _a_r_g_u_-
                     _m_e_n_t before quoting it.
              %%((_d_a_t_e_f_m_t))TT
                     causes  pprriinnttff  to  output the date-time string resulting
                     from using _d_a_t_e_f_m_t as a format  string  for  _s_t_r_f_t_i_m_e(3).
                     The corresponding _a_r_g_u_m_e_n_t is an integer representing the
                     number of seconds since the epoch.  This format specifier
                     recognizes two special argument values: -1 represents the
                     current  time,  and  -2 represents the time the shell was
                     invoked.  If no argument is specified, conversion behaves
                     as if -1 had been supplied.  This is an exception to  the
                     usual pprriinnttff behavior.

              The %b, %q, and %T format specifiers all use the field width and
              precision arguments from the format specification and write that
              many  bytes from (or use that wide a field for) the expanded ar-
              gument, which usually contains more characters than  the  origi-
              nal.

              The %n format specifier accepts a corresponding argument that is
              treated as a shell variable name.

              The  %s  and  %c  format specifiers accept an l (long) modifier,
              which forces them to convert the argument string to a wide-char-
              acter string and apply any supplied field width and precision in
              terms of characters, not bytes.  The %S and %C format specifiers
              are equivalent to %ls and %lc, respectively.

              Arguments to non-string format specifiers are treated as C  con-
              stants, except that a leading plus or minus sign is allowed, and
              if  the leading character is a single or double quote, the value
              is the numeric value of the following character, using the  cur-
              rent locale.

              The  _f_o_r_m_a_t  is  reused as necessary to consume all of the _a_r_g_u_-
              _m_e_n_t_s.  If the _f_o_r_m_a_t requires more _a_r_g_u_m_e_n_t_s than are supplied,
              the extra format specifications behave as if  a  zero  value  or
              null  string,  as  appropriate,  had  been supplied.  The return
              value is zero on success, non-zero if an invalid option is  sup-
              plied or a write or assignment error occurs.

       ppuusshhdd [--nn] [+_n] [-_n]
       ppuusshhdd [--nn] [_d_i_r]
              Add a directory to the top of the directory stack, or rotate the
              stack,  making  the new top of the stack the current working di-
              rectory.  With no arguments, ppuusshhdd exchanges the  top  two  ele-
              ments  of the directory stack.  Arguments, if supplied, have the
              following meanings:
              --nn     Suppress the normal change of directory when rotating  or
                     adding  directories  to  the  stack,  only manipulate the
                     stack.
              ++_n     Rotate the stack so that the _nth directory (counting from
                     the left of the list shown by ddiirrss, starting  with  zero)
                     is at the top.
              --_n     Rotates  the  stack  so  that the _nth directory (counting
                     from the right of the list shown by ddiirrss,  starting  with
                     zero) is at the top.
              _d_i_r    Adds _d_i_r to the directory stack at the top.

              After the stack has been modified, if the --nn option was not sup-
              plied,  ppuusshhdd  uses the ccdd builtin to change to the directory at
              the top of the stack.  If the ccdd fails, ppuusshhdd returns a non-zero
              value.

              Otherwise, if no arguments are supplied, ppuusshhdd returns zero  un-
              less  the directory stack is empty.  When rotating the directory
              stack, ppuusshhdd returns zero unless the directory stack is empty or
              _n specifies a non-existent directory stack element.

              If the ppuusshhdd command is successful, bbaasshh runs ddiirrss to  show  the
              final contents of the directory stack.

       ppwwdd [--LLPP]
              Print  the  absolute  pathname of the current working directory.
              The pathname printed contains no symbolic links if the --PP option
              is supplied or the --oo pphhyyssiiccaall option to the sseett builtin command
              is enabled.  If the --LL option is used, the pathname printed  may
              contain  symbolic links.  The return status is 0 unless an error
              occurs while reading the name of the current directory or an in-
              valid option is supplied.

       rreeaadd [--EEeerrss] [--aa _a_n_a_m_e] [--dd _d_e_l_i_m] [--ii _t_e_x_t] [--nn _n_c_h_a_r_s] [--NN _n_c_h_a_r_s]
       [--pp _p_r_o_m_p_t] [--tt _t_i_m_e_o_u_t] [--uu _f_d] [_n_a_m_e ...]
              Read one line from the standard input, or from the file descrip-
              tor _f_d supplied as an argument to the --uu option, split  it  into
              words  as  described  above under WWoorrdd SSpplliittttiinngg, and assign the
              first word to the first _n_a_m_e, the  second  word  to  the  second
              _n_a_m_e,  and  so  on.  If there are more words than names, the re-
              maining words and their intervening delimiters are  assigned  to
              the  last  _n_a_m_e.   If  there are fewer words read from the input
              stream than names, the remaining names are assigned  empty  val-
              ues.   The  characters in the value of the IIFFSS variable are used
              to split the line into words using the same rules the shell uses
              for expansion (described above under WWoorrdd SSpplliittttiinngg).  The back-
              slash character (\\) removes any special  meaning  for  the  next
              character read and is used for line continuation.

              Options, if supplied, have the following meanings:
              --aa _a_n_a_m_e
                     The words are assigned to sequential indices of the array
                     variable _a_n_a_m_e, starting at 0.  _a_n_a_m_e is unset before any
                     new  values  are  assigned.  Other _n_a_m_e arguments are ig-
                     nored.
              --dd _d_e_l_i_m
                     The first character of _d_e_l_i_m terminates the  input  line,
                     rather  than newline.  If _d_e_l_i_m is the empty string, rreeaadd
                     will terminate a line when it reads a NUL character.
              --ee     If the standard input is coming  from  a  terminal,  rreeaadd
                     uses  rreeaaddlliinnee  (see  RREEAADDLLIINNEE above) to obtain the line.
                     RReeaaddlliinnee uses the current (or default,  if  line  editing
                     was  not  previously  active)  editing settings, but uses
                     rreeaaddlliinnee's default filename completion.
              --EE     If the standard input is coming  from  a  terminal,  rreeaadd
                     uses  rreeaaddlliinnee  (see  RREEAADDLLIINNEE above) to obtain the line.
                     RReeaaddlliinnee uses the current (or default,  if  line  editing
                     was  not  previously  active)  editing settings, but uses
                     bash's default completion, including programmable comple-
                     tion.
              --ii _t_e_x_t
                     If rreeaaddlliinnee is being used to read the line,  rreeaadd  places
                     _t_e_x_t into the editing buffer before editing begins.
              --nn _n_c_h_a_r_s
                     rreeaadd  returns after reading _n_c_h_a_r_s characters rather than
                     waiting for a complete line of input, unless  it  encoun-
                     ters  EOF or rreeaadd times out, but honors a delimiter if it
                     reads fewer than _n_c_h_a_r_s characters before the delimiter.
              --NN _n_c_h_a_r_s
                     rreeaadd returns  after  reading  exactly  _n_c_h_a_r_s  characters
                     rather  than waiting for a complete line of input, unless
                     it encounters EOF or rreeaadd times out.  Any delimiter char-
                     acters in the input are not treated specially and do  not
                     cause rreeaadd to return until it has read _n_c_h_a_r_s characters.
                     The result is not split on the characters in IIFFSS; the in-
                     tent is that the variable is assigned exactly the charac-
                     ters  read  (with  the exception of backslash; see the --rr
                     option below).
              --pp _p_r_o_m_p_t
                     Display _p_r_o_m_p_t on standard error, without a trailing new-
                     line, before attempting to read any input,  but  only  if
                     input is coming from a terminal.
              --rr     Backslash does not act as an escape character.  The back-
                     slash  is considered to be part of the line.  In particu-
                     lar, a backslash-newline pair may not then be used  as  a
                     line continuation.
              --ss     Silent mode.  If input is coming from a terminal, charac-
                     ters are not echoed.
              --tt _t_i_m_e_o_u_t
                     Cause  rreeaadd to time out and return failure if it does not
                     read a complete line of input (or a specified  number  of
                     characters)  within  _t_i_m_e_o_u_t  seconds.   _t_i_m_e_o_u_t may be a
                     decimal number with a fractional  portion  following  the
                     decimal  point.  This option is only effective if rreeaadd is
                     reading input from a terminal,  pipe,  or  other  special
                     file;  it  has no effect when reading from regular files.
                     If rreeaadd times out, it saves any partial input  read  into
                     the  specified  variable  _n_a_m_e,  and  the  exit status is
                     greater than 128.  If _t_i_m_e_o_u_t is 0, rreeaadd returns  immedi-
                     ately,  without  trying  to read any data.  In this case,
                     the exit status is 0 if input is available on the  speci-
                     fied  file  descriptor, or the read will return EOF, non-
                     zero otherwise.
              --uu _f_d  Read input from file descriptor _f_d instead of  the  stan-
                     dard input.

              Other  than  the  case where _d_e_l_i_m is the empty string, rreeaadd ig-
              nores any NUL characters in the input.

              If no _n_a_m_e_s are supplied, rreeaadd assigns the  line  read,  without
              the  ending  delimiter but otherwise unmodified, to the variable
              RREEPPLLYY.

              The exit status is zero, unless end-of-file is encountered, rreeaadd
              times out (in which case the status  is  greater  than  128),  a
              variable assignment error (such as assigning to a readonly vari-
              able)  occurs,  or an invalid file descriptor is supplied as the
              argument to --uu.

       rreeaaddoonnllyy [--aaAAff] [--pp] [_n_a_m_e[=_w_o_r_d] ...]
              The given _n_a_m_e_s are marked readonly; the values of  these  _n_a_m_e_s
              may not be changed by subsequent assignment or unset.  If the --ff
              option  is  supplied, each _n_a_m_e refers to a shell function.  The
              --aa option restricts the variables to indexed arrays; the --AA  op-
              tion restricts the variables to associative arrays.  If both op-
              tions  are  supplied, --AA takes precedence.  If no _n_a_m_e arguments
              are supplied, or if the --pp option is supplied, print a  list  of
              all  readonly  names.  The other options may be used to restrict
              the output to a subset of the set of readonly names.  The --pp op-
              tion displays output in a format that may be reused as input.

              rreeaaddoonnllyy allows the value of a variable to be set  at  the  same
              time the readonly attribute is changed by following the variable
              name  with  =_v_a_l_u_e.   This  sets the value of the variable is to
              _v_a_l_u_e while modifying the readonly attribute.

              The return status is 0 unless an invalid option is  encountered,
              one  of  the  _n_a_m_e_s is not a valid shell variable name, or --ff is
              supplied with a _n_a_m_e that is not a function.

       rreettuurrnn [_n]
              Stop executing a shell function or sourced file and  return  the
              value specified by _n to its caller.  If _n is omitted, the return
              status  is that of the last command executed.  If rreettuurrnn is exe-
              cuted by a trap handler, the last command used to determine  the
              status is the last command executed before the trap handler.  If
              rreettuurrnn is executed during a DDEEBBUUGG trap, the last command used to
              determine  the  status  is the last command executed by the trap
              handler before rreettuurrnn was invoked.

              When rreettuurrnn is used to terminate execution of a script being ex-
              ecuted by the ..  (ssoouurrccee) command, it causes the shell  to  stop
              executing  that script and return either _n or the exit status of
              the last command executed within the script as the  exit  status
              of  the script.  If _n is supplied, the return value is its least
              significant 8 bits.

              Any command associated with the RREETTUURRNN trap is  executed  before
              execution resumes after the function or script.

              The  return  status  is non-zero if rreettuurrnn is supplied a non-nu-
              meric argument, or is used outside a function and not during ex-
              ecution of a script by .. or ssoouurrccee.

       sseett [--aabbeeffhhkkmmnnppttuuvvxxBBCCEEHHPPTT] [--oo _o_p_t_i_o_n_-_n_a_m_e] [----] [--] [_a_r_g ...]
       sseett [++aabbeeffhhkkmmnnppttuuvvxxBBCCEEHHPPTT] [++oo _o_p_t_i_o_n_-_n_a_m_e] [----] [--] [_a_r_g ...]
       sseett --oo
       sseett ++oo Without options, display the name and value of each shell  vari-
              able  in a format that can be reused as input for setting or re-
              setting the currently-set variables.  Read-only variables cannot
              be reset.  In posix mode, only shell variables are listed.   The
              output  is sorted according to the current locale.  When options
              are specified, they set or unset shell  attributes.   Any  argu-
              ments  remaining  after  option processing are treated as values
              for the positional parameters and are assigned, in order, to $$11,
              $$22, ..., $$_n.  Options, if specified, have  the  following  mean-
              ings:
              --aa      Each variable or function that is created or modified is
                      given  the export attribute and marked for export to the
                      environment of subsequent commands.
              --bb      Report the status of terminated background jobs  immedi-
                      ately, rather than before the next primary prompt or af-
                      ter  a foreground command terminates.  This is effective
                      only when job control is enabled.
              --ee      Exit immediately if a _p_i_p_e_l_i_n_e (which may consist  of  a
                      single  _s_i_m_p_l_e  _c_o_m_m_a_n_d),  a _l_i_s_t, or a _c_o_m_p_o_u_n_d _c_o_m_m_a_n_d
                      (see SSHHEELLLL GGRRAAMMMMAARR above), exits with a non-zero status.
                      The shell does not exit if the  command  that  fails  is
                      part  of  the command list immediately following a wwhhiillee
                      or uunnttiill reserved word, part of the test  following  the
                      iiff  or eelliiff reserved words, part of any command executed
                      in a &&&& or |||| list except the command following the  fi-
                      nal  &&&&  or  ||||,  any command in a pipeline but the last
                      (subject to the state of the ppiippeeffaaiill shell option),  or
                      if  the command's return value is being inverted with !!.
                      If a compound command other than a  subshell  returns  a
                      non-zero  status  because  a command failed while --ee was
                      being ignored, the shell does not exit.  A trap on  EERRRR,
                      if set, is executed before the shell exits.  This option
                      applies to the shell environment and each subshell envi-
                      ronment  separately  (see  CCOOMMMMAANNDD EEXXEECCUUTTIIOONN EENNVVIIRROONNMMEENNTT
                      above), and may cause subshells to exit before executing
                      all the commands in the subshell.

                      If a compound command or shell function  executes  in  a
                      context  where --ee is being ignored, none of the commands
                      executed within the compound command  or  function  body
                      will  be  affected  by the --ee setting, even if --ee is set
                      and a command returns a failure status.  If  a  compound
                      command  or  shell function sets --ee while executing in a
                      context where --ee is ignored, that setting will not  have
                      any  effect  until  the  compound command or the command
                      containing the function call completes.
              --ff      Disable pathname expansion.
              --hh      Remember the location of commands as they are looked  up
                      for execution.  This is enabled by default.
              --kk      All  arguments  in the form of assignment statements are
                      placed in the environment for a command, not just  those
                      that precede the command name.
              --mm      Monitor  mode.   Job control is enabled.  This option is
                      on by default for interactive  shells  on  systems  that
                      support  it  (see JJOOBB CCOONNTTRROOLL above).  All processes run
                      in a separate process group.  When a background job com-
                      pletes, the shell prints a line containing its exit sta-
                      tus.
              --nn      Read commands but do not execute them.  This may be used
                      to check a shell script for syntax errors.  This is  ig-
                      nored by interactive shells.
              --oo _o_p_t_i_o_n_-_n_a_m_e
                      The _o_p_t_i_o_n_-_n_a_m_e can be one of the following:
                      aalllleexxppoorrtt
                              Same as --aa.
                      bbrraacceeeexxppaanndd
                              Same as --BB.
                      eemmaaccss   Use  an  emacs-style command line editing inter-
                              face.  This is enabled by default when the shell
                              is interactive, unless the shell is started with
                              the ----nnooeeddiittiinngg option.  This also  affects  the
                              editing interface used for rreeaadd --ee.
                      eerrrreexxiitt Same as --ee.
                      eerrrrttrraaccee
                              Same as --EE.
                      ffuunnccttrraaccee
                              Same as --TT.
                      hhaasshhaallll Same as --hh.
                      hhiisstteexxppaanndd
                              Same as --HH.
                      hhiissttoorryy Enable command history, as described above under
                              HHIISSTTOORRYY.  This option is on by default in inter-
                              active shells.
                      iiggnnoorreeeeooff
                              The   effect   is   as   if  the  shell  command
                              "IGNOREEOF=10"  had  been  executed  (see  SShheellll
                              VVaarriiaabblleess above).
                      kkeeyywwoorrdd Same as --kk.
                      mmoonniittoorr Same as --mm.
                      nnoocclloobbbbeerr
                              Same as --CC.
                      nnooeexxeecc  Same as --nn.
                      nnoogglloobb  Same as --ff.
                      nnoolloogg   Currently ignored.
                      nnoottiiffyy  Same as --bb.
                      nnoouunnsseett Same as --uu.
                      oonneeccmmdd  Same as --tt.
                      pphhyyssiiccaall
                              Same as --PP.
                      ppiippeeffaaiill
                              If  set,  the  return value of a pipeline is the
                              value of the last (rightmost)  command  to  exit
                              with  a non-zero status, or zero if all commands
                              in the pipeline exit successfully.  This  option
                              is disabled by default.
                      ppoossiixx   Enable  posix  mode; change the behavior of bbaasshh
                              where the default  operation  differs  from  the
                              POSIX  standard  to match the standard.  See SSEEEE
                              AALLSSOO below for a reference to  a  document  that
                              details how posix mode affects bash's behavior.
                      pprriivviilleeggeedd
                              Same as --pp.
                      vveerrbboossee Same as --vv.
                      vvii      Use  a  vi-style command line editing interface.
                              This also affects the editing interface used for
                              rreeaadd --ee.
                      xxttrraaccee  Same as --xx.
                      If --oo is supplied with no _o_p_t_i_o_n_-_n_a_m_e,  sseett  prints  the
                      current  shell  option settings.  If ++oo is supplied with
                      no _o_p_t_i_o_n_-_n_a_m_e, sseett prints a series of sseett  commands  to
                      recreate  the  current  option  settings on the standard
                      output.
              --pp      Turn on _p_r_i_v_i_l_e_g_e_d mode.  In this mode, the  shell  does
                      not  read  the $$EENNVV and $$BBAASSHH__EENNVV files, shell functions
                      are not inherited from the environment,  and  the  SSHHEELL--
                      LLOOPPTTSS,  BBAASSHHOOPPTTSS,  CCDDPPAATTHH,  and GGLLOOBBIIGGNNOORREE variables, if
                      they appear in the environment,  are  ignored.   If  the
                      shell  is started with the effective user (group) id not
                      equal to the real user (group) id, and the --pp option  is
                      not  supplied, these actions are taken and the effective
                      user id is set to the real user id.  If the --pp option is
                      supplied at startup, the effective user id is not reset.
                      Turning this option off causes the  effective  user  and
                      group ids to be set to the real user and group ids.
              --rr      Enable restricted shell mode.  This option cannot be un-
                      set once it has been set.
              --tt      Exit after reading and executing one command.
              --uu      Treat unset variables and parameters other than the spe-
                      cial  parameters  "@"  and  "*", or array variables sub-
                      scripted with "@" or "*", as an  error  when  performing
                      parameter  expansion.   If  expansion is attempted on an
                      unset variable or parameter, the shell prints  an  error
                      message,  and, if not interactive, exits with a non-zero
                      status.
              --vv      Print shell input lines as they are read.
              --xx      After expanding each _s_i_m_p_l_e _c_o_m_m_a_n_d, ffoorr  command,  ccaassee
                      command, sseelleecctt command, or arithmetic ffoorr command, dis-
                      play  the expanded value of PPSS44, followed by the command
                      and its expanded arguments or associated word  list,  to
                      the standard error.
              --BB      The  shell performs brace expansion (see BBrraaccee EExxppaannssiioonn
                      above).  This is on by default.
              --CC      If set, bbaasshh does not overwrite an  existing  file  with
                      the  >>,  >>&&,  and  <<>>  redirection operators.  Using the
                      redirection operator >>|| instead of >> will override  this
                      and force the creation of an output file.
              --EE      If set, any trap on EERRRR is inherited by shell functions,
                      command  substitutions,  and commands executed in a sub-
                      shell environment.  The EERRRR trap is normally not  inher-
                      ited in such cases.
              --HH      Enable !!  style history substitution.  This option is on
                      by default when the shell is interactive.
              --PP      If  set,  the shell does not resolve symbolic links when
                      executing commands such as ccdd that  change  the  current
                      working  directory.   It  uses  the  physical  directory
                      structure instead.  By default, bbaasshh follows the logical
                      chain of  directories  when  performing  commands  which
                      change the current directory.
              --TT      If  set,  any traps on DDEEBBUUGG and RREETTUURRNN are inherited by
                      shell functions, command substitutions, and commands ex-
                      ecuted in a subshell environment.  The DDEEBBUUGG and  RREETTUURRNN
                      traps are normally not inherited in such cases.
              ----      If no arguments follow this option, unset the positional
                      parameters.  Otherwise, set the positional parameters to
                      the _a_r_gs, even if some of them begin with a --.
              --       Signal the end of options, and assign all remaining _a_r_gs
                      to the positional parameters.  The --xx and --vv options are
                      turned  off.  If there are no _a_r_gs, the positional para-
                      meters remain unchanged.

              The options are off by default unless otherwise noted.  Using  +
              rather  than  -  causes these options to be turned off.  The op-
              tions can also be specified as arguments to an invocation of the
              shell.  The current set of options may be found in $$--.  The  re-
              turn  status  is always zero unless an invalid option is encoun-
              tered.

       sshhiifftt [_n]
              Rename positional parameters from _n+1 ... to $$11 ........  Parameters
              represented by the numbers $$## down to $$##-_n+1 are unset.  _n  must
              be  a  non-negative number less than or equal to $$##.  If _n is 0,
              no parameters are changed.  If _n is not given, it is assumed  to
              be  1.   If  _n is greater than $$##, the positional parameters are
              not changed.  The return status is greater than  zero  if  _n  is
              greater than $$## or less than zero; otherwise 0.

       sshhoopptt [--ppqqssuu] [--oo] [_o_p_t_n_a_m_e ...]
              Toggle  the values of settings controlling optional shell behav-
              ior.  The settings can be either those listed below, or, if  the
              --oo option is used, those available with the --oo option to the sseett
              builtin command.

              With  no  options,  or with the --pp option, display a list of all
              settable options, with an indication of whether or not  each  is
              set;  if  any _o_p_t_n_a_m_e_s are supplied, the output is restricted to
              those options.  The --pp option displays output in a form that may
              be reused as input.

              Other options have the following meanings:
              --ss     Enable (set) each _o_p_t_n_a_m_e.
              --uu     Disable (unset) each _o_p_t_n_a_m_e.
              --qq     Suppresses normal output (quiet mode); the return  status
                     indicates whether the _o_p_t_n_a_m_e is set or unset.  If multi-
                     ple  _o_p_t_n_a_m_e  arguments  are supplied with --qq, the return
                     status is zero if all _o_p_t_n_a_m_e_s are enabled; non-zero oth-
                     erwise.
              --oo     Restricts the values of _o_p_t_n_a_m_e to be those  defined  for
                     the --oo option to the sseett builtin.

              If  either  --ss  or  --uu  is used with no _o_p_t_n_a_m_e arguments, sshhoopptt
              shows only those options which are set or  unset,  respectively.
              Unless  otherwise  noted, the sshhoopptt options are disabled (unset)
              by default.

              The return status when listing options is zero if  all  _o_p_t_n_a_m_e_s
              are  enabled, non-zero otherwise.  When setting or unsetting op-
              tions, the return status is zero unless  an  _o_p_t_n_a_m_e  is  not  a
              valid shell option.

              The list of sshhoopptt options is:

              aarrrraayy__eexxppaanndd__oonnccee
                      If  set, the shell suppresses multiple evaluation of as-
                      sociative and indexed array subscripts during arithmetic
                      expression evaluation, while executing builtins that can
                      perform  variable  assignments,  and   while   executing
                      builtins that perform array dereferencing.
              aassssoocc__eexxppaanndd__oonnccee
                      Deprecated; a synonym for aarrrraayy__eexxppaanndd__oonnccee.
              aauuttooccdd  If  set,  a command name that is the name of a directory
                      is executed as if it were the argument to  the  ccdd  com-
                      mand.  This option is only used by interactive shells.
              bbaasshh__ssoouurrccee__ffuullllppaatthh
                      If  set,  filenames added to the BBAASSHH__SSOOUURRCCEE array vari-
                      able are converted to full pathnames  (see  SShheellll  VVaarrii--
                      aabblleess above).
              ccddaabbllee__vvaarrss
                      If  set,  an  argument to the ccdd builtin command that is
                      not a directory is assumed to be the name of a  variable
                      whose value is the directory to change to.
              ccddssppeellll If  set, the ccdd command attempts to correct minor errors
                      in the spelling of a directory component.  Minor  errors
                      include  transposed characters, a missing character, and
                      one extra character.  If ccdd corrects the directory name,
                      it prints the corrected filename, and the  command  pro-
                      ceeds.  This option is only used by interactive shells.
              cchheecckkhhaasshh
                      If set, bbaasshh checks that a command found in the hash ta-
                      ble  exists  before  trying  to execute it.  If a hashed
                      command no longer exists, bbaasshh performs  a  normal  path
                      search.
              cchheecckkjjoobbss
                      If set, bbaasshh lists the status of any stopped and running
                      jobs  before  exiting an interactive shell.  If any jobs
                      are running, bbaasshh defers the exit until a second exit is
                      attempted without an intervening command (see  JJOOBB  CCOONN--
                      TTRROOLL  above).  The shell always postpones exiting if any
                      jobs are stopped.
              cchheecckkwwiinnssiizzee
                      If set, bbaasshh checks the window size after each  external
                      (non-builtin)  command  and,  if  necessary, updates the
                      values of LLIINNEESS and CCOOLLUUMMNNSS, using the  file  descriptor
                      associated  with the standard error if it is a terminal.
                      This option is enabled by default.
              ccmmddhhiisstt If set, bbaasshh attempts to save all lines of  a  multiple-
                      line  command  in  the  same history entry.  This allows
                      easy re-editing of multi-line commands.  This option  is
                      enabled  by  default,  but only has an effect if command
                      history is enabled, as described above under HHIISSTTOORRYY.
              ccoommppaatt3311
              ccoommppaatt3322
              ccoommppaatt4400
              ccoommppaatt4411
              ccoommppaatt4422
              ccoommppaatt4433
              ccoommppaatt4444
                      These control aspects of the shell's compatibility  mode
                      (see SSHHEELLLL CCOOMMPPAATTIIBBIILLIITTYY MMOODDEE below).
              ccoommpplleettee__ffuullllqquuoottee
                      If  set,  bbaasshh  quotes all shell metacharacters in file-
                      names and directory names  when  performing  completion.
                      If not set, bbaasshh removes metacharacters such as the dol-
                      lar  sign from the set of characters that will be quoted
                      in completed filenames when these metacharacters  appear
                      in  shell  variable references in words to be completed.
                      This means that dollar signs in variable names that  ex-
                      pand  to  directories  will  not be quoted; however, any
                      dollar signs appearing in filenames will not be  quoted,
                      either.   This  is  active only when bash is using back-
                      slashes to quote completed filenames.  This variable  is
                      set  by  default,  which is the default bash behavior in
                      versions through 4.2.
              ddiirreexxppaanndd
                      If set, bbaasshh replaces directory names with  the  results
                      of  word  expansion when performing filename completion.
                      This  changes  the  contents  of  the  rreeaaddlliinnee  editing
                      buffer.   If not set, bbaasshh attempts to preserve what the
                      user typed.
              ddiirrssppeellll
                      If set, bbaasshh attempts spelling correction  on  directory
                      names  during word completion if the directory name ini-
                      tially supplied does not exist.
              ddoottgglloobb If set, bbaasshh includes filenames beginning with a "."  in
                      the  results of pathname expansion.  The filenames _. and
                      _._. must always be matched explicitly, even if ddoottgglloobb is
                      set.
              eexxeeccffaaiill
                      If set, a non-interactive shell will not exit if it can-
                      not execute the file specified as  an  argument  to  the
                      eexxeecc  builtin.   An  interactive  shell does not exit if
                      eexxeecc fails.
              eexxppaanndd__aalliiaasseess
                      If set, aliases are expanded as  described  above  under
                      AALLIIAASSEESS.  This option is enabled by default for interac-
                      tive shells.
              eexxttddeebbuugg
                      If  set at shell invocation, or in a shell startup file,
                      arrange to execute the debugger profile before the shell
                      starts, identical to the ----ddeebbuuggggeerr option.  If set  af-
                      ter  invocation,  behavior intended for use by debuggers
                      is enabled:
                      11..     The --FF option to the ddeeccllaarree builtin displays the
                             source file name and line number corresponding to
                             each function name supplied as an argument.
                      22..     If the command run by the DDEEBBUUGG  trap  returns  a
                             non-zero  value,  the next command is skipped and
                             not executed.
                      33..     If the command run by the DDEEBBUUGG  trap  returns  a
                             value  of 2, and the shell is executing in a sub-
                             routine (a shell function or a shell script  exe-
                             cuted  by  the  ..  or ssoouurrccee builtins), the shell
                             simulates a call to rreettuurrnn.
                      44..     BBAASSHH__AARRGGCC and BBAASSHH__AARRGGVV are updated as  described
                             in their descriptions above).
                      55..     Function  tracing  is  enabled: command substitu-
                             tion, shell functions, and subshells invoked with
                             (( _c_o_m_m_a_n_d )) inherit the DDEEBBUUGG and RREETTUURRNN traps.
                      66..     Error tracing is enabled:  command  substitution,
                             shell  functions,  and  subshells  invoked with ((
                             _c_o_m_m_a_n_d )) inherit the EERRRR trap.
              eexxttgglloobb If set, enable the extended  pattern  matching  features
                      described above under PPaatthhnnaammee EExxppaannssiioonn.
              eexxttqquuoottee
                      If  set,  $$'_s_t_r_i_n_g'  and  $$"_s_t_r_i_n_g" quoting is performed
                      within  $${{_p_a_r_a_m_e_t_e_r}}  expansions  enclosed   in   double
                      quotes.  This option is enabled by default.
              ffaaiillgglloobb
                      If  set,  patterns  which fail to match filenames during
                      pathname expansion result in an expansion error.
              ffoorrccee__ffiiggnnoorree
                      If set, the suffixes  specified  by  the  FFIIGGNNOORREE  shell
                      variable  cause words to be ignored when performing word
                      completion even if the ignored words are the only possi-
                      ble completions.  See SShheellll VVaarriiaabblleess above  for  a  de-
                      scription  of  FFIIGGNNOORREE.   This  option is enabled by de-
                      fault.
              gglloobbaasscciiiirraannggeess
                      If set,  range  expressions  used  in  pattern  matching
                      bracket  expressions (see PPaatttteerrnn MMaattcchhiinngg above) behave
                      as if in the traditional C locale when  performing  com-
                      parisons.   That  is, pattern matching does not take the
                      current locale's collating sequence into account,  so  bb
                      will  not  collate  between  AA and BB, and upper-case and
                      lower-case ASCII characters will collate together.
              gglloobbsskkiippddoottss
                      If set, pathname expansion will never  match  the  file-
                      names  _.  and _._., even if the pattern begins with a ".".
                      This option is enabled by default.
              gglloobbssttaarr
                      If set, the pattern **** used in a pathname expansion con-
                      text will match all files and zero or  more  directories
                      and  subdirectories.  If the pattern is followed by a //,
                      only directories and subdirectories match.
              ggnnuu__eerrrrffmmtt
                      If set, shell error messages are written in the standard
                      GNU error message format.
              hhiissttaappppeenndd
                      If set, the history list is appended to the  file  named
                      by the value of the HHIISSTTFFIILLEE variable when the shell ex-
                      its, rather than overwriting the file.
              hhiissttrreeeeddiitt
                      If  set,  and  rreeaaddlliinnee is being used, the user is given
                      the opportunity to re-edit a  failed  history  substitu-
                      tion.
              hhiissttvveerriiffyy
                      If  set, and rreeaaddlliinnee is being used, the results of his-
                      tory substitution are  not  immediately  passed  to  the
                      shell  parser.   Instead,  the  resulting line is loaded
                      into the rreeaaddlliinnee editing buffer, allowing further modi-
                      fication.
              hhoossttccoommpplleettee
                      If set, and rreeaaddlliinnee is being used, bbaasshh will attempt to
                      perform hostname completion when a word containing  a  @@
                      is   being  completed  (see  CCoommpplleettiinngg  under  RREEAADDLLIINNEE
                      above).  This is enabled by default.
              hhuuppoonneexxiitt
                      If set, bbaasshh will send SSIIGGHHUUPP to all jobs when an inter-
                      active login shell exits.
              iinnhheerriitt__eerrrreexxiitt
                      If set, command substitution inherits the value  of  the
                      eerrrreexxiitt  option, instead of unsetting it in the subshell
                      environment.  This option is enabled when posix mode  is
                      enabled.
              iinntteerraaccttiivvee__ccoommmmeennttss
                      In  an interactive shell, a word beginning with ## causes
                      that word and all remaining characters on that  line  to
                      be  ignored, as in a non-interactive shell (see CCOOMMMMEENNTTSS
                      above).  This option is enabled by default.
              llaassttppiippee
                      If set, and job control is not active,  the  shell  runs
                      the last command of a pipeline not executed in the back-
                      ground in the current shell environment.
              lliitthhiisstt If  set,  and  the ccmmddhhiisstt option is enabled, multi-line
                      commands are saved to the history with embedded newlines
                      rather than using semicolon separators where possible.
              llooccaallvvaarr__iinnhheerriitt
                      If set, local variables inherit the value and attributes
                      of a variable of the same name that exists at a previous
                      scope before any new value is assigned.  The nameref at-
                      tribute is not inherited.
              llooccaallvvaarr__uunnsseett
                      If set, calling uunnsseett on  local  variables  in  previous
                      function  scopes  marks  them so subsequent lookups find
                      them unset until that function returns.  This is identi-
                      cal to the behavior of unsetting local variables at  the
                      current function scope.
              llooggiinn__sshheellll
                      The  shell  sets this option if it is started as a login
                      shell (see IINNVVOOCCAATTIIOONN above).   The  value  may  not  be
                      changed.
              mmaaiillwwaarrnn
                      If  set,  and  a file that bbaasshh is checking for mail has
                      been accessed since the last time it was  checked,  bbaasshh
                      displays  the  message  "The  mail  in _m_a_i_l_f_i_l_e has been
                      read".
              nnoo__eemmppttyy__ccmmdd__ccoommpplleettiioonn
                      If set, and rreeaaddlliinnee is being used, bbaasshh does not search
                      PPAATTHH for possible completions  when  completion  is  at-
                      tempted on an empty line.
              nnooccaasseegglloobb
                      If  set,  bbaasshh  matches  filenames in a case-insensitive
                      fashion when performing pathname expansion (see PPaatthhnnaammee
                      EExxppaannssiioonn above).
              nnooccaasseemmaattcchh
                      If set, bbaasshh  matches  patterns  in  a  case-insensitive
                      fashion when performing matching while executing ccaassee or
                      [[[[ conditional commands, when performing pattern substi-
                      tution  word expansions, or when filtering possible com-
                      pletions as part of programmable completion.
              nnooeexxppaanndd__ttrraannssllaattiioonn
                      If set, bbaasshh encloses the translated results  of  $$""...""
                      quoting  in  single quotes instead of double quotes.  If
                      the string is not translated, this has no effect.
              nnuullllgglloobb
                      If set, pathname expansion patterns which match no files
                      (see PPaatthhnnaammee EExxppaannssiioonn above) expand to nothing and are
                      removed, rather than expanding to themselves.
              ppaattssuubb__rreeppllaacceemmeenntt
                      If set, bbaasshh expands occurrences of && in the replacement
                      string of pattern substitution to the  text  matched  by
                      the  pattern,  as  described  under  PPaarraammeetteerr EExxppaannssiioonn
                      above.  This option is enabled by default.
              pprrooggccoommpp
                      If set, enable the  programmable  completion  facilities
                      (see PPrrooggrraammmmaabbllee CCoommpplleettiioonn above).  This option is en-
                      abled by default.
              pprrooggccoommpp__aalliiaass
                      If  set,  and  programmable  completion is enabled, bbaasshh
                      treats a command name that doesn't have any  completions
                      as a possible alias and attempts alias expansion.  If it
                      has  an alias, bbaasshh attempts programmable completion us-
                      ing the command word resulting from the expanded alias.
              pprroommppttvvaarrss
                      If set, prompt strings undergo parameter expansion, com-
                      mand substitution, arithmetic expansion, and  quote  re-
                      moval  after  being  expanded  as described in PPRROOMMPPTTIINNGG
                      above.  This option is enabled by default.
              rreessttrriicctteedd__sshheellll
                      The shell sets this option  if  it  is  started  in  re-
                      stricted  mode  (see RREESSTTRRIICCTTEEDD SSHHEELLLL below).  The value
                      may not be changed.  This is not reset when the  startup
                      files  are  executed, allowing the startup files to dis-
                      cover whether or not a shell is restricted.
              sshhiifftt__vveerrbboossee
                      If set, the sshhiifftt builtin prints an error  message  when
                      the shift count exceeds the number of positional parame-
                      ters.
              ssoouurrcceeppaatthh
                      If set, the .. (ssoouurrccee) builtin uses the value of PPAATTHH to
                      find  the  directory  containing the file supplied as an
                      argument when the --pp option is not supplied.   This  op-
                      tion is enabled by default.
              vvaarrrreeddiirr__cclloossee
                      If  set, the shell automatically closes file descriptors
                      assigned using the  _{_v_a_r_n_a_m_e_}  redirection  syntax  (see
                      RREEDDIIRREECCTTIIOONN above) instead of leaving them open when the
                      command completes.
              xxppgg__eecchhoo
                      If  set,  the  eecchhoo builtin expands backslash-escape se-
                      quences by default.  If the ppoossiixx shell option  is  also
                      enabled, eecchhoo does not interpret any options.

       ssuussppeenndd [--ff]
              Suspend  the execution of this shell until it receives a SSIIGGCCOONNTT
              signal.  A login shell, or a shell without job control  enabled,
              cannot  be suspended; the --ff option will override this and force
              the suspension.  The return status is 0 unless the  shell  is  a
              login  shell  or  job  control is not enabled and --ff is not sup-
              plied.

       tteesstt _e_x_p_r
       [[ _e_x_p_r ]]
              Return a status of 0 (true) or 1 (false) depending on the evalu-
              ation of the conditional expression  _e_x_p_r.   Each  operator  and
              operand  must  be a separate argument.  Expressions are composed
              of the primaries described above under CCOONNDDIITTIIOONNAALL  EEXXPPRREESSSSIIOONNSS.
              tteesstt  does not accept any options, nor does it accept and ignore
              an argument of ---- as signifying the end of options.

              Expressions may  be  combined  using  the  following  operators,
              listed  in  decreasing  order of precedence.  The evaluation de-
              pends on the number of arguments; see below.  tteesstt uses operator
              precedence when there are five or more arguments.
              !! _e_x_p_r True if _e_x_p_r is false.
              (( _e_x_p_r ))
                     Returns the value of _e_x_p_r.  This may be used to  override
                     normal operator precedence.
              _e_x_p_r_1 -aa _e_x_p_r_2
                     True if both _e_x_p_r_1 and _e_x_p_r_2 are true.
              _e_x_p_r_1 -oo _e_x_p_r_2
                     True if either _e_x_p_r_1 or _e_x_p_r_2 is true.

              tteesstt and [[ evaluate conditional expressions using a set of rules
              based on the number of arguments.

              0 arguments
                     The expression is false.
              1 argument
                     The expression is true if and only if the argument is not
                     null.
              2 arguments
                     If the first argument is !!, the expression is true if and
                     only  if the second argument is null.  If the first argu-
                     ment is one of the  unary  conditional  operators  listed
                     above  under  CCOONNDDIITTIIOONNAALL  EEXXPPRREESSSSIIOONNSS, the expression is
                     true if the unary test is true.  If the first argument is
                     not a valid unary conditional operator, the expression is
                     false.
              3 arguments
                     The following conditions are applied in the order listed.
                     If the second argument is one of the  binary  conditional
                     operators listed above under CCOONNDDIITTIIOONNAALL EEXXPPRREESSSSIIOONNSS, the
                     result of the expression is the result of the binary test
                     using  the first and third arguments as operands.  The --aa
                     and --oo operators are  considered  binary  operators  when
                     there  are  three arguments.  If the first argument is !!,
                     the value is the negation of the two-argument test  using
                     the second and third arguments.  If the first argument is
                     exactly (( and the third argument is exactly )), the result
                     is  the one-argument test of the second argument.  Other-
                     wise, the expression is false.
              4 arguments
                     The following conditions are applied in the order listed.
                     If the first argument is !!, the result is the negation of
                     the three-argument expression composed of  the  remaining
                     arguments.   If  the  first argument is exactly (( and the
                     fourth argument is exactly )), the result is the two-argu-
                     ment test of the second and third arguments.   Otherwise,
                     the  expression  is  parsed  and  evaluated  according to
                     precedence using the rules listed above.
              5 or more arguments
                     The expression  is  parsed  and  evaluated  according  to
                     precedence using the rules listed above.

              When the shell is in posix mode, or if the expression is part of
              the [[[[ command, the << and >> operators sort using the current lo-
              cale.   If  the  shell is not in posix mode, the tteesstt and [[ com-
              mands sort lexicographically using ASCII ordering.

              The historical operator-precedence parsing with 4 or more  argu-
              ments  can  lead  to ambiguities when it encounters strings that
              look like primaries.  The POSIX standard has deprecated  the  --aa
              and  --oo  primaries and enclosing expressions within parentheses.
              Scripts should no longer use them.  It's much more  reliable  to
              restrict  test  invocations  to a single primary, and to replace
              uses of --aa and --oo with the shell's &&&& and |||| list operators.

       ttiimmeess  Print the accumulated user and system times for  the  shell  and
              for processes run from the shell.  The return status is 0.

       ttrraapp [--llppPP] [[_a_c_t_i_o_n] _s_i_g_s_p_e_c ...]
              The _a_c_t_i_o_n is a command that is read and executed when the shell
              receives  any  of the signals _s_i_g_s_p_e_c.  If _a_c_t_i_o_n is absent (and
              there is a single _s_i_g_s_p_e_c) or --, each specified _s_i_g_s_p_e_c is reset
              to the value it had when the shell was started.   If  _a_c_t_i_o_n  is
              the  null string the signal specified by each _s_i_g_s_p_e_c is ignored
              by the shell and by the commands it invokes.

              If no arguments are supplied, ttrraapp displays the actions  associ-
              ated with each trapped signal as a set of ttrraapp commands that can
              be  reused as shell input to restore the current signal disposi-
              tions.  If --pp is given, and _a_c_t_i_o_n is  not  present,  then  ttrraapp
              displays  the  actions  associated with each _s_i_g_s_p_e_c or, if none
              are supplied, for all trapped signals, as a set of ttrraapp commands
              that can be reused as shell input to restore the current  signal
              dispositions.   The  --PP  option  behaves similarly, but displays
              only the actions associated with each _s_i_g_s_p_e_c argument.  --PP  re-
              quires  at least one _s_i_g_s_p_e_c argument.  The --PP or --pp options may
              be used in a subshell environment (e.g.,  command  substitution)
              and,  as  long  as they are used before ttrraapp is used to change a
              signal's handling, will display the state of its parent's traps.

              The --ll option prints a list of signal  names  and  their  corre-
              sponding  numbers.  Each _s_i_g_s_p_e_c is either a signal name defined
              in <_s_i_g_n_a_l_._h>, or a signal number.  Signal names are case insen-
              sitive and the SSIIGG prefix is optional.  If --ll is  supplied  with
              no _s_i_g_s_p_e_c arguments, it prints a list of valid signal names.

              If  a  _s_i_g_s_p_e_c  is EEXXIITT (0), _a_c_t_i_o_n is executed on exit from the
              shell.  If a _s_i_g_s_p_e_c is DDEEBBUUGG, _a_c_t_i_o_n is executed  before  every
              _s_i_m_p_l_e  _c_o_m_m_a_n_d,  _f_o_r  command, _c_a_s_e command, _s_e_l_e_c_t command, ((
              arithmetic command, [[ conditional command, arithmetic _f_o_r  com-
              mand,  and before the first command executes in a shell function
              (see SSHHEELLLL GGRRAAMMMMAARR above).  Refer  to  the  description  of  the
              eexxttddeebbuugg  shell  option (see sshhoopptt above) for details of its ef-
              fect on the DDEEBBUUGG trap.  If a _s_i_g_s_p_e_c is RREETTUURRNN, _a_c_t_i_o_n is  exe-
              cuted each time a shell function or a script executed with the ..
              or ssoouurrccee builtins finishes executing.

              If  a  _s_i_g_s_p_e_c  is  EERRRR,  _a_c_t_i_o_n is executed whenever a pipeline
              (which may consist of a single simple command),  a  list,  or  a
              compound  command returns a non-zero exit status, subject to the
              following conditions.  The EERRRR  trap  is  not  executed  if  the
              failed command is part of the command list immediately following
              a wwhhiillee or uunnttiill reserved word, part of the test in an _i_f state-
              ment,  part  of a command executed in a &&&& or |||| list except the
              command following the final &&&& or ||||, any command in a  pipeline
              but  the  last  (subject  to the state of the ppiippeeffaaiill shell op-
              tion), or if the command's return value is being inverted  using
              !!.  These are the same conditions obeyed by the eerrrreexxiitt (--ee) op-
              tion.

              When the shell is not interactive, signals ignored upon entry to
              the shell cannot be trapped or reset.  Interactive shells permit
              trapping signals ignored on entry.  Trapped signals that are not
              being  ignored  are reset to their original values in a subshell
              or subshell environment when one is created.  The return  status
              is false if any _s_i_g_s_p_e_c is invalid; otherwise ttrraapp returns true.

       ttrruuee   Does nothing, returns a 0 status.

       ttyyppee [--aaffttppPP] _n_a_m_e [_n_a_m_e ...]
              Indicate how each _n_a_m_e would be interpreted if used as a command
              name.

              If  the  --tt option is used, ttyyppee prints a string which is one of
              _a_l_i_a_s, _k_e_y_w_o_r_d, _f_u_n_c_t_i_o_n, _b_u_i_l_t_i_n, or _f_i_l_e if _n_a_m_e is an  alias,
              shell  reserved word, function, builtin, or executable file, re-
              spectively.  If the _n_a_m_e is not found, ttyyppee prints  nothing  and
              returns a non-zero exit status.

              If  the  --pp  option is used, ttyyppee either returns the pathname of
              the executable file that would be found by searching  $$PPAATTHH  for
              _n_a_m_e or nothing if "type -t name" would not return _f_i_l_e.  The --PP
              option  forces  a  PPAATTHH  search  for each _n_a_m_e, even if "type -t
              name" would not return _f_i_l_e.  If _n_a_m_e is present in the table of
              hashed commands, --pp and --PP print the hashed value, which is  not
              necessarily the file that appears first in PPAATTHH.

              If  the  --aa  option  is used, ttyyppee prints all of the places that
              contain a command named _n_a_m_e.  This includes  aliases,  reserved
              words,  functions, and builtins, but the path search options (--pp
              and --PP) can be supplied to restrict  the  output  to  executable
              files.   ttyyppee does not consult the table of hashed commands when
              using --aa with --pp, and only performs a PPAATTHH search for _n_a_m_e.

              The --ff option suppresses shell function lookup, as with the ccoomm--
              mmaanndd builtin.  ttyyppee returns true if all  of  the  arguments  are
              found, false if any are not found.

       uulliimmiitt [--HHSS] --aa
       uulliimmiitt [--HHSS] [--bbccddeeffiikkllmmnnppqqrrssttuuvvxxPPRRTT [_l_i_m_i_t]]
              Provides  control  over the resources available to the shell and
              to processes it starts, on systems that allow such control.

              The --HH and --SS options specify whether the hard or soft limit  is
              set for the given resource.  A hard limit cannot be increased by
              a non-root user once it is set; a soft limit may be increased up
              to  the value of the hard limit.  If neither --HH nor --SS is speci-
              fied, uulliimmiitt sets both the soft and hard limits.

              The value of _l_i_m_i_t can be a number in the unit specified for the
              resource or one of the special values hhaarrdd, ssoofftt, or  uunnlliimmiitteedd,
              which  stand for the current hard limit, the current soft limit,
              and no limit, respectively.  If _l_i_m_i_t is omitted, uulliimmiitt  prints
              the  current value of the soft limit of the resource, unless the
              --HH option is given.  When more than one resource  is  specified,
              the  limit name and unit, if appropriate, are printed before the
              value.  Other options are interpreted as follows:
              --aa     Report all current limits; no limits are set.
              --bb     The maximum socket buffer size.
              --cc     The maximum size of core files created.
              --dd     The maximum size of a process's data segment.
              --ee     The maximum scheduling priority ("nice").
              --ff     The maximum size of files written by the  shell  and  its
                     children.
              --ii     The maximum number of pending signals.
              --kk     The maximum number of kqueues that may be allocated.
              --ll     The maximum size that may be locked into memory.
              --mm     The  maximum resident set size (many systems do not honor
                     this limit).
              --nn     The maximum number of open file descriptors (most systems
                     do not allow this value to be set).
              --pp     The pipe size in 512-byte blocks (this may not be set).
              --qq     The maximum number of bytes in POSIX message queues.
              --rr     The maximum real-time scheduling priority.
              --ss     The maximum stack size.
              --tt     The maximum amount of cpu time in seconds.
              --uu     The maximum number of processes  available  to  a  single
                     user.
              --vv     The  maximum  amount  of  virtual memory available to the
                     shell and, on some systems, to its children.
              --xx     The maximum number of file locks.
              --PP     The maximum number of pseudoterminals.
              --RR     The maximum time  a  real-time  process  can  run  before
                     blocking, in microseconds.
              --TT     The maximum number of threads.

              If  _l_i_m_i_t  is  supplied, and the --aa option is not used, _l_i_m_i_t is
              the new value of the specified resource.  If no option  is  sup-
              plied, then --ff is assumed.

              Values  are  in 1024-byte increments, except for --tt, which is in
              seconds; --RR, which is in microseconds; --pp, which is in units  of
              512-byte  blocks; --PP, --TT, --bb, --kk, --nn, and --uu, which are unscaled
              values; and, when in  posix  mode,  --cc  and  --ff,  which  are  in
              512-byte  increments.   The return status is 0 unless an invalid
              option or argument is supplied, or an error occurs while setting
              a new limit.

       uummaasskk [--pp] [--SS] [_m_o_d_e]
              Set the user file-creation mask to _m_o_d_e.  If _m_o_d_e begins with  a
              digit, it is interpreted as an octal number; otherwise it is in-
              terpreted  as  a  symbolic mode mask similar to that accepted by
              _c_h_m_o_d(1).  If _m_o_d_e is omitted, uummaasskk prints the current value of
              the mask.  The --SS option without a _m_o_d_e argument prints the mask
              in a symbolic format; the default output is an octal number.  If
              the --pp option is supplied, and _m_o_d_e is omitted, the output is in
              a form that may be reused as input.  The return status  is  zero
              if  the mode was successfully changed or if no _m_o_d_e argument was
              supplied, and non-zero otherwise.

       uunnaalliiaass [-aa] [_n_a_m_e ...]
              Remove each _n_a_m_e from the list of defined  aliases.   If  --aa  is
              supplied,  remove  all  alias  definitions.  The return value is
              true unless a supplied _n_a_m_e is not a defined alias.

       uunnsseett [-ffvv] [-nn] [_n_a_m_e ...]
              For each _n_a_m_e, remove the corresponding  variable  or  function.
              If the --vv option is given, each _n_a_m_e refers to a shell variable,
              and  that  variable  is  removed.  If --ff is specified, each _n_a_m_e
              refers to a shell function, and the function definition  is  re-
              moved.   If  the  --nn  option is supplied, and _n_a_m_e is a variable
              with the _n_a_m_e_r_e_f attribute, _n_a_m_e will be unset rather  than  the
              variable  it  references.   --nn has no effect if the --ff option is
              supplied.  Read-only variables and functions may not  be  unset.
              When  variables  or functions are removed, they are also removed
              from the environment passed to subsequent commands.  If  no  op-
              tions  are supplied, each _n_a_m_e refers to a variable; if there is
              no variable by that name, a function with that name, if any,  is
              unset.   Some  shell  variables  may  not  be  unset.  If any of
              BBAASSHH__AALLIIAASSEESS,  BBAASSHH__AARRGGVV00,  BBAASSHH__CCMMDDSS,  BBAASSHH__CCOOMMMMAANNDD,  BBAASSHH__SSUUBB--
              SSHHEELLLL,   BBAASSHHPPIIDD,   CCOOMMPP__WWOORRDDBBRREEAAKKSS,   DDIIRRSSTTAACCKK,  EEPPOOCCHHRREEAALLTTIIMMEE,
              EEPPOOCCHHSSEECCOONNDDSS, FFUUNNCCNNAAMMEE, GGRROOUUPPSS, HHIISSTTCCMMDD,  LLIINNEENNOO,  RRAANNDDOOMM,  SSEECC--
              OONNDDSS,  or SSRRAANNDDOOMM are unset, they lose their special properties,
              even if they are subsequently reset.  The exit  status  is  true
              unless a _n_a_m_e is readonly or may not be unset.

       wwaaiitt [--ffnn] [--pp _v_a_r_n_a_m_e] [_i_d ...]
              Wait for each specified child process _i_d and return the termina-
              tion  status of the last _i_d.  Each _i_d may be a process ID _p_i_d or
              a job specification _j_o_b_s_p_e_c; if  a  jobspec  is  supplied,  wwaaiitt
              waits for all processes in the job.

              If  no  options  or _i_ds are supplied, wwaaiitt waits for all running
              background jobs and the last-executed process  substitution,  if
              its process id is the same as $$!!, and the return status is zero.

              If  the  --nn  option  is  supplied, wwaaiitt waits for any one of the
              given _i_ds or, if no _i_ds are supplied, any job or process substi-
              tution, to complete and returns its exit status.  If none of the
              supplied _i_ds is a child of the shell, or if no _i_ds are  supplied
              and  the  shell has no unwaited-for children, the exit status is
              127.

              If the --pp option is supplied, wwaaiitt assigns the  process  or  job
              identifier  of  the job for which the exit status is returned to
              the variable _v_a_r_n_a_m_e named by the option  argument.   The  vari-
              able,  which cannot be readonly, will be unset initially, before
              any assignment.  This is useful only when used with the  --nn  op-
              tion.

              Supplying  the  --ff  option,  when job control is enabled, forces
              wwaaiitt to wait for each _i_d to terminate before returning its  sta-
              tus, instead of returning when it changes status.

              If  none  of  the  _i_ds  specify  one of the shell's active child
              processes, the return status is 127.  If wwaaiitt is interrupted  by
              a  signal,  any _v_a_r_n_a_m_e will remain unset, and the return status
              will be greater than 128,  as  described  under  SSIIGGNNAALLSS  above.
              Otherwise, the return status is the exit status of the last _i_d.

SSHHEELLLL CCOOMMPPAATTIIBBIILLIITTYY MMOODDEE
       Bash-4.0  introduced the concept of a _s_h_e_l_l _c_o_m_p_a_t_i_b_i_l_i_t_y _l_e_v_e_l, speci-
       fied as a set of options to the shopt builtin (ccoommppaatt3311, ccoommppaatt3322, ccoomm--
       ppaatt4400, ccoommppaatt4411, and so on).  There is only one  current  compatibility
       level -- each option is mutually exclusive.  The compatibility level is
       intended  to allow users to select behavior from previous versions that
       is incompatible with newer versions while they migrate scripts  to  use
       current  features  and behavior.  It's intended to be a temporary solu-
       tion.

       This section does not mention behavior that is standard for a  particu-
       lar  version  (e.g., setting ccoommppaatt3322 means that quoting the right hand
       side of the regexp matching operator quotes special  regexp  characters
       in  the word, which is default behavior in bash-3.2 and subsequent ver-
       sions).

       If a user enables, say, ccoommppaatt3322, it may affect the behavior  of  other
       compatibility  levels  up  to  and  including the current compatibility
       level.  The idea is that each  compatibility  level  controls  behavior
       that  changed  in that version of bbaasshh, but that behavior may have been
       present in earlier versions.  For instance, the change to  use  locale-
       based  comparisons  with  the  [[[[ command came in bash-4.1, and earlier
       versions used ASCII-based comparisons, so enabling ccoommppaatt3322 will enable
       ASCII-based comparisons as well.  That granularity may  not  be  suffi-
       cient  for  all uses, and as a result users should employ compatibility
       levels carefully.  Read the documentation for a particular  feature  to
       find out the current behavior.

       Bash-4.3  introduced  a new shell variable: BBAASSHH__CCOOMMPPAATT.  The value as-
       signed to this variable (a decimal version number like 4.2, or an inte-
       ger corresponding to the ccoommppaatt_N_N option, like 42) determines the  com-
       patibility level.

       Starting with bash-4.4, bbaasshh began deprecating older compatibility lev-
       els.  Eventually, the options will be removed in favor of BBAASSHH__CCOOMMPPAATT.

       Bash-5.0  was the final version for which there was an individual shopt
       option for the previous version.  BBAASSHH__CCOOMMPPAATT is the only mechanism  to
       control the compatibility level in versions newer than bash-5.0.

       The  following  table describes the behavior changes controlled by each
       compatibility level setting.  The ccoommppaatt_N_N tag is used as shorthand for
       setting the compatibility level to _N_N using one of the following mecha-
       nisms.  For versions prior to bash-5.0, the compatibility level may  be
       set  using  the  corresponding ccoommppaatt_N_N shopt option.  For bash-4.3 and
       later versions, the BBAASSHH__CCOOMMPPAATT variable is preferred, and  it  is  re-
       quired for bash-5.1 and later versions.

       ccoommppaatt3311
              +o      Quoting the rhs of the [[[[ command's regexp matching oper-
                     ator (=~) has no special effect.

       ccoommppaatt3322
              +o      The  <<  and >> operators to the [[[[ command do not consider
                     the current locale when comparing strings; they use ASCII
                     ordering.

       ccoommppaatt4400
              +o      The << and >> operators to the [[[[ command do  not  consider
                     the current locale when comparing strings; they use ASCII
                     ordering.  BBaasshh versions prior to bash-4.1 use ASCII col-
                     lation  and _s_t_r_c_m_p(3); bash-4.1 and later use the current
                     locale's collation sequence and _s_t_r_c_o_l_l(3).

       ccoommppaatt4411
              +o      In posix mode, ttiimmee may be followed by options and  still
                     be recognized as a reserved word (this is POSIX interpre-
                     tation 267).
              +o      In _p_o_s_i_x mode, the parser requires that an even number of
                     single  quotes  occur  in  the  _w_o_r_d portion of a double-
                     quoted parameter expansion and treats them specially,  so
                     that  characters  within the single quotes are considered
                     quoted (this is POSIX interpretation 221).

       ccoommppaatt4422
              +o      The replacement string in double-quoted pattern substitu-
                     tion does not undergo quote removal, as it does  in  ver-
                     sions after bash-4.2.
              +o      In  posix mode, single quotes are considered special when
                     expanding the _w_o_r_d portion of a  double-quoted  parameter
                     expansion  and  can  be  used to quote a closing brace or
                     other special character (this is part of POSIX  interpre-
                     tation  221);  in  later  versions, single quotes are not
                     special within double-quoted word expansions.

       ccoommppaatt4433
              +o      Word expansion errors  are  considered  non-fatal  errors
                     that  cause  the  current  command to fail, even in posix
                     mode (the default behavior is to make them  fatal  errors
                     that cause the shell to exit).
              +o      When   executing   a   shell  function,  the  loop  state
                     (while/until/etc.)  is not reset, so bbrreeaakk or ccoonnttiinnuuee in
                     that function will break or continue loops in the calling
                     context.  Bash-4.4 and later reset the loop state to pre-
                     vent this.

       ccoommppaatt4444
              +o      The shell sets  up  the  values  used  by  BBAASSHH__AARRGGVV  and
                     BBAASSHH__AARRGGCC  so  they  can expand to the shell's positional
                     parameters even if extended debugging  mode  is  not  en-
                     abled.
              +o      A  subshell  inherits  loops  from its parent context, so
                     bbrreeaakk or  ccoonnttiinnuuee  will  cause  the  subshell  to  exit.
                     Bash-5.0  and  later  reset the loop state to prevent the
                     exit
              +o      Variable assignments preceding builtins like  eexxppoorrtt  and
                     rreeaaddoonnllyy that set attributes continue to affect variables
                     with the same name in the calling environment even if the
                     shell is not in posix mode.

       ccoommppaatt5500
              +o      Bash-5.1  changed  the way $$RRAANNDDOOMM is generated to intro-
                     duce slightly more randomness.  If the shell  compatibil-
                     ity level is set to 50 or lower, it reverts to the method
                     from  bash-5.0 and previous versions, so seeding the ran-
                     dom number generator by assigning a value to RRAANNDDOOMM  will
                     produce the same sequence as in bash-5.0.
              +o      If  the  command hash table is empty, bash versions prior
                     to bash-5.1 printed an informational message to that  ef-
                     fect,  even  when  producing output that can be reused as
                     input.  Bash-5.1 suppresses that message when the --ll  op-
                     tion is supplied.

       ccoommppaatt5511
              +o      The  uunnsseett  builtin  treats  attempts to unset array sub-
                     scripts @@ and ** differently depending on whether the  ar-
                     ray  is  indexed  or associative, and differently than in
                     previous versions.
              +o      Arithmetic commands ( ((((...)))) ) and the expressions in an
                     arithmetic for statement can be expanded more than once.
              +o      Expressions used as arguments to arithmetic operators  in
                     the  [[[[  conditional  command  can  be expanded more than
                     once.
              +o      The expressions in substring  parameter  brace  expansion
                     can be expanded more than once.
              +o      The expressions in the $$((((...)))) word expansion can be ex-
                     panded more than once.
              +o      Arithmetic  expressions  used as indexed array subscripts
                     can be expanded more than once.
              +o      tteesstt --vv, when given an argument of AA[[@@]], where  AA  is  an
                     existing associative array, will return true if the array
                     has  any set elements.  Bash-5.2 will look for and report
                     on a key named @@.
              +o      The  ${_p_a_r_a_m_e_t_e_r[[::]]==_v_a_l_u_e}  word  expansion  will  return
                     _v_a_l_u_e,  before any variable-specific transformations have
                     been performed (e.g., converting to lowercase).  Bash-5.2
                     will return the final value assigned to the variable.
              +o      Parsing command substitutions will behave as if  extended
                     globbing (see the description of the sshhoopptt builtin above)
                     is  enabled,  so that parsing a command substitution con-
                     taining an extglob pattern (say, as part of a shell func-
                     tion) will not fail.  This assumes the intent is  to  en-
                     able  extglob before the command is executed and word ex-
                     pansions are performed.  It will fail at  word  expansion
                     time  if extglob hasn't been enabled by the time the com-
                     mand is executed.

       ccoommppaatt5522
              +o      The tteesstt builtin uses its historical algorithm  to  parse
                     parenthesized  subexpressions when given five or more ar-
                     guments.
              +o      If the --pp or --PP option is supplied to the  bbiinndd  builtin,
                     bbiinndd treats any arguments remaining after option process-
                     ing  as  bindable command names, and displays any key se-
                     quences bound to those commands, instead of treating  the
                     arguments as key sequences to bind.

RREESSTTRRIICCTTEEDD SSHHEELLLL
       If bbaasshh is started with the name rrbbaasshh, or the --rr option is supplied at
       invocation,  the  shell becomes _r_e_s_t_r_i_c_t_e_d.  A restricted shell is used
       to set up an environment more controlled than the standard  shell.   It
       behaves  identically  to bbaasshh with the exception that the following are
       disallowed or not performed:

       +o      Changing directories with ccdd.

       +o      Setting or unsetting the values of SSHHEELLLL, PPAATTHH,  HHIISSTTFFIILLEE,  EENNVV,
              or BBAASSHH__EENNVV.

       +o      Specifying command names containing //.

       +o      Specifying  a  filename  containing  a // as an argument to the ..
              builtin command.

       +o      Using the --pp option to the  ..   builtin  command  to  specify  a
              search path.

       +o      Specifying  a  filename containing a slash as an argument to the
              hhiissttoorryy builtin command.

       +o      Specifying a filename containing a slash as an argument  to  the
              --pp option to the hhaasshh builtin command.

       +o      Importing  function  definitions  from  the shell environment at
              startup.

       +o      Parsing the values of BBAASSHHOOPPTTSS and SSHHEELLLLOOPPTTSS from the shell  en-
              vironment at startup.

       +o      Redirecting  output using the >, >|, <>, >&, &>, and >> redirec-
              tion operators.

       +o      Using the eexxeecc builtin command to replace the shell with another
              command.

       +o      Adding or deleting builtin commands with the --ff and  --dd  options
              to the eennaabbllee builtin command.

       +o      Using  the  eennaabbllee  builtin  command  to  enable  disabled shell
              builtins.

       +o      Specifying the --pp option to the ccoommmmaanndd builtin command.

       +o      Turning off  restricted  mode  with  sseett  ++rr  or  sshhoopptt  --uu  rree--
              ssttrriicctteedd__sshheellll.

       These restrictions are enforced after any startup files are read.

       When a command that is found to be a shell script is executed (see CCOOMM--
       MMAANNDD  EEXXEECCUUTTIIOONN  above),  rrbbaasshh turns off any restrictions in the shell
       spawned to execute the script.

SSEEEE AALLSSOO
       _B_a_s_h _R_e_f_e_r_e_n_c_e _M_a_n_u_a_l, Brian Fox and Chet Ramey
       _T_h_e _G_n_u _R_e_a_d_l_i_n_e _L_i_b_r_a_r_y, Brian Fox and Chet Ramey
       _T_h_e _G_n_u _H_i_s_t_o_r_y _L_i_b_r_a_r_y, Brian Fox and Chet Ramey
       _P_o_r_t_a_b_l_e _O_p_e_r_a_t_i_n_g _S_y_s_t_e_m _I_n_t_e_r_f_a_c_e _(_P_O_S_I_X_) _P_a_r_t _2_: _S_h_e_l_l _a_n_d _U_t_i_l_i_-
       _t_i_e_s, IEEE --
              http://pubs.opengroup.org/onlinepubs/9799919799/
       http://tiswww.case.edu/~chet/bash/POSIX -- a description of posix mode
       _s_h(1), _k_s_h(1), _c_s_h(1)
       _e_m_a_c_s(1), _v_i(1)
       _r_e_a_d_l_i_n_e(3)

FFIILLEESS
       _/_b_i_n_/_b_a_s_h
              The bbaasshh executable
       _/_e_t_c_/_p_r_o_f_i_l_e
              The systemwide initialization file, executed for login shells
       _~_/_._b_a_s_h___p_r_o_f_i_l_e
              The personal initialization file, executed for login shells
       _~_/_._b_a_s_h_r_c
              The individual per-interactive-shell startup file
       _~_/_._b_a_s_h___l_o_g_o_u_t
              The individual login shell cleanup file, executed when  a  login
              shell exits
       _~_/_._b_a_s_h___h_i_s_t_o_r_y
              The  default value of HHIISSTTFFIILLEE, the file in which bash saves the
              command history
       _~_/_._i_n_p_u_t_r_c
              Individual _r_e_a_d_l_i_n_e initialization file

AAUUTTHHOORRSS
       Brian Fox, Free Software Foundation
       bfox@gnu.org

       Chet Ramey, Case Western Reserve University
       chet.ramey@case.edu

BBUUGG RREEPPOORRTTSS
       If you find a bug in bbaasshh, you should report it.  But first, you should
       make sure that it really is a bug, and that it appears  in  the  latest
       version   of  bbaasshh.   The  latest  version  is  always  available  from
       _f_t_p_:_/_/_f_t_p_._g_n_u_._o_r_g_/_p_u_b_/_g_n_u_/_b_a_s_h_/          and          _h_t_t_p_:_/_/_g_i_t_._s_a_v_a_n_-
       _n_a_h_._g_n_u_._o_r_g_/_c_g_i_t_/_b_a_s_h_._g_i_t_/_s_n_a_p_s_h_o_t_/_b_a_s_h_-_m_a_s_t_e_r_._t_a_r_._g_z.

       Once  you  have  determined that a bug actually exists, use the _b_a_s_h_b_u_g
       command to submit a bug report.  If you have a fix, you are  encouraged
       to mail that as well!  You may send suggestions and "philosophical" bug
       reports  to  _b_u_g_-_b_a_s_h_@_g_n_u_._o_r_g  or  post  them  to  the Usenet newsgroup
       ggnnuu..bbaasshh..bbuugg.

       ALL bug reports should include:

       The version number of bbaasshh
       The hardware and operating system
       The compiler used to compile
       A description of the bug behavior
       A short script or "recipe" which exercises the bug

       _b_a_s_h_b_u_g inserts the first three items automatically into  the  template
       it provides for filing a bug report.

       Comments and bug reports concerning this manual page should be directed
       to _c_h_e_t_._r_a_m_e_y_@_c_a_s_e_._e_d_u.

BBUUGGSS
       It's too big and too slow.

       There are some subtle differences between bbaasshh and traditional versions
       of sshh, mostly because of the POSIX specification.

       Aliases are confusing in some uses.

       Shell builtin commands and functions are not stoppable/restartable.

       Compound  commands  and  command  lists of the form "a ; b ; c" are not
       handled gracefully when  combined  with  process  suspension.   When  a
       process  is stopped, the shell immediately executes the next command in
       the list or breaks out of any existing loops.  It suffices  to  enclose
       the  command  in  parentheses to force it into a subshell, which may be
       stopped as a unit, or to start the command in the background and  imme-
       diately bring it into the foreground.

       Array variables may not (yet) be exported.

GNU Bash 5.3                     2025 April 7                          _B_A_S_H(1)
